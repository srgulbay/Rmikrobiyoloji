import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext'; // Token için
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
// Uzmanlık alanları listesi (RegisterPage'deki ile aynı olabilir)
const specializations = [
    "YDUS", "TUS", "DUS", "Tıp Fakültesi Dersleri", "Diş Hekimliği Fakültesi Dersleri", "Diğer"
];


function AdminStatsOverview() {
    const [overviewStats, setOverviewStats] = useState(null); // Genel özet için
    const [userSummaries, setUserSummaries] = useState([]); // Kullanıcı listesi için
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [selectedSpec, setSelectedSpec] = useState('');
    const { token } = useAuth();

    const backendOverviewUrl = `${API_BASE_URL}/api/stats/admin/overview`;
    const backendUserSummariesUrl = `${API_BASE_URL}/api/stats/admin/user-summaries`; // Yeni endpoint

    // Hem genel özeti hem de kullanıcı listesini çeken fonksiyon
    const fetchStats = useCallback(async (filter = '') => {
        setLoading(true);
        setError('');
        setUserSummaries([]); // Önceki listeyi temizle
        setOverviewStats(null); // Önceki özeti temizle

        if (!token) { setError("Yetkilendirme token'ı bulunamadı."); setLoading(false); return; }

        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            let overviewUrl = backendOverviewUrl;
            let userSummariesUrl = backendUserSummariesUrl;

            if (filter) {
                const queryParam = `?specialization=${encodeURIComponent(filter)}`;
                overviewUrl += queryParam;
                userSummariesUrl += queryParam;
            }

            console.log("Fetching Overview Stats from:", overviewUrl);
            console.log("Fetching User Summaries from:", userSummariesUrl);

            // İki isteği aynı anda atalım
            const [overviewRes, summariesRes] = await Promise.all([
                axios.get(overviewUrl, config),
                axios.get(userSummariesUrl, config)
            ]);

            setOverviewStats(overviewRes.data);
            setUserSummaries(summariesRes.data || []); // Dizi gelmezse boş dizi ata

        } catch (err) {
            console.error("İstatistikleri çekerken hata:", err);
            const errorMsg = err.response?.data?.message || 'İstatistikler yüklenirken bir hata oluştu.';
            setError(errorMsg);
            setOverviewStats(null);
            setUserSummaries([]);
        } finally {
            setLoading(false);
        }
    }, [token, backendOverviewUrl, backendUserSummariesUrl]); // URL'leri bağımlılıklara ekle

    useEffect(() => {
        fetchStats(selectedSpec);
    }, [fetchStats, selectedSpec]);

    const handleFilterChange = (event) => {
        setSelectedSpec(event.target.value);
    };

    if (loading) return <p>Genel İstatistikler yükleniyor...</p>;

    return (

         // Ana div'e stil ekleyelim
         <div className="admin-section" style={{ padding: '15px', border: '1px solid var(--border-secondary)', borderRadius: 'var(--border-radius-md)', backgroundColor: 'var(--bg-secondary)', marginBottom:'var(--space-l)' }}>
            <h3>Genel Bakış ve Kullanıcı Performansları</h3>
            {error && <p style={{ color: 'red' }}>Hata: {error}</p>}

            <div style={{ marginBottom: '15px' }}>
                <label htmlFor="spec-filter">Uzmanlık Alanına Göre Filtrele: </label>
                <select id="spec-filter" value={selectedSpec} onChange={handleFilterChange}>
                    <option value="">Tümü</option>
                    {specializations.map(spec => ( <option key={spec} value={spec}>{spec}</option> ))}
                </select>
            </div>

            {/* Genel İstatistik Özeti */}
            {overviewStats && (
                <div style={{ marginBottom:'20px', paddingBottom:'15px', borderBottom:'1px solid var(--border-primary)'}}>
                    <h4>Genel Özet ({overviewStats.filter})</h4>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', gap: '10px' }}>
                        <div style={{padding: '10px', backgroundColor: 'var(--bg-tertiary)', borderRadius: 'var(--border-radius-sm)'}}><strong>Kullanıcı Sayısı:</strong> {overviewStats.userCount}</div>
                        <div style={{padding: '10px', backgroundColor: 'var(--bg-tertiary)', borderRadius: 'var(--border-radius-sm)'}}><strong>Toplam Deneme:</strong> {overviewStats.totalAttempts}</div>
                        <div style={{padding: '10px', backgroundColor: 'var(--bg-tertiary)', borderRadius: 'var(--border-radius-sm)'}}><strong>Doğru Sayısı:</strong> {overviewStats.correctAttempts}</div>
                        <div style={{padding: '10px', backgroundColor: 'var(--bg-tertiary)', borderRadius: 'var(--border-radius-sm)'}}><strong>Başarı Oranı:</strong> %{overviewStats.accuracy}</div>
                    </div>
                </div>
            )}

            {/* Kullanıcı Performans Listesi */}
            <h4>Kullanıcı Performansları ({selectedSpec || 'Tümü'})</h4>
            {userSummaries.length === 0 && !loading ? (
                 <p>Filtreye uygun kullanıcı veya deneme bulunamadı.</p>
            ) : (
                <div style={{overflowX:'auto'}}>
                    <table border="1" style={{ width: '100%', borderCollapse: 'collapse', minWidth:'500px' }}>
                        <thead>
                            <tr>
                                <th>Kullanıcı Adı</th>
                                <th>Toplam Deneme</th>
                                <th>Doğru Sayısı</th>
                                <th>Başarı Oranı (%)</th>
                                {/* İleride buraya detay linki eklenebilir */}
                            </tr>
                        </thead>
                        <tbody>
                            {userSummaries.map(userStat => (
                                <tr key={userStat.userId}>
                                    <td>{userStat.username} (ID: {userStat.userId})</td>
                                    <td>{userStat.totalAttempts}</td>
                                    <td>{userStat.correctAttempts}</td>
                                    <td>{userStat.accuracy}%</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
}

export default AdminStatsOverview;


import React, { useState, useEffect } from 'react';
import { Outlet, Link, NavLink } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useColorMode } from '@chakra-ui/react';
import { FaSignInAlt, FaUserPlus, FaSignOutAlt, FaSun, FaMoon, FaBars, FaTimes } from 'react-icons/fa';

function Layout() {
  const { isAuthenticated, user, logout } = useAuth();
  const { colorMode, toggleColorMode } = useColorMode();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  useEffect(() => {
    document.body.classList.toggle('dark-mode', colorMode === 'dark');
    // Mobil menü açıkken body scroll'u engelleme
    document.body.classList.toggle('mobile-menu-active', isMobileMenuOpen);
    // Cleanup function to remove the class if component unmounts while menu is open
    return () => {
        document.body.classList.remove('mobile-menu-active');
    };
  }, [colorMode, isMobileMenuOpen]); // isMobileMenuOpen'ı bağımlılıklara ekle

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };

  const handleLogout = () => {
    logout();
    setIsMobileMenuOpen(false);
  };

  const handleNavLinkClick = () => {
      setIsMobileMenuOpen(false);
  }

  const getNavLinkClass = ({ isActive }) => isActive ? 'nav-link active' : 'nav-link';
  const getMobileNavLinkClass = ({ isActive }) => isActive ? 'mobile-nav-link active' : 'mobile-nav-link';

  // Tema Değiştirici Butonunu ayrı bir component yapalım (tekrarı önlemek için)
   const ThemeToggleButton = ({ className = '' }) => (
       <button
           onClick={toggleColorMode}
           className={`btn btn-ghost btn-sm theme-toggle ${className}`}
           title={colorMode === 'light' ? 'Koyu Tema' : 'Açık Tema'}
           aria-label="Temayı Değiştir"
       >
           {colorMode === 'light' ? <FaMoon /> : <FaSun />}
       </button>
   );

  return (
    // app-layout sınıfı artık body'e eklenen sınıfla yönetiliyor
    <div className='app-layout'>
      <header className="main-header">
        <div className="container header-container">
          <div className="logo">
            <Link to="/browse">mikRobiyoloji</Link>
          </div>

          {/* Desktop Navigasyon Linkleri */}
          <nav className="nav-links desktop-nav">
            <NavLink to="/browse" className={getNavLinkClass}>Konular</NavLink>
            {isAuthenticated && user?.role === 'admin' && (
              <NavLink to="/admin" className={getNavLinkClass}>Yönetim Paneli</NavLink>
            )}
            {isAuthenticated && (
              <NavLink to="/solve" className={getNavLinkClass}>Soru Çöz</NavLink>
            )}
            {isAuthenticated && (
              <NavLink to="/my-stats" className={getNavLinkClass}>İstatistiklerim</NavLink>
            )}
            {isAuthenticated && (
              <NavLink to="/wordle-game" className={getNavLinkClass}>Kelime Oyunu</NavLink>
            )}
          </nav>

          {/* Sağ Taraf Kontroller */}
          <div className="header-right-controls">
            {/* Tema Değiştirici (Sadece Desktop'ta header'da) */}
            <div className="desktop-nav"> {/* desktop-nav ile sarmala */}
                 <ThemeToggleButton />
             </div>

            {/* Kullanıcı Menüsü (Desktop) */}
            <div className="user-menu desktop-nav">
              {isAuthenticated ? (
                <>
                  <span className="user-info" title={`Rol: ${user?.role} / Uzmanlık: ${user?.specialization || 'Belirtilmemiş'}`}>
                    Hoşgeldin, {user?.username || 'Kullanıcı'}!
                  </span>
                  <button
                    onClick={handleLogout}
                    className="btn btn-ghost btn-sm"
                    title="Çıkış Yap"
                    aria-label="Çıkış Yap"
                  >
                    <FaSignOutAlt />
                  </button>
                </>
              ) : (
                <>
                  <NavLink to="/login" className="btn btn-secondary btn-sm">
                     <FaSignInAlt className='btn-icon' /> Giriş Yap
                  </NavLink>
                  <NavLink to="/register" className="btn btn-primary btn-sm">
                      <FaUserPlus className='btn-icon' /> Kayıt Ol
                  </NavLink>
                </>
              )}
            </div>

            {/* Hamburger Butonu (Sadece Mobilde) */}
            <button
              className="hamburger-btn" // Bu sınıf mobilde gösterilecek
              onClick={toggleMobileMenu}
              aria-label="Menüyü Aç/Kapat"
              aria-expanded={isMobileMenuOpen}
            >
              {isMobileMenuOpen ? <FaTimes /> : <FaBars />}
            </button>
          </div>

        </div>
      </header>

       {/* Mobil Menü */}
      <div className={`mobile-menu ${isMobileMenuOpen ? 'is-open' : ''}`}>
          {/* Mobil Menü Kapatma Butonu (İsteğe Bağlı) */}
          {/* <button className="mobile-menu-close" onClick={toggleMobileMenu}><FaTimes /></button> */}

          <nav className='mobile-nav-links'>
             <NavLink to="/browse" className={getMobileNavLinkClass} onClick={handleNavLinkClick}>Konular</NavLink>
             {isAuthenticated && user?.role === 'admin' && (
               <NavLink to="/admin" className={getMobileNavLinkClass} onClick={handleNavLinkClick}>Yönetim Paneli</NavLink>
             )}
             {isAuthenticated && (
               <NavLink to="/solve" className={getMobileNavLinkClass} onClick={handleNavLinkClick}>Soru Çöz</NavLink>
             )}
             {isAuthenticated && (
               <NavLink to="/my-stats" className={getMobileNavLinkClass} onClick={handleNavLinkClick}>İstatistiklerim</NavLink>
             )}
             {isAuthenticated && (
               <NavLink to="/wordle-game" className={getNavLinkClass}>Kelime Oyunu</NavLink>
             )}
          </nav>

           <div className='mobile-user-menu'>
             {/* TEMA DEĞİŞTİRİCİ BURAYA TAŞINDI */}
             <div className='mobile-theme-toggle-container'>
                <span>Tema:</span>
                <ThemeToggleButton />
             </div>

             {isAuthenticated ? (
                 <>
                    <span className="user-info"> {user?.username || 'Kullanıcı'} ({user?.role})</span>
                     <button onClick={handleLogout} className="btn btn-danger btn-sm w-full mt-4">
                         <FaSignOutAlt className='btn-icon'/> Çıkış Yap
                     </button>
                 </>
             ) : (
                 <div className='d-flex flex-col gap-3 mt-4'> {/* mt-4 eklendi */}
                     <NavLink to="/login" className="btn btn-secondary w-full" onClick={handleNavLinkClick}>
                         <FaSignInAlt className='btn-icon' /> Giriş Yap
                     </NavLink>
                     <NavLink to="/register" className="btn btn-primary w-full" onClick={handleNavLinkClick}>
                         <FaUserPlus className='btn-icon' /> Kayıt Ol
                     </NavLink>
                 </div>
             )}
           </div>
      </div>
      {/* Mobil menü açıkken arka planı karartmak için overlay */}
      {isMobileMenuOpen && <div className="mobile-menu-overlay" onClick={toggleMobileMenu}></div>}

      <main className="main-content">
          <Outlet />
      </main>

    </div>
  );
}

export default Layout;


import React from 'react';
import { FaTrophy, FaSpinner } from 'react-icons/fa';

function Leaderboard({ data, loading, error }) {
    if (loading) {
        return <div className='text-center p-4'><FaSpinner className='animate-spin mx-auto text-muted' /></div>;
    }
    if (error) {
        return <div className="alert alert-warning text-sm">{error}</div>;
    }
    if (!data || data.length === 0) {
        return <div className="text-center p-4 text-muted text-sm">Henüz lider tablosu verisi yok.</div>;
    }

    return (
        <div className="leaderboard mt-6">
            <h4 className="font-semibold text-lg mb-3 flex items-center justify-center gap-2">
                <FaTrophy className='text-warning' /> Lider Tablosu (Top 10)
            </h4>
            {/* Tablo veya Liste ile gösterim */}
<ol className="list-decimal list-inside space-y-2 text-left">
    {data.map((entry, index) => (
        <li key={entry.userId || index} className={`p-2 rounded-md flex justify-between ${index < 3 ? 'font-semibold' : ''} ${index === 0 ? 'bg-[var(--bg-tertiary)]' : ''}`}>
            <span>
                <span className='inline-block w-6 mr-2 text-right'>{index + 1}.</span>
                {(entry.user?.username) || `Kullanıcı ${entry.userId}`}
            </span>
            <span className='font-bold text-[var(--accent-primary)]'>{entry.score} Puan</span>
        </li>
    ))}
</ol>
        </div>
    );
}

export default Leaderboard;


import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import DOMPurify from 'dompurify';
import { useAuth } from '../context/AuthContext';
const API_BASE_URL = import.meta.env.VITE_API_URL;

function LectureList({ selectedTopicId }) {
  const [allLectures, setAllLectures] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { token } = useAuth();
  const backendUrl      = `${API_BASE_URL}/api/lectures`;
const backendTopicUrl = `${API_BASE_URL}/api/topics`;
  
  // Alt konu ID'lerini bulan recursive fonksiyon
  const getAllDescendantIds = useCallback((topicId, topicsMap, includeSelf = true) => {
    let ids = includeSelf ? [topicId] : [];
    const directChildren = Object.values(topicsMap).filter(topic => topic.parentId === topicId);
    directChildren.forEach(child => {
      ids = ids.concat(getAllDescendantIds(child.id, topicsMap, true)); // true -> kendini de dahil et
    });
    return ids;
  }, []);


  // Filtrelenmiş dersler
  const filteredLectures = useMemo(() => {
    console.log("Filtering lectures for topicId:", selectedTopicId);
    if (selectedTopicId === null || selectedTopicId === undefined) {
      return allLectures;
    }
    // TODO: Alt konuları dahil etmek için:
    // 1. Tüm topic verisini (ağaç veya düz liste + map) al.
    // 2. seçilen topicId'nin tüm alt ID'lerini bul (getAllDescendantIds).
    // 3. Filter'ı `allDescendantIds.includes(lecture.topic?.id)` şeklinde yap.
    // Şimdilik sadece direkt eşleşme:
    return allLectures.filter(lecture => lecture.topic?.id === selectedTopicId);
  }, [allLectures, selectedTopicId]); // getAllDescendantIds ve topicsMap bağımlılığı eklenecek


  useEffect(() => {
    setLoading(true);
    const config = token ? { headers: { Authorization: `Bearer ${token}` } } : {};
    // Sadece dersleri çekelim, filtrelemeyi sonra yapalım
    axios.get(backendUrl, config)
      .then(response => {
        setAllLectures(response.data || []);
        setError('');
      })
      .catch(error => {
        console.error("Konu anlatımlarını çekerken hata:", error);
        setError('Konu anlatımları yüklenirken bir hata oluştu.');
        setAllLectures([]);
      })
      .finally(() => {
        setLoading(false);
      });
  }, [token, backendUrl]); // Token değişirse yeniden çek


  if (loading) return <p>Konu anlatımları yükleniyor...</p>;
  if (error) return <p style={{ color: 'red' }}>{error}</p>;

  return (
    <div>
      <h2>Konu Anlatımları {selectedTopicId !== null ? `(Filtre: Konu ID ${selectedTopicId})` : '(Tümü)'}</h2>
      {filteredLectures.length === 0 ? (
        <p>Gösterilecek konu anlatımı bulunamadı.</p>
      ) : (
        <div>
          {filteredLectures.map((lecture) => (
            <div key={lecture.id} style={{ border: '1px solid #eee', marginBottom: '15px', padding: '10px' }}>
              <h3>{lecture.title}</h3>
              <p><strong>Konu:</strong> {lecture.topic?.name || 'Belirtilmemiş'}</p>
              {lecture.imageUrl && ( <img src={lecture.imageUrl} alt={`${lecture.title} için görsel`} style={{ maxWidth: '300px', marginBottom: '10px', display:'block' }} /> )}
              <hr style={{margin: '10px 0'}}/>
              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(lecture.content) }} />
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default LectureList;


import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
const API_BASE_URL = import.meta.env.VITE_API_URL;

function QuestionList({ selectedTopicId }) {
  const [allQuestions, setAllQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const { token } = useAuth();
const backendUrl      = `${API_BASE_URL}/api/questions`;
const backendTopicUrl = `${API_BASE_URL}/api/topics`;

  // Alt konu ID'lerini bulan recursive fonksiyon
  const getAllDescendantIds = useCallback((topicId, topicsMap, includeSelf = true) => {
    let ids = includeSelf ? [topicId] : [];
    const directChildren = Object.values(topicsMap).filter(topic => topic.parentId === topicId);
    directChildren.forEach(child => {
      ids = ids.concat(getAllDescendantIds(child.id, topicsMap, true));
    });
    return ids;
  }, []);

  // Konuları state'te tutalım
  const [topicsMap, setTopicsMap] = useState({});
  useEffect(() => {
    if (!token) return;
    const config = { headers: { Authorization: `Bearer ${token}` } };
    axios.get(backendTopicUrl, config) // Ağaç yapısını alıyoruz
      .then(response => {
          // Düz map oluşturalım kolay erişim için
          const map = {};
          const flattenForMap = (nodes) => {
              if (!nodes) return;
              nodes.forEach(node => {
                  map[node.id] = node; // Çocukları da ekleyelim mi? Şimdilik sadece ID, name, parentId yeterli olabilir
                  if (node.children) flattenForMap(node.children);
              });
          }
          flattenForMap(response.data);
          setTopicsMap(map);
      })
      .catch(err => console.error("Konuları çekerken hata (QuestionList):", err));
  }, [token, backendTopicUrl]);


  useEffect(() => {
    setLoading(true);
    const config = token ? { headers: { Authorization: `Bearer ${token}` } } : {};
    axios.get(backendUrl, config) // Filtresiz tüm soruları çek
      .then(response => { setAllQuestions(response.data || []); setError(''); })
      .catch(error => { console.error("Soruları çekerken hata:", error); setError('Sorular yüklenirken bir hata oluştu.'); setAllQuestions([]); })
      .finally(() => { setLoading(false); });
  }, [token, backendUrl]);

  // Filtrelenmiş sorular
  const filteredQuestions = useMemo(() => {
    if (selectedTopicId === null || selectedTopicId === undefined) {
      return allQuestions;
    }
    // Seçilen konu ve TÜM alt konularının ID'lerini bul
    const relevantTopicIds = getAllDescendantIds(selectedTopicId, topicsMap, true); // Kendini de dahil et
    console.log("Filtering questions for topic IDs:", relevantTopicIds); // Debug
    return allQuestions.filter(q => q.topic?.id && relevantTopicIds.includes(q.topic.id));

  }, [allQuestions, selectedTopicId, topicsMap, getAllDescendantIds]);


  const stripHtml = (html) => { if (!html) return ''; return html.replace(/<[^>]*>?/gm, ''); };

  if (loading) return <p>Sorular yükleniyor...</p>;
  if (error) return <p style={{ color: 'red' }}>{error}</p>;

  return (
    <div>
      <h2>Soru Havuzu {selectedTopicId !== null ? `(Filtre: Konu ID ${selectedTopicId} ve Alt Konuları)` : '(Tümü)'}</h2>
      {filteredQuestions.length === 0 ? (
        <p>Gösterilecek soru bulunamadı.</p>
      ) : (
         <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead><tr><th>ID</th><th>Metin (Başlangıcı)</th><th>Konu</th><th>Zorluk</th><th>Sınıf.</th><th>Görsel</th></tr></thead>
            <tbody>
                {filteredQuestions.map((q) => (
                    <tr key={q.id}>
                        <td>{q.id}</td>
                        <td title={stripHtml(q.text)}>{stripHtml(q.text).substring(0, 70)}...</td>
                        <td>{q.topic?.name || '-'}</td>
                        <td>{q.difficulty}</td>
                        <td>{q.classification}</td>
                        <td>{q.imageUrl ? 'Var' : '-'}</td>
                    </tr>
                ))}
            </tbody>
         </table>
      )}
    </div>
  );
}

export default QuestionList;



import React from 'react';
// İkonları import etmeye devam ediyoruz
import {
    FaMicroscope, FaShieldAlt, FaBacteria, FaVirus, FaFlask,
    FaBug, FaBiohazard, FaFolder, FaChevronRight
} from 'react-icons/fa'; // Veya fa6

// Konu -> İkon Component Eşleştirmesi (Güncel haliyle)
const topicIconMap = {
  "Genel Mikrobiyoloji": FaMicroscope,
  "İmmünoloji": FaShieldAlt,
  "Bakteriyoloji": FaBacteria,
  "Viroloji": FaVirus,
  "Mikoloji": FaFlask, // Veya FaMushroom (fa6)
  "Parazitoloji": FaBug,
  "Enfeksiyon Hastalıkları": FaBiohazard,
  "Laboratuvar Uygulamaları": FaFlask,
  "default": FaFolder
};

// TopicCard Component'i
function TopicCard({ topic, onSelectTopic, className = '' }) {

  const IconComponent = topicIconMap[topic.name] || topicIconMap["default"];
  const hasChildren = topic.children && topic.children.length > 0;

  const handleClick = () => {
    onSelectTopic(topic);
  };

  // Temel sınıflara card-interactive ekleyerek hover efektlerini güçlendirelim
  const combinedClassName = `hierarchy-nav-card card-interactive ${className}`.trim();

  return (
    // button elementi tıklanabilirlik için iyi bir seçim
    <button
      className={combinedClassName}
      onClick={handleClick}
      type="button"
    >
      {/* İkon Alanı - Daha belirgin */}
      <div className="card-icon">
         {/* İkon Component'i */}
         <IconComponent aria-hidden="true" />
         {/* CSS Notu: .card-icon svg { ... } seçicisi ile renk/boyut ayarlanmalı */}
      </div>

      {/* Konu Başlığı - Daha okunaklı */}
      <h3 className="card-title">
        {topic.name}
      </h3>

      {/* Chevron (Alt konu varsa) - Daha belirgin */}
      {hasChildren && (
         <FaChevronRight className="hierarchy-chevron" aria-hidden="true" />
      )}
    </button>
  );
}

export default TopicCard;


import React, { Fragment } from 'react';

// Recursive Konu Düğümü
function TopicNode({ topic, onTopicSelect, selectedTopicId, level = 0 }) {
  const isSelected = topic.id === selectedTopicId;

  const handleSelect = (e) => {
    e.stopPropagation();
    // Eğer zaten seçili ise seçimi kaldır (null yap), değilse seç
    onTopicSelect(isSelected ? null : topic.id);
  };

  return (
    <Fragment key={topic.id}>
      <div
        onClick={handleSelect}
        style={{
          marginLeft: `${level * 15}px`, // Girinti
          padding: '6px 8px',
          cursor: 'pointer',
          fontWeight: isSelected ? 'bold' : 'normal',
          backgroundColor: isSelected ? '#d0d0d0' : 'transparent',
          borderBottom: '1px solid #f0f0f0',
          userSelect: 'none' // Metin seçilmesini engelle
        }}
        title={topic.description || topic.name} // Açıklama varsa göster
      >
        {topic.name}
      </div>
      {/* Alt konular varsa onları da render et */}
      {topic.children && topic.children.length > 0 && (
        <div style={{ marginLeft: '5px', borderLeft: '1px solid #e0e0e0' }}>
          {topic.children.map(child => (
            <TopicNode
              key={child.id}
              topic={child}
              onTopicSelect={onTopicSelect}
              selectedTopicId={selectedTopicId}
              level={level + 1}
            />
          ))}
        </div>
      )}
    </Fragment>
  );
}

// Ana Navigasyon Component'i
function TopicTreeNav({ topics, onTopicSelect, selectedTopicId }) {
  if (!topics || topics.length === 0) {
    return <p>Konu bulunamadı.</p>;
  }

  return (
    <div style={{ border: '1px solid #ccc', padding: '10px', height: '80vh', overflowY: 'auto' }}>
      <h4>Konular</h4>
      {/* Tümünü Göster Seçeneği */}
      <div
         onClick={() => onTopicSelect(null)} // null ID göndererek tümünü seç
         style={{ padding: '6px 8px', cursor: 'pointer', fontWeight: selectedTopicId === null ? 'bold' : 'normal', backgroundColor: selectedTopicId === null ? '#d0d0d0' : 'transparent', borderBottom: '1px solid #ccc', marginBottom: '5px' }}
      >
        Tüm Konular
      </div>
      {/* Ağacın köklerini render et */}
      {topics.map(rootTopic => (
        <TopicNode
          key={rootTopic.id}
          topic={rootTopic}
          onTopicSelect={onTopicSelect}
          selectedTopicId={selectedTopicId}
          level={0}
        />
      ))}
    </div>
  );
}

export default TopicTreeNav;

import React, { createContext, useState, useEffect, useContext } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext(null);

export const useAuth = () => {
  return useContext(AuthContext);
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('rmikro_token') || null);
  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('rmikro_token'));
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const API_URL = `${import.meta.env.VITE_API_URL}/api/auth`;

  useEffect(() => {
    if (token) {
      localStorage.setItem('rmikro_token', token);
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      setIsAuthenticated(true);
      // Token içindeki kullanıcı bilgisi parse edilip state'e konulabilir
      try {
         const decodedUser = JSON.parse(atob(token.split('.')[1])); // Basit decode, idealde kütüphane kullanılır
         setUser({ id: decodedUser.id, username: decodedUser.username, role: decodedUser.role, specialization: decodedUser.specialization });
      } catch (e) {
         console.error("Error decoding token for user state:", e);
         // Belki burada logout çağrılabilir veya /me endpoint'i ile kullanıcı bilgisi çekilebilir
         setUser(null); // Hata durumunda user'ı temizle
      }
    } else {
      localStorage.removeItem('rmikro_token');
      delete axios.defaults.headers.common['Authorization'];
      setIsAuthenticated(false);
      setUser(null);
    }
  }, [token]);

  useEffect(() => {
    const storedToken = localStorage.getItem('rmikro_token');
    if (storedToken) {
       setToken(storedToken);
    }
  }, []);


  const login = async (username, password) => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.post(`${API_URL}/login`, { username, password });
      if (response.data.token) {
        setToken(response.data.token);
        setUser(response.data.user);
        navigate('/');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Giriş sırasında bir hata oluştu.');
      console.error("Login error:", err.response?.data || err.message);
    } finally {
      setLoading(false);
    }
  };

  const register = async (username, password, specialization) => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.post(`${API_URL}/register`, { username, password, specialization });
      navigate('/login');
    } catch (err) {
      setError(err.response?.data?.message || 'Kayıt sırasında bir hata oluştu.');
      console.error("Register error:", err.response?.data || err.message);
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    setToken(null);
    setUser(null);
    navigate('/login');
  };

  const value = {
    user,
    token,
    isAuthenticated,
    loading,
    error,
    login,
    register,
    logout,
    setError
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export default AuthContext;


import React, { useState, useEffect, useCallback, Fragment, useRef } from 'react'; 
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import { Editor } from '@tinymce/tinymce-react';
import DOMPurify from 'dompurify';
import AdminStatsOverview from '../components/AdminStatsOverview';
// Gerekli ikonları import edelim
import { FaUsers, FaTags, FaChalkboardTeacher, FaQuestionCircle, FaUserEdit, FaTrashAlt, FaChartBar, FaFolderOpen, FaFileAlt, FaSave, FaTimesCircle, FaPlus, FaUpload, FaExclamationTriangle, FaInfoCircle } from 'react-icons/fa';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

// --- User Management Component ---
function UserManagement({ token }) {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { user: adminUser } = useAuth();
    const backendUserUrl = `${API_BASE_URL}/api/users`;
    const backendStatsUrl = `${API_BASE_URL}/api/stats/admin/user`;

    const fetchUsers = useCallback(async () => {
        setLoading(true); setError('');
        if (!token) { setError("Yetkilendirme token'ı bulunamadı."); setLoading(false); return; }
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const response = await axios.get(backendUserUrl, config);
            setUsers(response.data || []);
        } catch (err) {
            console.error("Kullanıcıları çekerken hata:", err);
            setError(err.response?.data?.message || 'Kullanıcılar yüklenirken bir hata oluştu.');
            setUsers([]);
        } finally {
            setLoading(false);
        }
    }, [token, backendUserUrl]);

    useEffect(() => { fetchUsers(); }, [fetchUsers]);

    const handleRoleChange = async (userId, newRole) => {
        if (!newRole) { /* TODO: Use Modal/Toast instead of alert */ alert('Lütfen bir rol seçin.'); return; }
        if (userId === adminUser?.id) { /* TODO: Use Modal/Toast instead of alert */ alert("Kendi rolünüzü buradan değiştiremezsiniz."); fetchUsers(); return; }
        /* TODO: Use Modal instead of confirm */
        if (!window.confirm(`Kullanıcı ID ${userId} için rolü "${newRole}" olarak değiştirmek istediğinize emin misiniz?`)) { return; }
        setError('');
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const updateUrl = `${backendUserUrl}/${userId}/role`;
            await axios.put(updateUrl, { role: newRole }, config);
            /* TODO: Use Toast success instead of alert */ alert('Rol başarıyla güncellendi!');
            fetchUsers();
        } catch (err) {
            console.error("Rol güncellenirken hata:", err);
            setError(err.response?.data?.message || 'Rol güncellenirken bir hata oluştu.');
        }
    };

    const handleDeleteUser = async (userId, username) => {
        if (userId === adminUser?.id) { /* TODO: Use Modal/Toast instead of alert */ alert("Kendinizi silemezsiniz!"); return; }
        /* TODO: Use Modal instead of confirm */
        if (window.confirm(`Kullanıcıyı (${username} - ID: ${userId}) silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!`)) {
            setError('');
            try {
                const config = { headers: { Authorization: `Bearer ${token}` } };
                const deleteUrl = `${backendUserUrl}/${userId}`;
                await axios.delete(deleteUrl, config);
                 /* TODO: Use Toast success instead of alert */ alert(`Kullanıcı (${username}) başarıyla silindi!`);
                fetchUsers();
            } catch (err) {
                console.error("Kullanıcı silinirken hata:", err);
                setError(err.response?.data?.message || 'Kullanıcı silinirken bir hata oluştu.');
            }
        }
    };

    // TODO: Replace alert with a Modal component to show stats
    const handleViewUserStats = async (userId, username) => {
        setError('');
        /* TODO: Use Modal/Toast instead of alert */ alert(`Kullanıcı ${username} (ID: ${userId}) için istatistikler getiriliyor...`);
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const statsUrl = `${backendStatsUrl}/${userId}/detailed`;
            const response = await axios.get(statsUrl, config);
            console.log('API Response Data:', response.data);
            let statsText = `--- ${username} İstatistikleri ---\n\n`;
            if (Array.isArray(response.data) && response.data.length > 0) {
                response.data.forEach(stat => {
                    statsText += `Konu: ${stat.topicName}\n`;
                    statsText += `Toplam Deneme: ${stat.totalAttempts}\n`;
                    statsText += `Doğru Sayısı: ${stat.correctAttempts}\n`;
                    statsText += `Başarı Oranı: %${stat.accuracy}\n`;
                    statsText += `--------------------------\n`;
                });
            } else {
                statsText += "Bu kullanıcı için henüz istatistik verisi bulunamadı.";
            }
            /* TODO: Use Modal/Toast instead of alert */ alert(statsText); // Replace with Modal display
        } catch (err) {
            console.error(`Kullanıcı ${userId} istatistikleri getirilirken hata:`, err);
             /* TODO: Use Modal/Toast instead of alert */ alert(`Hata: ${err.response?.data?.message || 'İstatistikler getirilemedi.'}`);
            setError(`Kullanıcı ${userId} istatistikleri getirilemedi.`);
        }
    };

    if (loading) return <div className='loading-indicator'><div className='spinner'></div> Kullanıcılar yükleniyor...</div>;

    return (
        // Her yönetim bölümü için .admin-section sınıfını kullan
        <div className="admin-section user-management">
            {/* Bölüm Başlığı */}
            <h3 className='d-flex align-center gap-3'>
                <FaUsers /> Kullanıcı Yönetimi
            </h3>

            {/* Hata Mesajı */}
            {error && (
                 <div className="alert alert-danger mb-4" role="alert">
                    <FaExclamationTriangle className='alert-icon' />
                    <div className="alert-content">{error}</div>
                 </div>
             )}

            {/* Kullanıcı Tablosu */}
            {users.length === 0 && !loading ? (
                 <div className="alert alert-info">
                     <FaInfoCircle className='alert-icon'/>
                     <div className="alert-content">Kullanıcı bulunamadı.</div>
                </div>
            ) : (
                <div className="table-container">
                    {/* Tabloya .table, .table-striped, .table-hover, .table-dense sınıflarını ekleyelim */}
                    <table className="table table-striped table-hover table-dense">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Kullanıcı Adı</th>
                                <th>Rol</th>
                                <th>Uzmanlık</th>
                                <th>Kayıt Tarihi</th>
                                <th className='text-right'>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            {users.map((user) => (
                                <tr key={user.id}>
                                    <td>{user.id}</td>
                                    <td>{user.username}</td>
                                    <td>
                                        {/* Rolü badge ile gösterelim */}
                                        <span className={`badge ${user.role === 'admin' ? 'badge-success' : 'badge-secondary'}`}>
                                            {user.role}
                                        </span>
                                    </td>
                                    <td>{user.specialization || '-'}</td>
                                    <td>{new Date(user.createdAt).toLocaleDateString()}</td>
                                    {/* İşlem butonları için .action-buttons */}
                                    <td className="action-buttons">
                                        {/* Rol Değiştirme */}
                                        <select
                                            defaultValue={user.role}
                                            id={`role-select-${user.id}`}
                                            className='form-select form-select-sm mr-2' // form-select ve küçük boyut
                                            disabled={user.id === adminUser?.id}
                                            style={{width: '100px', display:'inline-block', verticalAlign: 'middle'}} // Boyut ayarı
                                        >
                                            <option value="user">user</option>
                                            <option value="admin">admin</option>
                                        </select>
                                        <button
                                            className="btn btn-secondary btn-sm"
                                            disabled={user.id === adminUser?.id}
                                            onClick={() => { const el = document.getElementById(`role-select-${user.id}`); if(el) handleRoleChange(user.id, el.value); }}
                                            title="Rolü Güncelle"
                                        >
                                            <FaUserEdit /> {/* İkon */}
                                        </button>
                                        {/* İstatistikler Butonu */}
                                        <button
                                             className="btn btn-info btn-sm"
                                             onClick={() => handleViewUserStats(user.id, user.username)}
                                             title="Kullanıcı İstatistikleri"
                                        >
                                             <FaChartBar /> {/* İkon */}
                                        </button>
                                        {/* Sil Butonu */}
                                        <button
                                            className="btn btn-danger btn-sm"
                                            disabled={user.id === adminUser?.id}
                                            onClick={() => handleDeleteUser(user.id, user.username)}
                                            title="Kullanıcıyı Sil"
                                        >
                                            <FaTrashAlt /> {/* İkon */}
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
}

// --- Topic Management Component ---
function TopicManagement({ token }) {
    const [topics, setTopics] = useState([]); // Ağaç yapısı
    const [allTopicsFlat, setAllTopicsFlat] = useState([]); // Form için düz liste
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [formError, setFormError] = useState(''); // Form için ayrı hata state'i
    const [editingTopic, setEditingTopic] = useState(null);
    const [formState, setFormState] = useState({ name: '', description: '', parentId: '' });
    const backendUrl = `${API_BASE_URL}/api/topics`;

    const flattenTopics = (nodes, list = [], level = 0) => {
        nodes.forEach(node => {
            list.push({ id: node.id, name: '\u00A0'.repeat(level * 4) + node.name }); // Girinti için boşluk
            if (node.children) flattenTopics(node.children, list, level + 1);
        });
        return list;
    };

    const fetchTopics = useCallback(async () => {
        setLoading(true); setError('');
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const response = await axios.get(backendUrl, config);
            setTopics(response.data || []);
            // Hiyerarşik listeyi de düz listeye çevir (Form select için)
             // Düz liste oluştururken kök düğümleri ve çocukları dolaşalım
            const rootNodes = response.data || [];
            const flatList = [];
            const processNode = (node, level) => {
                 flatList.push({ id: node.id, name: '\u00A0'.repeat(level * 4) + node.name });
                 if (node.children && node.children.length > 0) {
                      node.children.forEach(child => processNode(child, level + 1));
                 }
             };
             rootNodes.forEach(node => processNode(node, 0));
             setAllTopicsFlat(flatList);

        } catch (err) { console.error("Konuları çekerken hata:", err); setError(err.response?.data?.message || 'Konular yüklenirken bir hata oluştu.'); setTopics([]); setAllTopicsFlat([]); }
        finally { setLoading(false); }
    }, [token, backendUrl]);

    useEffect(() => { fetchTopics(); }, [fetchTopics]);

    const handleInputChange = (e) => { const { name, value } = e.target; setFormState(prev => ({ ...prev, [name]: value })); };

    const handleFormSubmit = async (e) => {
        e.preventDefault(); setFormError('');
        const config = { headers: { Authorization: `Bearer ${token}` } };
        const topicData = { name: formState.name.trim(), description: formState.description.trim(), parentId: formState.parentId === '' ? null : parseInt(formState.parentId, 10) };

        if(!topicData.name){
            setFormError("Konu adı boş bırakılamaz.");
            return;
        }

        try {
            if (editingTopic) {
                await axios.put(`${backendUrl}/${editingTopic.id}`, topicData, config);
                 /* TODO: Use Toast success instead of alert */ alert('Konu başarıyla güncellendi!');
            } else {
                await axios.post(backendUrl, topicData, config);
                 /* TODO: Use Toast success instead of alert */ alert('Konu başarıyla eklendi!');
            }
            resetForm();
            fetchTopics(); // Listeyi yenile
        } catch (err) {
             console.error("Konu kaydedilirken hata:", err);
             setFormError(err.response?.data?.message || 'Konu kaydedilirken bir hata oluştu.');
        }
    };

    const handleEdit = (topic) => {
        const { children, ...topicDataToEdit } = topic; // children'ı ayır
        setEditingTopic(topicDataToEdit);
        setFormState({ name: topicDataToEdit.name, description: topicDataToEdit.description || '', parentId: topicDataToEdit.parentId === null ? '' : String(topicDataToEdit.parentId) });
        setFormError(''); // Düzenleme moduna geçerken form hatasını temizle
        // Forma scroll yapma
        const formElement = document.getElementById('topic-form');
        if (formElement) {
             formElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    };

     const handleDelete = async (topicId, topicName) => {
        /* TODO: Use Modal instead of confirm */
         if (window.confirm(`Konuyu (${topicName} - ID: ${topicId}) ve altındaki tüm alt konuları ve ilişkili içerikleri (ders, soru vb.) silmek istediğinize emin misiniz? Bu işlem geri alınamaz!`)) {
             setError(''); // Ana liste hatasını temizle
             try {
                 const config = { headers: { Authorization: `Bearer ${token}` } };
                 await axios.delete(`${backendUrl}/${topicId}`, config);
                  /* TODO: Use Toast success instead of alert */ alert('Konu başarıyla silindi!');
                 fetchTopics(); // Listeyi yenile
             } catch (err) {
                 console.error("Konu silinirken hata:", err);
                 setError(err.response?.data?.message || 'Konu silinirken bir hata oluştu.');
             }
         }
     };


    const resetForm = () => { setEditingTopic(null); setFormState({ name: '', description: '', parentId: '' }); setFormError(''); };

    // TopicNode'u stil sınıfları ve ikonlarla güncelleyelim
    const TopicNode = ({ topic, level = 0 }) => (
        // Fragment yerine doğrudan div, style'ı CSS değişkeni ile ayarlayalım
         <div className='topic-node-item' style={{ '--level': level }}>
            <span className='topic-name'>
                 {/* React Icons Kullanımı */}
                {topic.children?.length ? <FaFolderOpen /> : <FaFileAlt />}
                <span>[{topic.id}] {topic.name}</span>
             </span>
             <span className='topic-actions'>
                 <button onClick={() => handleEdit(topic)} className="btn btn-secondary btn-sm" title="Düzenle">
                     <FaUserEdit />
                 </button>
                 <button onClick={() => handleDelete(topic.id, topic.name)} className="btn btn-danger btn-sm" title="Sil">
                     <FaTrashAlt />
                 </button>
             </span>
        </div>
    );

    // Recursive render fonksiyonu
     const renderTopics = (topics, level = 0) => {
         return topics.map(topic => (
             <Fragment key={topic.id}>
                 <TopicNode topic={topic} level={level} />
                 {/* Alt konuları recursive olarak render et */}
                 {Array.isArray(topic.children) && topic.children.length > 0 && (
                      // Alt konular için bir sarmalayıcıya gerek yok, TopicNode kendi margin'ini ayarlıyor
                      renderTopics(topic.children, level + 1)
                 )}
             </Fragment>
         ));
     };

    if (loading) return <div className='loading-indicator'><div className='spinner'></div> Konular yükleniyor...</div>;

    return (
        <div className="admin-section topic-management">
            <h3 className='d-flex align-center gap-3'>
                 <FaTags /> Konu Yönetimi
             </h3>

            {error && (
                <div className="alert alert-danger mb-4" role="alert">
                     <FaExclamationTriangle className='alert-icon' />
                     <div className="alert-content">{error}</div>
                </div>
             )}

            {/* Konu Ekleme/Düzenleme Formu */}
            {/* admin-form-section sınıfını form'a uygula */}
             <form id="topic-form" onSubmit={handleFormSubmit} className="admin-form-section">
                <h4>{editingTopic ? `Konu Düzenle (ID: ${editingTopic.id})` : 'Yeni Konu Ekle'}</h4>

                {formError && <div className="alert alert-warning mb-4">{formError}</div>}

                <div className="form-group">
                    <label htmlFor="topicName" className='form-label'>Konu Adı:</label>
                    <input
                        type="text"
                        id="topicName"
                        name="name"
                        className='form-input' // Sınıfı uygula
                        value={formState.name}
                        onChange={handleInputChange}
                        required
                     />
                </div>

                <div className="form-group">
                    <label htmlFor="topicDescription" className='form-label'>Açıklama (Opsiyonel):</label>
                    <textarea
                        id="topicDescription"
                        name="description"
                        className='form-textarea' // Sınıfı uygula
                        value={formState.description}
                        onChange={handleInputChange}
                        rows="3"
                    />
                </div>

                <div className="form-group">
                    <label htmlFor="topicParent" className='form-label'>Üst Konu:</label>
                    <select
                        id="topicParent"
                        name="parentId"
                        className='form-select' // Sınıfı uygula
                        value={formState.parentId}
                        onChange={handleInputChange}
                        // Düzenleme sırasında kendini üst konu olarak seçmeyi engelle
                         disabled={loading}
                     >
                        <option value="">-- Ana Kategori --</option>
                        {/* Düzenleme modundaysa, mevcut konuyu listeden çıkar */}
                         {allTopicsFlat
                             .filter(o => !editingTopic || o.id !== editingTopic.id)
                             .map(o => (
                                <option key={o.id} value={o.id}>{o.name}</option>
                         ))}
                    </select>
                </div>

                 {/* Butonlar için flex container */}
                 <div className='d-flex gap-3 mt-5'>
                     <button type="submit" className='btn btn-primary'>
                         <FaSave className='btn-icon'/>
                         {editingTopic ? 'Güncelle' : 'Ekle'}
                     </button>
                     {editingTopic && (
                         <button type="button" onClick={resetForm} className='btn btn-secondary'>
                              <FaTimesCircle className='btn-icon'/>
                              İptal
                         </button>
                     )}
                 </div>
            </form>

            {/* Mevcut Konular Listesi */}
             <h4>Mevcut Konular (Hiyerarşik)</h4>
             {topics.length === 0 && !loading ? (
                 <div className="alert alert-info">
                     <FaInfoCircle className='alert-icon'/>
                     <div className="alert-content">Konu bulunamadı.</div>
                 </div>
             ) : (
                  // topic-management-hierarchy sınıfını uygula
                  <div className='topic-management-hierarchy'>
                      {renderTopics(topics, 0)}
                  </div>
             )}
        </div>
    );
}

// --- Lecture Management Component ---
function LectureManagement({ token }) {
    const [lectures, setLectures] = useState([]);
    const [topicsTree, setTopicsTree] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [formError, setFormError] = useState(''); // Form Error
    const [editingLecture, setEditingLecture] = useState(null);
    const [formState, setFormState] = useState({ title: '', content: '', topicId: '', imageUrl: '' });
    const [isUploading, setIsUploading] = useState(false);
    const editorRef = useRef(null); // TinyMCE ref

    const backendLectureUrl = `${API_BASE_URL}/api/lectures`;
    const backendTopicUrl = `${API_BASE_URL}/api/topics`;
    const backendUploadUrl = `${API_BASE_URL}/api/upload/image`;

    const fetchData = useCallback(async () => {
        setLoading(true); setError('');
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const [lecturesRes, topicsRes] = await Promise.all([
                axios.get(backendLectureUrl, config),
                axios.get(backendTopicUrl, config) // Hiyerarşik çekiyoruz
            ]);
            setLectures(lecturesRes.data || []);
            setTopicsTree(topicsRes.data || []); // Ağaç yapısını state'e al
        } catch (err) { console.error("Lecture/Topic Verisi çekerken hata:", err); setError(err.response?.data?.message || 'Veriler yüklenirken hata oluştu.'); setLectures([]); setTopicsTree([]); }
        finally { setLoading(false); }
    }, [token, backendLectureUrl, backendTopicUrl]);

    useEffect(() => { fetchData(); }, [fetchData]);

    const handleInputChange = (e) => { const { name, value } = e.target; setFormState(prev => ({ ...prev, [name]: value })); };
    const handleEditorChange = (content, editor) => { setFormState(prev => ({ ...prev, content: content })); };

    const handleFormSubmit = async (e) => {
        e.preventDefault(); setFormError('');
        const config = { headers: { Authorization: `Bearer ${token}` } };
        if (!formState.topicId) { setFormError('Lütfen bir konu seçin.'); return; }
        // TinyMCE içeriğini kontrol et (boş veya sadece <p><br></p> olmamalı)
        const editorContent = editorRef.current ? editorRef.current.getContent() : formState.content;
        if (!formState.title || !editorContent || editorContent.trim() === '<p><br data-mce-bogus="1"></p>' || editorContent.trim() === '<p><br></p>') {
             setFormError('Başlık ve İçerik alanları zorunludur.'); return;
        }
        const lectureData = { title: formState.title, content: editorContent, topicId: parseInt(formState.topicId, 10), imageUrl: formState.imageUrl.trim() === '' ? null : formState.imageUrl };
        try {
            if (editingLecture) {
                await axios.put(`${backendLectureUrl}/${editingLecture.id}`, lectureData, config);
            } else {
                await axios.post(backendLectureUrl, lectureData, config);
            }
             /* TODO: Use Toast success instead of alert */ alert(editingLecture ? 'Konu anlatımı güncellendi!' : 'Konu anlatımı eklendi!');
            resetForm();
            fetchData(); // Listeyi yenile
        } catch (err) { console.error("Konu anlatımı kaydedilirken hata:", err); setFormError(err.response?.data?.message || 'Konu anlatımı kaydedilirken bir hata oluştu.'); }
    };

    const handleEdit = (lecture) => {
        setEditingLecture(lecture);
        setFormState({ title: lecture.title, content: lecture.content || '', topicId: lecture.topic?.id ? String(lecture.topic.id) : '', imageUrl: lecture.imageUrl || '' });
        setFormError('');
        // TinyMCE içeriğini güncelle (ref üzerinden)
        if (editorRef.current) {
             editorRef.current.setContent(lecture.content || '');
        }
        const formElement = document.getElementById('lecture-form');
        if (formElement) {
             formElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    };

     const handleDelete = async (lectureId, lectureTitle) => {
         /* TODO: Use Modal instead of confirm */
         if (window.confirm(`Konu anlatımını silmek istediğinizden emin misiniz: ${lectureTitle} (ID: ${lectureId})? Bu işlem ilişkili soruları etkilemeyecektir.`)) {
             setError('');
             try {
                 const config = { headers: { Authorization: `Bearer ${token}` } };
                 await axios.delete(`${backendLectureUrl}/${lectureId}`, config);
                  /* TODO: Use Toast success instead of alert */ alert('Konu anlatımı başarıyla silindi!');
                 fetchData(); // Listeyi yenile
             } catch (err) { console.error("Konu anlatımı silinirken hata:", err); setError(err.response?.data?.message || 'Konu anlatımı silinirken bir hata oluştu.'); }
         }
     };

    const resetForm = () => {
         setEditingLecture(null);
         setFormState({ title: '', content: '', topicId: '', imageUrl: '' });
         setFormError('');
         // TinyMCE içeriğini temizle
         if (editorRef.current) {
             editorRef.current.setContent('');
         }
     };


    // TinyMCE için resim yükleme handler'ı
     const handleImageUpload = useCallback((blobInfo, progress) => new Promise((resolve, reject) => {
         if (!token) { reject('Yetkilendirme tokenı bulunamadı.'); return; }
         setIsUploading(true);
         const formData = new FormData();
         formData.append('file', blobInfo.blob(), blobInfo.filename());

         axios.post(backendUploadUrl, formData, {
             headers: {
                 'Content-Type': 'multipart/form-data',
                 'Authorization': `Bearer ${token}`
             },
             // İlerleme durumu için (opsiyonel)
             // onUploadProgress: (progressEvent) => {
             //     const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
             //     // progress(percentCompleted); // TinyMCE'nin progress callback'i
             // }
         })
         .then(res => {
             if (res.data && res.data.location) {
                  // Tam URL'yi döndürdüğümüzden emin olalım
                 const imageUrl = res.data.location.startsWith('http') ? res.data.location : API_BASE_URL + res.data.location;
                 resolve(imageUrl);
             } else {
                 reject('Sunucudan geçersiz cevap formatı.');
             }
         })
         .catch(err => {
             console.error('Resim yüklenirken hata:', err);
             const errorMsg = err.response?.data?.message || err.message || 'Resim yüklenemedi.';
             reject(`HTTP Error: ${err.response?.status} - ${errorMsg}`);
         })
         .finally(() => {
             setIsUploading(false);
         });
     }), [token, backendUploadUrl]);

    // Select için hiyerarşik option'ları oluşturan recursive fonksiyon
     const renderTopicOptions = useCallback((nodes, level = 0) => {
         let options = [];
         nodes.forEach(node => {
             options.push(
                 <option key={node.id} value={node.id}>
                     {'\u00A0'.repeat(level * 4) + node.name}
                 </option>
             );
             if (node.children && node.children.length > 0) {
                 options = options.concat(renderTopicOptions(node.children, level + 1));
             }
         });
         return options;
     }, []); // Bağımlılığı yok, bir kere oluşturulması yeterli


    if (loading) return <div className='loading-indicator'><div className='spinner'></div> Konu anlatımları yükleniyor...</div>;

    return (
        <div className="admin-section lecture-management">
            <h3 className='d-flex align-center gap-3'>
                 <FaChalkboardTeacher /> Konu Anlatımı Yönetimi
            </h3>

            {error && (
                <div className="alert alert-danger mb-4" role="alert">
                     <FaExclamationTriangle className='alert-icon' />
                     <div className="alert-content">{error}</div>
                </div>
             )}

             {/* Ders Ekleme/Düzenleme Formu */}
             <form id="lecture-form" onSubmit={handleFormSubmit} className="admin-form-section">
                 <h4>{editingLecture ? `Konu Anlatımı Düzenle (ID: ${editingLecture.id})` : 'Yeni Konu Anlatımı Ekle'}</h4>

                 {formError && <div className="alert alert-warning mb-4">{formError}</div>}
                 {isUploading && (
                      <div className="alert alert-info d-flex align-center gap-2 mb-4">
                           <div className='spinner spinner-sm'></div> Resim yükleniyor...
                      </div>
                  )}

                 <div className="form-group">
                     <label htmlFor="lectureTitle" className='form-label'>Başlık:</label>
                     <input
                         type="text"
                         id="lectureTitle"
                         name="title"
                         className='form-input'
                         value={formState.title}
                         onChange={handleInputChange}
                         required
                     />
                 </div>

                 <div className="form-group">
                     <label htmlFor="lectureContent" className='form-label'>İçerik:</label>
                     {/* TinyMCE Editörü */}
                     <Editor
                         apiKey={import.meta.env.VITE_TINYMCE_API_KEY}
                         onInit={(evt, editor) => editorRef.current = editor} // Ref'i ata
                         value={formState.content} // Kontrollü component için value
                         init={{
                             height: 350, // Yükseklik artırıldı
                             menubar: false,
                             plugins: [
                                 'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview', 'anchor',
                                 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'help', 'wordcount'
                             ],
                             toolbar: 'undo redo | blocks | bold italic forecolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media table | code removeformat | fullscreen preview | help',
                             images_upload_handler: handleImageUpload,
                             automatic_uploads: true,
                             file_picker_types: 'image media', // Medya eklendi
                             relative_urls : false,
                             remove_script_host : false,
                             // content_css: '/tinymce-content.css' // İstersen editör içi için ayrı CSS
                             // content_style: 'body { font-family:var(--font-family-base); font-size:var(--font-size-base); color:var(--text-primary); }' // Veya inline
                             skin: (document.body.classList.contains('dark-mode') ? "oxide-dark" : "oxide"), // Tema uyumu
                             content_css: (document.body.classList.contains('dark-mode') ? "dark" : "default") // Tema uyumu
                         }}
                         onEditorChange={handleEditorChange} // State'i güncelle
                         disabled={isUploading}
                     />
                 </div>

                 <div className="form-group">
                      <label htmlFor="lectureImageUrl" className='form-label'>Görsel URL (Opsiyonel - Editörden eklenmesi önerilir):</label>
                      <input
                          type="text"
                          id="lectureImageUrl"
                          name="imageUrl"
                          className='form-input'
                          value={formState.imageUrl}
                          onChange={handleInputChange}
                          placeholder="https://..."
                      />
                  </div>

                  <div className="form-group">
                      <label htmlFor="lectureTopic" className='form-label'>Ait Olduğu Konu:</label>
                      <select
                          id="lectureTopic"
                          name="topicId"
                          className='form-select'
                          value={formState.topicId}
                          onChange={handleInputChange}
                          required
                          disabled={loading || isUploading} // Konu listesi yüklenirken veya resim yüklerken disable et
                       >
                           <option value="">-- Konu Seçin --</option>
                           {/* Hiyerarşik option'ları render et */}
                           {renderTopicOptions(topicsTree)}
                       </select>
                  </div>

                  <div className='d-flex gap-3 mt-5'>
                      <button type="submit" disabled={isUploading} className='btn btn-primary'>
                           {isUploading ? <><div className='spinner spinner-sm mr-2'></div> Yükleniyor...</> : <><FaSave className='btn-icon'/> {editingLecture ? 'Güncelle' : 'Ekle'}</>}
                      </button>
                      {editingLecture && (
                          <button type="button" onClick={resetForm} disabled={isUploading} className='btn btn-secondary'>
                               <FaTimesCircle className='btn-icon'/>
                               İptal
                          </button>
                      )}
                  </div>
             </form>

              {/* Mevcut Dersler Tablosu */}
              <h4 className='mt-8 mb-4'>Mevcut Konu Anlatımları</h4>
              {lectures.length === 0 && !loading ? (
                   <div className="alert alert-info">
                       <FaInfoCircle className='alert-icon'/>
                       <div className="alert-content">Konu anlatımı bulunamadı.</div>
                   </div>
               ) : (
                   <div className="table-container">
                       <table className="table table-striped table-hover table-dense">
                           <thead>
                               <tr>
                                   <th>ID</th>
                                   <th>Başlık</th>
                                   <th>Konu</th>
                                   <th>Görsel URL</th>
                                   <th className='text-right'>İşlemler</th>
                               </tr>
                           </thead>
                           <tbody>
                               {lectures.map((lecture) => (
                                   <tr key={lecture.id}>
                                       <td>{lecture.id}</td>
                                       <td>{lecture.title}</td>
                                       <td>{lecture.topic?.name || '-'}</td>
                                       <td>
                                            {lecture.imageUrl ? (
                                                 <a href={lecture.imageUrl} target="_blank" rel="noopener noreferrer" className='link-discreet'>
                                                      {lecture.imageUrl.substring(0, 30)}...
                                                 </a>
                                             ) : '-'}
                                         </td>
                                       <td className="action-buttons">
                                           <button onClick={() => handleEdit(lecture)} className="btn btn-secondary btn-sm" title="Düzenle">
                                               <FaUserEdit />
                                           </button>
                                           <button onClick={() => handleDelete(lecture.id, lecture.title)} className="btn btn-danger btn-sm" title="Sil">
                                               <FaTrashAlt />
                                           </button>
                                       </td>
                                   </tr>
                               ))}
                           </tbody>
                       </table>
                   </div>
               )}
        </div>
    );
}

// --- Question Management Component ---
function QuestionManagement({ token }) {
    const [questions, setQuestions] = useState([]);
    const [topicsTree, setTopicsTree] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [formError, setFormError] = useState(''); // Form Error
    const [editingQuestion, setEditingQuestion] = useState(null);
    const initialFormState = { text: '', optionA: '', optionB: '', optionC: '', optionD: '', optionE: '', correctAnswer: '', classification: 'Çalışma Sorusu', topicId: '', imageUrl: '' };
    const [formState, setFormState] = useState(initialFormState);
    const [isUploading, setIsUploading] = useState(false);
    const [bulkInput, setBulkInput] = useState('');
    const [bulkError, setBulkError] = useState('');
    const [bulkSuccess, setBulkSuccess] = useState('');
    const [bulkLoading, setBulkLoading] = useState(false);
    const editorRef = useRef(null); // TinyMCE ref

    const backendQuestionUrl = `${API_BASE_URL}/api/questions`;
    const backendTopicUrl = `${API_BASE_URL}/api/topics`;
    const backendUploadUrl = `${API_BASE_URL}/api/upload/image`;

    const fetchData = useCallback(async () => {
        setLoading(true); setError('');
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const [questionsRes, topicsRes] = await Promise.all([
                axios.get(backendQuestionUrl, config),
                axios.get(backendTopicUrl, config)
            ]);
            setQuestions(questionsRes.data || []);
            setTopicsTree(topicsRes.data || []);
        } catch (err) { console.error("Soru/Konu verisi çekerken hata:", err); setError(err.response?.data?.message || 'Sorular veya konular yüklenirken bir hata oluştu.'); setQuestions([]); setTopicsTree([]); }
        finally { setLoading(false); }
    }, [token, backendQuestionUrl, backendTopicUrl]);

    useEffect(() => { fetchData(); }, [fetchData]);

    const handleInputChange = (e) => { const { name, value } = e.target; setFormState(prev => ({ ...prev, [name]: value })); };
    const handleQuestionEditorChange = (content, editor) => { setFormState(prev => ({ ...prev, text: content })); };

    const handleFormSubmit = async (e) => {
        e.preventDefault(); setFormError('');
        const config = { headers: { Authorization: `Bearer ${token}` } };
        if (!formState.topicId) { setFormError('Lütfen bir konu seçin.'); return; }
        const editorContent = editorRef.current ? editorRef.current.getContent() : formState.text;
         if (!editorContent || editorContent.trim() === '<p><br data-mce-bogus="1"></p>' || editorContent.trim() === '<p><br></p>') { setFormError('Soru Metni zorunludur.'); return; }
         if (!formState.optionA || !formState.optionB || !formState.optionC || !formState.optionD || !formState.optionE || !formState.correctAnswer) { setFormError('Lütfen Seçenekler (A-E) ve Doğru Cevap alanlarını doldurun.'); return; }

        const questionData = {
            text: editorContent,
            optionA: formState.optionA, optionB: formState.optionB, optionC: formState.optionC, optionD: formState.optionD, optionE: formState.optionE,
            correctAnswer: formState.correctAnswer.toUpperCase(), // Büyük harfe çevir
            classification: formState.classification,
            topicId: parseInt(formState.topicId, 10),
            imageUrl: formState.imageUrl.trim() === '' ? null : formState.imageUrl
        };
        try {
             if (editingQuestion) {
                 await axios.put(`${backendQuestionUrl}/${editingQuestion.id}`, questionData, config);
             } else {
                 await axios.post(backendQuestionUrl, questionData, config);
             }
             /* TODO: Use Toast success instead of alert */ alert(editingQuestion ? 'Soru güncellendi!' : 'Soru eklendi!');
             resetForm();
             fetchData(); // Listeyi yenile
        } catch (err) {
             console.error("Soru kaydedilirken hata:", err);
             setFormError(err.response?.data?.message || 'Soru kaydedilirken bir hata oluştu.');
        }
    };

    const handleEdit = (question) => {
         setEditingQuestion(question);
         setFormState({
             text: question.text || '',
             optionA: question.optionA || '', optionB: question.optionB || '', optionC: question.optionC || '', optionD: question.optionD || '', optionE: question.optionE || '',
             correctAnswer: question.correctAnswer || '',
             classification: question.classification || 'Çalışma Sorusu',
             topicId: question.topic?.id ? String(question.topic.id) : '',
             imageUrl: question.imageUrl || ''
         });
         setFormError('');
          // TinyMCE içeriğini güncelle
         if (editorRef.current) {
             editorRef.current.setContent(question.text || '');
         }
         const formElement = document.getElementById('question-form');
        if (formElement) {
             formElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
     };

     const handleDelete = async (questionId) => {
         /* TODO: Use Modal instead of confirm */
         if (window.confirm(`Soruyu silmek istediğinizden emin misiniz (ID: ${questionId})? Bu işlem geri alınamaz!`)) {
             setError('');
             try {
                 const config = { headers: { Authorization: `Bearer ${token}` } };
                 await axios.delete(`${backendQuestionUrl}/${questionId}`, config);
                  /* TODO: Use Toast success instead of alert */ alert('Soru başarıyla silindi!');
                 fetchData(); // Listeyi yenile
             } catch (err) { console.error("Soru silinirken hata:", err); setError(err.response?.data?.message || 'Soru silinirken bir hata oluştu.'); }
         }
     };

    const resetForm = () => {
        setEditingQuestion(null);
        setFormState(initialFormState);
        setFormError('');
        if (editorRef.current) {
             editorRef.current.setContent('');
         }
     };

    // Image upload handler (LectureManagement ile aynı)
    const handleImageUpload = useCallback((blobInfo, progress) => new Promise((resolve, reject) => {
        if (!token) { reject('Yetkilendirme tokenı bulunamadı.'); return; }
        setIsUploading(true); const formData = new FormData(); formData.append('file', blobInfo.blob(), blobInfo.filename());
        axios.post(backendUploadUrl, formData, { headers: { 'Content-Type': 'multipart/form-data', 'Authorization': `Bearer ${token}` } })
        .then(res => { if (res.data && res.data.location) { const imageUrl = res.data.location.startsWith('http') ? res.data.location : API_BASE_URL + res.data.location; resolve(imageUrl); } else { reject('Sunucudan geçersiz cevap formatı.'); } })
        .catch(err => { console.error('Resim yüklenirken hata:', err); const errorMsg = err.response?.data?.message || err.message || 'Resim yüklenemedi.'; reject(`HTTP Error: ${err.response?.status} - ${errorMsg}`); })
        .finally(() => { setIsUploading(false); });
    }), [token, backendUploadUrl]);

     // Bulk submit handler
     const handleBulkSubmit = async () => {
         setBulkError(''); setBulkSuccess(''); setBulkLoading(true);
         let questionsArray;
         try {
             questionsArray = JSON.parse(bulkInput);
             if (!Array.isArray(questionsArray)) throw new Error("Veri bir JSON dizisi olmalı.");
         } catch (parseError) { setBulkError(`Geçersiz JSON formatı: ${parseError.message}`); setBulkLoading(false); return; }
         if (questionsArray.length === 0) { setBulkError('Eklenecek soru bulunamadı.'); setBulkLoading(false); return; }

         try {
             const config = { headers: { Authorization: `Bearer ${token}` } };
             const response = await axios.post(`${backendQuestionUrl}/bulk`, questionsArray, config);
              /* TODO: Use Toast success instead of alert */ setBulkSuccess(response.data.message || `${response.data.addedCount || 0} soru başarıyla eklendi.`);
             if (response.data.validationErrors && response.data.validationErrors.length > 0) {
                  /* TODO: Use Toast warning/error instead of alert */ setBulkError(`Bazı sorular eklenemedi: ${response.data.validationErrors.map(e => `[Sıra: ${e.index}] ${e.error}`).join(', ')}`);
             }
             setBulkInput(''); // Başarılı olursa input'u temizle
             fetchData(); // Listeyi yenile
         } catch (err) {
             console.error("Toplu soru eklenirken hata:", err);
              /* TODO: Use Toast error instead of alert */ setBulkError(err.response?.data?.message || 'Toplu soru eklenirken bir hata oluştu.');
             if (err.response?.data?.validationErrors) {
                 setBulkError(prev => `${prev} Hatalar: ${err.response.data.validationErrors.map(e => `[Sıra: ${e.index}] ${e.error}`).join(', ')}`);
             }
         } finally { setBulkLoading(false); }
     };

     // Topic options render (LectureManagement ile aynı)
      const renderTopicOptions = useCallback((nodes, level = 0) => {
          let options = [];
          nodes.forEach(node => {
              options.push( <option key={node.id} value={node.id}> {'\u00A0'.repeat(level * 4) + node.name} </option> );
              if (node.children && node.children.length > 0) { options = options.concat(renderTopicOptions(node.children, level + 1)); }
          });
          return options;
      }, []);

    if (loading) return <div className='loading-indicator'><div className='spinner'></div> Sorular yükleniyor...</div>;

    return (
        <div className="admin-section question-management">
             <h3 className='d-flex align-center gap-3'>
                 <FaQuestionCircle /> Soru Yönetimi
            </h3>

            {error && (
                <div className="alert alert-danger mb-4" role="alert">
                     <FaExclamationTriangle className='alert-icon' />
                     <div className="alert-content">{error}</div>
                </div>
             )}

             {/* Soru Ekleme/Düzenleme Formu */}
            <form id="question-form" onSubmit={handleFormSubmit} className="admin-form-section">
                 <h4>{editingQuestion ? `Soru Düzenle (ID: ${editingQuestion.id})` : 'Yeni Soru Ekle'}</h4>

                 {formError && <div className="alert alert-warning mb-4">{formError}</div>}
                 {isUploading && (
                      <div className="alert alert-info d-flex align-center gap-2 mb-4">
                           <div className='spinner spinner-sm'></div> Resim yükleniyor...
                      </div>
                  )}

                 <div className="form-group">
                      <label className='form-label'>Soru Metni:</label>
                      <Editor
                         apiKey={import.meta.env.VITE_TINYMCE_API_KEY}
                         onInit={(evt, editor) => editorRef.current = editor}
                         value={formState.text}
                         init={{
                             height: 250, menubar: false,
                             plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'help', 'wordcount'],
                             toolbar: 'undo redo | blocks | bold italic forecolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media table | code removeformat | fullscreen preview | help',
                             images_upload_handler: handleImageUpload, automatic_uploads: true, file_picker_types: 'image media',
                             relative_urls: false, remove_script_host: false,
                             skin: (document.body.classList.contains('dark-mode') ? "oxide-dark" : "oxide"),
                             content_css: (document.body.classList.contains('dark-mode') ? "dark" : "default")
                         }}
                         onEditorChange={handleQuestionEditorChange}
                         disabled={isUploading}
                      />
                 </div>

                 {/* Seçenekler için Grid */}
                  <h5>Seçenekler ve Doğru Cevap</h5>
                  <div className="form-grid-columns mb-4">
                      {['A', 'B', 'C', 'D', 'E'].map(opt => (
                          <div className="form-group" key={opt}>
                               <label htmlFor={`option${opt}`} className='form-label'>Seçenek {opt}:</label>
                               <input type="text" id={`option${opt}`} name={`option${opt}`} className='form-input' value={formState[`option${opt}`]} onChange={handleInputChange} required />
                          </div>
                      ))}
                      <div className="form-group">
                          <label htmlFor="correctAnswer" className='form-label'>Doğru Cevap:</label>
                          <select id="correctAnswer" name="correctAnswer" className='form-select' value={formState.correctAnswer} onChange={handleInputChange} required style={{width:'80px'}}>
                              <option value="">Seç</option>
                              <option value="A">A</option>
                              <option value="B">B</option>
                              <option value="C">C</option>
                              <option value="D">D</option>
                              <option value="E">E</option>
                          </select>
                          {/* Eski input alternatifi */}
                          {/* <input type="text" name="correctAnswer" className='form-input' placeholder='A, B..' value={formState.correctAnswer} onChange={handleInputChange} required maxLength="1" style={{ width: '60px', textTransform: 'uppercase' }} /> */}
                      </div>
                  </div>

                  {/* Diğer Alanlar için Grid */}
                   <h5>Diğer Bilgiler</h5>
                   <div className="form-grid-columns">
                       <div className="form-group">
                           <label htmlFor="classification" className='form-label'>Sınıflandırma:</label>
                           <select id="classification" name="classification" className='form-select' value={formState.classification} onChange={handleInputChange}>
                               <option value="Çalışma Sorusu">Çalışma Sorusu</option>
                               <option value="Çıkmış Benzeri">Çıkmış Benzeri</option>
                               {/* Diğer sınıflandırmalar eklenebilir */}
                           </select>
                       </div>
                       <div className="form-group">
                           <label htmlFor="questionTopic" className='form-label'>Konu:</label>
                           <select id="questionTopic" name="topicId" className='form-select' value={formState.topicId} onChange={handleInputChange} required disabled={loading}>
                               <option value="">-- Konu Seçin --</option>
                               {renderTopicOptions(topicsTree)}
                           </select>
                       </div>
                       <div className="form-group">
                           <label htmlFor="questionImageUrl" className='form-label'>Görsel URL (Opsiyonel):</label>
                           <input type="text" id="questionImageUrl" name="imageUrl" className='form-input' value={formState.imageUrl} onChange={handleInputChange} placeholder="https://..."/>
                       </div>
                   </div>

                   <div className='d-flex gap-3 mt-5'>
                       <button type="submit" disabled={isUploading} className='btn btn-primary'>
                             {isUploading ? <><div className='spinner spinner-sm mr-2'></div> Yükleniyor...</> : <><FaSave className='btn-icon'/> {editingQuestion ? 'Güncelle' : 'Ekle'}</>}
                       </button>
                       {editingQuestion && (
                           <button type="button" onClick={resetForm} disabled={isUploading} className='btn btn-secondary'>
                                <FaTimesCircle className='btn-icon'/>
                                İptal
                           </button>
                       )}
                   </div>
            </form>

             {/* Toplu Soru Ekleme */}
             <div className="bulk-add-section">
                 <h4>Toplu Soru Ekle (JSON Formatında)</h4>
                 <p className='form-text mb-3'>Aşağıdaki alana belirtilen JSON formatında soru dizisi yapıştırın. Gerekli alanlar: `text`, `optionA`...`optionE`, `correctAnswer`, `topicId`. Opsiyonel: `classification`, `imageUrl`. </p>
                 <textarea
                     className='form-textarea mb-3'
                     rows="10"
                     placeholder='[{"text": "<p>Soru metni...</p>", "optionA": "A şıkkı", ..., "correctAnswer": "C", "topicId": 123, "classification": "Çalışma Sorusu"}, ...]'
                     value={bulkInput}
                     onChange={(e) => setBulkInput(e.target.value)}
                     disabled={bulkLoading}
                 />
                 {bulkError && <div className="alert alert-danger mb-3">{bulkError}</div>}
                 {bulkSuccess && <div className="alert alert-success mb-3">{bulkSuccess}</div>}
                 <div className='mt-4'>
                     <button onClick={handleBulkSubmit} disabled={bulkLoading || !bulkInput.trim()} className='btn btn-primary'>
                         {bulkLoading ? <><div className='spinner spinner-sm mr-2'></div> Ekleniyor...</> : <><FaUpload className='btn-icon'/> Toplu Soruları Ekle</>}
                     </button>
                 </div>
             </div>

            {/* Mevcut Sorular Tablosu */}
            <h4 className='mt-8 mb-4'>Mevcut Sorular</h4>
            {questions.length === 0 && !loading ? (
                 <div className="alert alert-info">
                     <FaInfoCircle className='alert-icon'/>
                     <div className="alert-content">Soru bulunamadı.</div>
                 </div>
             ) : (
                 <div className="table-container">
                     <table className="table table-striped table-hover table-dense">
                         <thead>
                             <tr>
                                 <th>ID</th>
                                 <th>Metin (Başlangıcı)</th>
                                 <th>Konu</th>
                                 {/* <th>Zorluk</th> difficulty kaldırıldı */}
                                 <th>Sınıf.</th>
                                 <th className='text-right'>İşlemler</th>
                             </tr>
                         </thead>
                         <tbody>
                             {questions.map((q) => (
                                 <tr key={q.id}>
                                     <td>{q.id}</td>
                                     {/* HTML taglarını temizleyip gösterelim */}
                                     <td title={q.text.replace(/<[^>]*>/g, '')}>
                                         {q.text.replace(/<[^>]*>/g, '').substring(0, 60)}...
                                     </td>
                                     <td>{q.topic?.name || '-'}</td>
                                     {/* <td>{q.difficulty || '-'}</td> */}
                                     <td>{q.classification || '-'}</td>
                                     <td className="action-buttons">
                                         <button onClick={() => handleEdit(q)} className='btn btn-secondary btn-sm' title="Düzenle">
                                             <FaUserEdit />
                                         </button>
                                         <button onClick={() => handleDelete(q.id)} className='btn btn-danger btn-sm' title="Sil">
                                             <FaTrashAlt />
                                         </button>
                                     </td>
                                 </tr>
                             ))}
                         </tbody>
                     </table>
                 </div>
             )}
        </div>
    );
}


// --- Ana Admin Sayfası Component'i ---
function AdminPage() {
    const { token } = useAuth();

    // API URL kontrolü
    if (!API_BASE_URL) {
         console.error("VITE_API_URL environment variable is not set!");
         return (
              <div className="container mt-6">
                  <div className="alert alert-danger text-center">
                      Uygulama yapılandırma hatası: API adresi bulunamadı. Lütfen `.env` dosyasını kontrol edin.
                  </div>
              </div>
          );
    }
    // Token kontrolü
    if (!token) {
         return (
              <div className="container mt-6">
                  <div className="alert alert-warning text-center">
                      Bu sayfaya erişim için giriş yapmalısınız.
                  </div>
                  {/* Giriş sayfasına link */}
                   {/* <Link to="/login" className='btn btn-primary d-block w-full max-w-xs mx-auto mt-4'>Giriş Yap</Link> */}
              </div>
          );
    }

    return (
        // Ana container ve sayfa sınıfı
        // paddingTop kaldırıldı, container'a genel padding verilebilir veya iç elementlere margin
        <div className="admin-page-container container py-8"> {/* py-8 eklendi */}
             {/* Sayfa başlığı */}
             <h2 className="text-center mb-8">Yönetim Paneli</h2> {/* mb-8 ve text-center yardımcı sınıfları */}

             {/* İstatistik Özeti */}
             <AdminStatsOverview />

             {/* Yönetim Bölümleri */}
             {/* Araya <hr> yerine admin-section'ın kendi margin'i yeterli */}
             <UserManagement token={token} />
             <TopicManagement token={token} />
             <LectureManagement token={token} />
             <QuestionManagement token={token} />
        </div>
    );
}

export default AdminPage;


import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import DOMPurify from 'dompurify';
import { useAuth } from '../context/AuthContext';
import { FaArrowLeft, FaExclamationTriangle, FaInfoCircle, FaRedo } from 'react-icons/fa';

const API_BASE_URL = import.meta.env.VITE_API_URL;

function LectureViewPage() {
    const { topicId } = useParams();
    const [lectures, setLectures] = useState([]);
    const [topicName, setTopicName] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { token } = useAuth();
    const navigate = useNavigate();

    const backendLectureUrl = `${API_BASE_URL}/api/lectures`;
    const backendTopicUrl = `${API_BASE_URL}/api/topics`;

    const fetchData = useCallback(async () => {
        setLoading(true);
        setError('');
        setLectures([]);
        setTopicName('');

        if (!token) {
            setError("İçeriği görmek için giriş yapmalısınız.");
            setLoading(false);
            return;
        }
        if (!topicId) {
            setError("Geçerli bir konu ID'si bulunamadı.");
            setLoading(false);
            return;
        }

        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };

            // Backend'in topicId parametresi ile hem o konuyu hem de alt konuları
            // getirecek şekilde güncellendiğini varsayıyoruz.
            // Bu yüzden ekstra bir includeSubtopics parametresine gerek yok.
            const lectureApiUrl = `${backendLectureUrl}?topicId=${topicId}`;
            console.log("Fetching lectures for topic (and descendants):", lectureApiUrl);

            const topicApiUrl = `${backendTopicUrl}/${topicId}`;

            const [lecturesRes, topicRes] = await Promise.all([
                axios.get(lectureApiUrl, config),
                axios.get(topicApiUrl, config) // Konu adını almak için
            ]);

            setLectures(lecturesRes.data || []);
            setTopicName(topicRes.data?.name || `Konu ID: ${topicId}`);

            if (!lecturesRes.data || lecturesRes.data.length === 0) {
                console.log("Bu konu ve alt konuları için konu anlatımı bulunamadı.");
            }

        } catch (err) {
            console.error("Konu anlatımı veya konu bilgisi çekilirken hata:", err);
            const errorMsg = err.response?.data?.message || 'İçerik yüklenirken bir hata oluştu.';
            setError(errorMsg);
            setTopicName(`Konu ID: ${topicId}`);
        } finally {
            setLoading(false);
        }
    }, [topicId, token, backendLectureUrl, backendTopicUrl]);

    useEffect(() => {
        fetchData();
    }, [fetchData]);

    if (loading) {
        return (
             <div className="container py-8 animate-pulse">
                 <div className="h-5 bg-[var(--bg-tertiary)] rounded w-1/4 mb-4"></div>
                 <div className="h-8 bg-[var(--bg-tertiary)] rounded w-1/2 mb-8"></div>
                 <div className="space-y-6">
                     <div className="h-48 bg-[var(--bg-secondary)] rounded-lg"></div>
                     <div className="h-48 bg-[var(--bg-secondary)] rounded-lg"></div>
                 </div>
            </div>
        );
    }

    return (
        <div className="container py-8">
            <Link to="/browse" className="btn btn-link mb-6 inline-flex items-center">
                <FaArrowLeft className="mr-2" /> Konulara Geri Dön
            </Link>

            <h1 className="h2 mb-8">{topicName} - Konu Anlatımları</h1>

            {error && (
                <div className="alert alert-danger mb-6" role="alert">
                    <FaExclamationTriangle className='alert-icon' />
                    <div className="alert-content">
                        <p className='font-semibold'>Hata!</p>
                        <p>{error}</p>
                         <button onClick={fetchData} className="btn btn-danger btn-sm mt-3">
                             <FaRedo className='btn-icon'/> Tekrar Dene
                         </button>
                    </div>
                </div>
            )}

            <div className="lecture-list">
                {!loading && lectures.length === 0 && !error && (
                    <div className="alert alert-info text-center" role="alert">
                        <FaInfoCircle className='alert-icon mb-2 mx-auto text-2xl' />
                        <div className="alert-content">Bu konu başlığı (ve alt başlıkları) için henüz konu anlatımı eklenmemiş.</div>
                    </div>
                )}

                {lectures.map((lecture) => (
                    <article key={lecture.id} className="lecture-item card mb-6 shadow-md hover:shadow-lg transition-shadow duration-300">
                        <div className='card-body'>
                            <h3 className="h4 mb-4 font-semibold">{lecture.title}</h3>
                             {/* Görsel */}
                            {lecture.imageUrl && (
                                <img
                                    src={lecture.imageUrl}
                                    alt={`${lecture.title} için görsel`}
                                    className="lecture-image max-w-xl mx-auto my-5 rounded-md shadow-sm" // Boyut ve stil ayarı
                                    loading="lazy"
                                />
                            )}
                            {/* İçerik */}
                             {/* Tailwind Prose sınıfı metin stilleri için kullanışlı olabilir */}
                            <div
                                className="lecture-content prose dark:prose-invert max-w-none prose-sm sm:prose-base lg:prose-lg xl:prose-xl"
                                dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(lecture.content) }}
                            />
                        </div>
                    </article>
                ))}
            </div>
        </div>
    );
}

export default LectureViewPage;


import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
// İkonları import edelim
import { FaSignInAlt, FaExclamationTriangle } from 'react-icons/fa';

function LoginPage() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    // login fonksiyonunu, error state'ini ve setter'ını, loading ve isAuthenticated durumlarını context'ten al
    const { login, error, setError, loading, isAuthenticated } = useAuth();
    const navigate = useNavigate();

    // Eğer zaten giriş yapmışsa anasayfaya (/browse) yönlendir
    useEffect(() => {
        if (isAuthenticated) {
            navigate('/browse', { replace: true }); // Ana sayfa /browse olarak güncellendi
        }
        // Component unmount olurken hata mesajını temizle (Best practice)
        return () => setError(null);
    }, [isAuthenticated, navigate, setError]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Form gönderildiğinde önceki hatayı temizle
        if (!username || !password) {
            setError("Lütfen kullanıcı adı ve şifreyi girin.");
            return;
        }
        await login(username, password);
        // Başarılı giriş sonrası yönlendirme AuthContext içinde yapılıyor olmalı (navigate('/') veya navigate('/browse'))
    };

    return (
        // Sayfayı ortalamak için auth-page sınıfı
        <div className="auth-page">
            {/* Formu kart içinde göstermek için auth-form-container */}
            <div className="auth-form-container">
                {/* Başlık */}
                <h2 className="text-center mb-6">Giriş Yap</h2>

                {/* Giriş Formu */}
                <form onSubmit={handleSubmit}>
                    {/* Hata Mesajı Alanı */}
                    {error && (
                        <div className="alert alert-danger mb-4" role="alert">
                            <FaExclamationTriangle className='alert-icon mr-2' /> {/* Hata ikonu */}
                            {error}
                        </div>
                    )}

                    {/* Kullanıcı Adı Alanı */}
                    <div className="form-group">
                        <label htmlFor="username" className='form-label'>Kullanıcı Adı:</label>
                        <input
                            type="text"
                            id="username"
                            className='form-input' // Stil sınıfı
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                            disabled={loading} // Yüklenme sırasında disable et
                            placeholder='Kullanıcı adınızı girin'
                        />
                    </div>

                    {/* Şifre Alanı */}
                    <div className="form-group">
                        <label htmlFor="password" className='form-label'>Şifre:</label>
                        <input
                            type="password"
                            id="password"
                            className='form-input' // Stil sınıfı
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                            disabled={loading} // Yüklenme sırasında disable et
                            placeholder='Şifrenizi girin'
                        />
                        {/* Şifremi unuttum linki (opsiyonel) */}
                        {/* <div className="text-right mt-2">
                            <Link to="/forgot-password" className="text-sm link-discreet">Şifremi Unuttum?</Link>
                        </div> */}
                    </div>

                    {/* Gönderme Butonu */}
                    {/* Tam genişlik için w-full, büyük buton için btn-lg */}
                    <button type="submit" className='btn btn-primary btn-lg w-full mt-6' disabled={loading}>
                        {loading ? (
                            // Yüklenme durumunda spinner göster
                            <div className='spinner spinner-sm' role="status" aria-hidden="true"></div>
                        ) : (
                            // Normal durumda ikon ve metin
                            <>
                                <FaSignInAlt className='btn-icon' /> Giriş Yap
                            </>
                        )}
                    </button>
                </form>

                {/* Kayıt Sayfasına Link */}
                {/* auth-switch-link sınıfı ile stil */}
                <p className="auth-switch-link mt-6">
                    Hesabınız yok mu? <Link to="/register" className='font-semibold'>Kayıt Olun</Link>
                </p>
            </div>
        </div>
    );
}

export default LoginPage;


import React, { useState, useEffect, useCallback, useMemo } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
// İkonları import edelim
import { FaChartBar, FaExclamationTriangle, FaInfoCircle, FaListAlt, FaRedo, FaExclamationCircle } from 'react-icons/fa';

const API_BASE_URL = import.meta.env.VITE_API_URL;

// Zayıf konu belirleme eşikleri
const WEAK_TOPIC_ACCURACY_THRESHOLD = 65;
const WEAK_TOPIC_MIN_ATTEMPTS = 5;

function MyStatsPage() {
    const [summaryStats, setSummaryStats] = useState(null);
    const [detailedStats, setDetailedStats] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { token, user } = useAuth();

    const backendSummaryUrl  = `${API_BASE_URL}/api/stats/my-summary`;
    const backendDetailedUrl = `${API_BASE_URL}/api/stats/my-detailed`;

    // --- Fonksiyonlar (Değişiklik Yok) ---
    const fetchMyStats = useCallback(async () => {
        setLoading(true); setError('');
        if (!token) { setError("Giriş yapmadığınız için istatistikler getirilemedi."); setLoading(false); return; }
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const [summaryRes, detailedRes] = await Promise.all([
                axios.get(backendSummaryUrl, config),
                axios.get(backendDetailedUrl, config)
            ]);
            setSummaryStats(summaryRes.data);
            const sortedDetailedStats = Array.isArray(detailedRes.data)
               ? detailedRes.data.sort((a, b) => a.accuracy - b.accuracy)
               : [];
            setDetailedStats(sortedDetailedStats);
        } catch (err) {
            console.error("İstatistikleri çekerken hata:", err);
            setError(err.response?.data?.message || 'İstatistikler yüklenirken bir hata oluştu.');
            setSummaryStats(null); setDetailedStats([]);
        } finally { setLoading(false); }
    }, [token, backendSummaryUrl, backendDetailedUrl]);

    useEffect(() => { fetchMyStats(); }, [fetchMyStats]);

    const weakTopics = useMemo(() => {
        return detailedStats.filter(stat =>
            stat.accuracy < WEAK_TOPIC_ACCURACY_THRESHOLD &&
            stat.totalAttempts >= WEAK_TOPIC_MIN_ATTEMPTS
        );
    }, [detailedStats]);
    // --- Fonksiyonlar Sonu ---


    // --- Render Bölümü ---
    if (loading) {
        // İstatistik sayfası için skeleton
        return (
            <div className="container py-8">
                <div className="skeleton skeleton-title skeleton-animated w-1/3 mx-auto mb-8"></div>
                {/* Summary Skeleton */}
                <div className="card skeleton-animated mb-8" style={{ padding: 'var(--space-6)' }}>
                    <div className="skeleton skeleton-text skeleton-animated mx-auto mb-4" style={{width: '40%', height:'1.2rem'}}></div>
                    <div className="d-grid gap-4" style={{gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))'}}>
                         <div className="skeleton skeleton-animated" style={{height: '60px', borderRadius: 'var(--border-radius-md)'}}></div>
                         <div className="skeleton skeleton-animated" style={{height: '60px', borderRadius: 'var(--border-radius-md)'}}></div>
                         <div className="skeleton skeleton-animated" style={{height: '60px', borderRadius: 'var(--border-radius-md)'}}></div>
                    </div>
                </div>
                 {/* Table Skeleton */}
                 <div className="skeleton skeleton-text skeleton-animated mb-4" style={{width: '50%', height:'1.2rem'}}></div>
                 <div className="skeleton skeleton-animated" style={{ height: '200px', borderRadius: 'var(--border-radius-md)' }}></div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container mt-6">
                <div className="alert alert-danger" role="alert">
                    <FaExclamationTriangle className='alert-icon' />
                    <div className="alert-content">{error}</div>
                </div>
                <button onClick={fetchMyStats} className="btn btn-secondary mt-4">
                    <FaRedo className='btn-icon'/> Tekrar Dene
                 </button>
            </div>
        );
    }

    // Veri yoksa gösterilecek mesaj
     if (!summaryStats && detailedStats.length === 0) {
         return (
             <div className="container mt-6">
                 <div className="alert alert-info text-center" role="alert">
                     <FaInfoCircle className='alert-icon' />
                     <div className="alert-content">Henüz görüntülenecek istatistik verisi bulunmuyor. Biraz soru çözmeye ne dersin?</div>
                     {/* Soru çözme sayfasına link */}
                     {/* <Link to="/solve" className="btn btn-primary mt-4">Soru Çözmeye Başla</Link> */}
                 </div>
             </div>
         );
     }

    return (
        // Ana container ve dikey boşluk
        <div className="my-stats-page container py-8">
            {/* Sayfa Başlığı */}
            <h1 className="text-center mb-8">İstatistiklerim ({user?.username})</h1>

            {/* Özet İstatistikler */}
            {summaryStats && (
                // Daha önce admin panelinde kullandığımız yapıya benzer
                <div className="stats-summary-section card mb-8">
                    <h3 className='d-flex align-center justify-center gap-3'>
                        <FaChartBar /> Özet İstatistikler
                    </h3>
                    {/* Grid yapısı */}
                    <div className="stats-summary-grid">
                        <div className="summary-box">
                            <strong>Toplam Çözülen Soru</strong>
                            <span className="stat-value">{summaryStats.totalAttempts}</span>
                        </div>
                        <div className="summary-box">
                            <strong>Doğru Cevap Sayısı</strong>
                            <span className="stat-value text-success">{summaryStats.correctAttempts}</span>
                        </div>
                        <div className="summary-box">
                             <strong>Genel Başarı Oranı</strong>
                             {/* Başarı oranına göre renk */}
                             <span className={`stat-value ${summaryStats.accuracy >= 80 ? 'text-success' : summaryStats.accuracy >= 50 ? 'text-warning' : 'text-danger'}`}>
                                 %{summaryStats.accuracy}
                             </span>
                        </div>
                    </div>
                </div>
            )}

            {/* Ayırıcı yerine boşluk bırakmak yeterli */}

            {/* Detaylı İstatistikler */}
            <div className='detailed-stats-section mb-8'>
                <h3 className='mb-4 d-flex align-center gap-3'>
                    <FaListAlt /> Konu Bazlı Başarı
                </h3>
                {detailedStats.length === 0 ? (
                    <div className="alert alert-info">
                        <FaInfoCircle className='alert-icon'/>
                        <div className="alert-content">Henüz konu bazlı istatistik oluşturacak kadar soru çözülmedi.</div>
                    </div>
                ) : (
                    // Stilize edilmiş tabloyu kullan
                    <div className="table-container">
                        <table className="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Konu</th>
                                    <th className='text-center'>Toplam Deneme</th>
                                    <th className='text-center'>Doğru Sayısı</th>
                                    <th className='text-center'>Başarı Oranı (%)</th>
                                </tr>
                            </thead>
                            <tbody>
                                {detailedStats.map(topicStat => {
                                    const isWeak = weakTopics.some(wt => wt.topicId === topicStat.topicId);
                                    // Satıra .is-weak sınıfını ekle
                                    return (
                                        <tr key={topicStat.topicId} className={isWeak ? 'is-weak' : ''}>
                                            <td>{topicStat.topicName}</td>
                                            <td className='text-center'>{topicStat.totalAttempts}</td>
                                            <td className='text-center'>{topicStat.correctAttempts}</td>
                                            {/* Başarı oranını ve isWeak durumunu göster */}
                                            <td className={`text-center font-semibold ${isWeak ? 'text-danger' : topicStat.accuracy >= 80 ? 'text-success' : topicStat.accuracy >= 50 ? 'text-warning' : ''}`}>
                                                 {topicStat.accuracy}%
                                                 {isWeak && <FaExclamationCircle className="ml-2" title="Zayıf Konu"/>}
                                             </td>
                                        </tr>
                                    );
                                })}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            {/* Zayıf Konular Listesi */}
            {weakTopics.length > 0 && (
                // Özel alert sınıfını kullan veya alert-warning/danger
                <div className="weak-topics-alert alert alert-warning">
                    <h4 className='alert-title d-flex align-center gap-2'>
                        <FaExclamationTriangle /> Tekrar Etmeniz Önerilen Konular
                    </h4>
                    <div className="alert-content">
                         <p className='text-sm text-muted mb-3'>
                              (Başarı %{WEAK_TOPIC_ACCURACY_THRESHOLD} altında ve en az {WEAK_TOPIC_MIN_ATTEMPTS} deneme)
                         </p>
                        <ul className='list-disc pl-5'> {/* Madde işaretli liste */}
                            {weakTopics.map(wt => (
                                <li key={wt.topicId} className="mb-1">
                                    {wt.topicName}
                                    <span className='text-sm text-muted ml-2'>%{wt.accuracy}</span>
                                    {/* Opsiyonel: Bu konuya ait sorulara gitme linki */}
                                    {/* <Link to={`/solve?topicId=${wt.topicId}`} className="btn btn-link btn-xs ml-3">Pratik Yap</Link> */}
                                </li>
                            ))}
                        </ul>
                    </div>
                </div>
            )}
        </div>
    );
}

export default MyStatsPage;


import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, Link } from 'react-router-dom';
// İkonları import edelim
import { FaUserPlus, FaExclamationTriangle } from 'react-icons/fa';

function RegisterPage() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [specialization, setSpecialization] = useState('');
    // register fonksiyonunu, error state'ini ve setter'ını, loading ve isAuthenticated durumlarını context'ten al
    const { register, error, setError, loading, isAuthenticated } = useAuth();
    const navigate = useNavigate();

    // Eğer zaten giriş yapmışsa anasayfaya (/browse) yönlendir
    useEffect(() => {
        if (isAuthenticated) {
            navigate('/browse', { replace: true }); // Ana sayfa /browse
        }
        // Component unmount olurken hata mesajını temizle
        return () => setError(null);
    }, [isAuthenticated, navigate, setError]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Önceki hatayı temizle

        // Şifre eşleşme kontrolü
        if (password !== confirmPassword) {
            setError('Girilen şifreler eşleşmiyor!');
            return;
        }
        // Zorunlu alan kontrolü
        if (!username || !password) {
            setError('Kullanıcı adı ve şifre alanları zorunludur.');
            return;
        }
        // Şifre uzunluğu kontrolü (örnek)
        if (password.length < 6) {
             setError('Şifre en az 6 karakter olmalıdır.');
             return;
        }

        // Specialization boşsa null gönder
        const specToSend = specialization.trim() === '' ? null : specialization;
        await register(username, password, specToSend);
        // Başarılı kayıt sonrası yönlendirme AuthContext içinde yapılıyor (genellikle login'e)
    };

    return (
        // Sayfayı ortalamak için auth-page sınıfı
        <div className="auth-page">
            {/* Formu kart içinde göstermek için auth-form-container */}
            <div className="auth-form-container">
                {/* Başlık */}
                <h2 className="text-center mb-6">Kayıt Ol</h2>

                {/* Kayıt Formu */}
                <form onSubmit={handleSubmit}>
                    {/* Hata Mesajı Alanı */}
                    {error && (
                        <div className="alert alert-danger mb-4" role="alert">
                            <FaExclamationTriangle className='alert-icon mr-2' /> {/* Hata ikonu */}
                            {error}
                        </div>
                    )}

                    {/* Kullanıcı Adı Alanı */}
                    <div className="form-group">
                        <label htmlFor="usernameReg" className='form-label'>Kullanıcı Adı:</label> {/* id'yi değiştirdik (LoginPage ile çakışmasın) */}
                        <input
                            type="text"
                            id="usernameReg"
                            className='form-input' // Stil sınıfı
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            required
                            disabled={loading}
                            placeholder='Bir kullanıcı adı belirleyin'
                        />
                    </div>

                    {/* Şifre Alanı */}
                    <div className="form-group">
                        <label htmlFor="passwordReg" className='form-label'>Şifre:</label> {/* id'yi değiştirdik */}
                        <input
                            type="password"
                            id="passwordReg"
                            className='form-input' // Stil sınıfı
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                            disabled={loading}
                            placeholder='En az 6 karakter'
                            aria-describedby="passwordHelp" // Şifre gereksinimleri için açıklama (opsiyonel)
                        />
                         {/* Opsiyonel: Şifre gereksinimleri için yardımcı metin */}
                         {/* <p id="passwordHelp" className="form-text">Şifreniz en az 6 karakter olmalıdır.</p> */}
                    </div>

                     {/* Şifre Tekrar Alanı */}
                    <div className="form-group">
                        <label htmlFor="confirmPasswordReg" className='form-label'>Şifre Tekrar:</label> {/* id'yi değiştirdik */}
                        <input
                            type="password"
                            id="confirmPasswordReg"
                            className='form-input' // Stil sınıfı
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            required
                            disabled={loading}
                            placeholder='Şifrenizi tekrar girin'
                            // Şifreler eşleşmiyorsa invalid stili uygula (opsiyonel)
                            aria-invalid={password !== confirmPassword && confirmPassword !== ''}
                         />
                         {password !== confirmPassword && confirmPassword !== '' && (
                              <p className="invalid-feedback">Şifreler eşleşmiyor!</p>
                          )}
                    </div>

                     {/* Uzmanlık Alanı */}
                    <div className="form-group">
                        <label htmlFor="specialization" className='form-label'>Uzmanlık Alanı (İsteğe Bağlı):</label>
                        <select
                            id="specialization"
                            className='form-select' // Stil sınıfı
                            value={specialization}
                            onChange={(e) => setSpecialization(e.target.value)}
                            disabled={loading}
                        >
                            <option value="">-- Alan Seçiniz --</option>
                            <option value="YDUS">YDUS</option>
                            <option value="TUS">TUS</option>
                            <option value="DUS">DUS</option>
                            <option value="Tıp Fakültesi Dersleri">Tıp Fakültesi Dersleri</option>
                            <option value="Diş Hekimliği Fakültesi Dersleri">Diş Hekimliği Fakültesi Dersleri</option>
                            <option value="Diğer">Diğer</option>
                        </select>
                    </div>

                    {/* Gönderme Butonu */}
                    <button type="submit" className='btn btn-primary btn-lg w-full mt-6' disabled={loading}>
                        {loading ? (
                            <div className='spinner spinner-sm' role="status" aria-hidden="true"></div>
                        ) : (
                            <>
                                <FaUserPlus className='btn-icon' /> Kayıt Ol
                            </>
                        )}
                    </button>
                </form>

                {/* Giriş Sayfasına Link */}
                <p className="auth-switch-link mt-6">
                    Zaten hesabınız var mı? <Link to="/login" className='font-semibold'>Giriş Yapın</Link>
                </p>
            </div>
        </div>
    );
}

export default RegisterPage;


import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import axios from 'axios';
import DOMPurify from 'dompurify';
import { useAuth } from '../context/AuthContext';
import { useColorMode } from '@chakra-ui/react'; // Gece modu için eklendi
import { useLocation } from 'react-router-dom'; // topicId okumak için eklendi
import { FaArrowLeft, FaArrowRight, FaCheck, FaFlagCheckered, FaSpinner, FaRedo, FaExclamationTriangle, FaInfoCircle } from 'react-icons/fa';
import { FiClock, FiCheckCircle, FiXCircle } from "react-icons/fi";

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

const formatTime = totalSeconds => {
    const m = Math.floor(totalSeconds / 60);
    const s = totalSeconds % 60;
    return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
};

// Gece/Gündüz modu uyumlu arka plan rengi hesaplama
const getDifficultyBgVariable = (stats, colorMode, minAttempts = 5) => {
    if (!stats || stats.totalAttempts < minAttempts) {
        return null; // CSS varsayılanı (--bg-primary) uygular
    }
    const hue = Math.max(0, Math.min(120, stats.accuracy * 1.2));
    // OKLCH(lightness chroma hue / alpha)
    if (colorMode === 'dark') {
        return `oklch(0.2 0.04 ${hue} / 0.7)`; // Gece modu: %20 açıklık, %4 renk yoğunluğu
    } else {
        return `oklch(0.96 0.03 ${hue} / 0.6)`; // Açık tema: %96 açıklık, %3 renk yoğunluğu
    }
};


function SolvePage() {
    const [allQuestions, setAllQuestions] = useState([]);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [currentQuestion, setCurrentQuestion] = useState(null);
    const [selectedAnswer, setSelectedAnswer] = useState('');
    const [isAnswerChecked, setIsAnswerChecked] = useState(false);
    const [isCorrect, setIsCorrect] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { token } = useAuth();
    const [score, setScore] = useState(0);
    const [isQuizFinished, setIsQuizFinished] = useState(false);
    const [timeElapsed, setTimeElapsed] = useState(0);
    const timerRef = useRef(null);
    const [questionStatsMap, setQuestionStatsMap] = useState({});
    const { colorMode } = useColorMode(); // Renk modunu al
    const location = useLocation(); // URL bilgisini almak için

    const urls = {
        questions: `${API_BASE_URL}/api/questions`,
        attempts:  `${API_BASE_URL}/api/attempts`,
        stats:     `${API_BASE_URL}/api/stats/questions`
    };

    const initializeQuiz = useCallback(async () => {
        setLoading(true); setError(''); setScore(0);
        setIsQuizFinished(false); setSelectedAnswer(''); setIsAnswerChecked(false);
        setIsCorrect(null); setTimeElapsed(0); setQuestionStatsMap({});
        clearInterval(timerRef.current); // Önceki zamanlayıcıyı temizle
        timerRef.current = null;

        if (!token) {
            setError('Soruları çözebilmek için giriş yapmalısınız.'); setLoading(false); return;
        }
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const queryParams = new URLSearchParams(location.search);
            const topicIdFilter = queryParams.get('topicId');
            let questionsUrl = urls.questions;

            if (topicIdFilter) {
                 // Backend'in topicId aldığında alt konuları da getireceğini varsayıyoruz
                questionsUrl += `?topicId=${topicIdFilter}`;
                console.log("Fetching questions for topic:", topicIdFilter);
            } else {
                 console.log("Fetching all random questions");
            }

            const [qRes, sRes] = await Promise.all([
                axios.get(questionsUrl, config),
                axios.get(urls.stats, config) // Genel soru istatistikleri
            ]);

            const questionsData = qRes.data || [];
            if (questionsData.length) {
                const finalQuestions = topicIdFilter ? questionsData : [...questionsData].sort(() => Math.random() - 0.5);
                setAllQuestions(finalQuestions);
                setCurrentQuestion(finalQuestions[0]);
                setQuestionStatsMap(sRes.data || {});
                setTimeElapsed(0); // Zamanı sıfırla
            } else {
                setError(topicIdFilter ? 'Bu konuya ait soru bulunamadı.' : 'Uygun soru bulunamadı.');
                setAllQuestions([]); // Soru listesini boşalt
                setCurrentQuestion(null);
            }
        } catch (err) {
            console.error("Quiz verisi çekilirken hata:", err);
            setError('Sorular veya istatistikler yüklenirken bir hata oluştu.');
             setAllQuestions([]); // Hata durumunda listeyi boşalt
             setCurrentQuestion(null);
        } finally {
            setLoading(false);
        }
    }, [token, urls.questions, urls.stats, location.search]); // location.search bağımlılığa eklendi

    useEffect(() => {
        initializeQuiz();
         // Component unmount olduğunda zamanlayıcıyı temizlediğimizden emin olalım
        return () => {
            clearInterval(timerRef.current);
             timerRef.current = null;
        };
    }, [initializeQuiz]); // Sadece initializeQuiz değiştiğinde çalışır

    useEffect(() => {
        if (!loading && allQuestions.length > 0 && !isQuizFinished) {
            if (!timerRef.current) {
                timerRef.current = setInterval(() => {
                    setTimeElapsed(t => t + 1);
                }, 1000);
            }
        } else {
            clearInterval(timerRef.current);
            timerRef.current = null;
        }
         // Bu effect'in cleanup fonksiyonu, zamanlayıcıyı durdurmalı
         return () => {
             clearInterval(timerRef.current);
             timerRef.current = null;
         };
    }, [loading, allQuestions, isQuizFinished]); // allQuestions bağımlılığa eklendi

    const selectOption = useCallback((opt) => {
        if (!isAnswerChecked) {
            setSelectedAnswer(opt);
        }
    }, [isAnswerChecked]);

    const checkAnswer = useCallback(async () => {
        if (!selectedAnswer || !currentQuestion) return;
        const correct = selectedAnswer === currentQuestion.correctAnswer;
        setIsAnswerChecked(true);
        setIsCorrect(correct);
        if (correct) setScore(s => s + 1);
        if (token) {
            try { await axios.post(urls.attempts, { questionId: currentQuestion.id, selectedAnswer, isCorrect: correct }, { headers: { Authorization: `Bearer ${token}` } }); }
            catch (err) { console.error("Deneme kaydedilirken hata:", err); }
        }
    }, [selectedAnswer, currentQuestion, token, urls.attempts]);

    const goTo = useCallback((index) => {
        if (index < 0 || index >= allQuestions.length) return;
        // İsteğe bağlı: Geçiş animasyonu için state güncellemesi
        // setAnimating(true);
        // setTimeout(() => {
            setCurrentQuestion(allQuestions[index]);
            setCurrentQuestionIndex(index);
            setSelectedAnswer('');
            setIsAnswerChecked(false);
            setIsCorrect(null);
            setError('');
            // setAnimating(false);
        // }, 300); // Animasyon süresi kadar bekleme
    }, [allQuestions]);

    const prev = useCallback(() => goTo(currentQuestionIndex - 1), [goTo, currentQuestionIndex]);
    const next = useCallback(() => goTo(currentQuestionIndex + 1), [goTo, currentQuestionIndex]); // Cevap kontrol şartı kaldırıldı

    const finish = useCallback(() => {
        if (window.confirm('Testi bitirmek istediğinizden emin misiniz?')) {
            setIsQuizFinished(true);
            clearInterval(timerRef.current);
            timerRef.current = null;
        }
    }, []);

    const currentQStats = useMemo(() => questionStatsMap[currentQuestion?.id], [questionStatsMap, currentQuestion]);
    const difficultyBg = useMemo(() => getDifficultyBgVariable(currentQStats, colorMode), [currentQStats, colorMode]);
    // --- Render Bölümü ---
    if (loading) {
        // Daha açıklayıcı bir iskelet yükleme ekranı
        return (
            <div className="container py-8 animate-pulse"> {/* Pulse animasyonu için Tailwind benzeri sınıf varsayımı veya CSS'e ekle */}
                {/* Header Skeleton */}
                <div className="h-[50px] bg-gray-300 dark:bg-gray-700 rounded-md mb-6"></div>
                {/* Question Card Skeleton */}
                <div className="h-[250px] bg-gray-300 dark:bg-gray-700 rounded-lg mb-6"></div>
                {/* Options Grid Skeleton */}
                <div className="answer-options-grid mb-6">
                    {[...Array(5)].map((_, i) => (
                         <div key={i} className="h-[50px] bg-gray-300 dark:bg-gray-700 rounded-md"></div>
                    ))}
                </div>
                 {/* Controls Skeleton */}
                <div className="h-[60px] bg-gray-300 dark:bg-gray-700 rounded-md"></div>
            </div>
            // VEYA daha önceki CSS iskelet sınıflarını kullan:
            // <div className="container py-8">
            //      <div className="skeleton skeleton-animated mb-6" style={{ height: '50px', width: '100%', borderRadius: 'var(--border-radius-md)' }}></div>
            //      <div className="skeleton skeleton-animated mb-6" style={{ height: '250px', width: '100%', borderRadius: 'var(--border-radius-lg)' }}></div>
            //      <div className="answer-options-grid mb-6">
            //          {[...Array(5)].map((_, i) => ( <div key={i} className="skeleton skeleton-animated" style={{ height: '50px', borderRadius: 'var(--border-radius-md)' }}></div> ))}
            //      </div>
            //      <div className="skeleton skeleton-animated" style={{ height: '60px', width: '100%', borderRadius: 'var(--border-radius-md)' }}></div>
            // </div>
        );
    }

    if (error && !currentQuestion) { // Soru yüklenemedi hatası
        return (
            <div className="container mt-6">
                {/* Hata mesajı için alert bileşeni */}
                <div className="alert alert-danger" role="alert">
                    <FaExclamationTriangle className='alert-icon' />
                    <div className="alert-content">
                         <p className='font-semibold'>Hata!</p>
                         <p>{error}</p>
                    </div>
                </div>
                 <button onClick={initializeQuiz} className="btn btn-secondary mt-4">
                    <FaRedo className="btn-icon"/> Tekrar Dene
                 </button>
            </div>
        );
    }

    if (isQuizFinished) {
        const accuracy = allQuestions.length > 0 ? ((score / allQuestions.length) * 100).toFixed(0) : 0;
        // Başarıya göre renk sınıfını belirle (CSS'te .text-success vb tanımlı olmalı)
        const accuracyColorClass = accuracy >= 80 ? 'text-success' : accuracy >= 50 ? 'text-warning' : 'text-danger';

        return (
             <div className="container py-8 d-flex justify-center align-center">
                 {/* Bitiş kartı */}
                <div className="card quiz-finished-card text-center" style={{ maxWidth: '500px' }}>
                     <h2 className="h1 mb-4">Test Tamamlandı!</h2>
                      {/* Tanım listesi ile daha düzenli istatistikler */}
                     <dl className="my-6 text-left" style={{ borderTop: '1px solid var(--border-secondary)', borderBottom: '1px solid var(--border-secondary)', padding: 'var(--space-5) 0' }}>
                         <div className="d-flex justify-between mb-3">
                             <dt className="text-secondary">Geçen Süre:</dt>
                             <dd className="font-semibold">{formatTime(timeElapsed)}</dd>
                         </div>
                         <div className="d-flex justify-between mb-3">
                             <dt className="text-secondary">Toplam Soru:</dt>
                             <dd className="font-semibold">{allQuestions.length}</dd>
                         </div>
                         <div className="d-flex justify-between">
                             <dt className="text-secondary">Doğru Cevap:</dt>
                             <dd className="font-semibold">{score}</dd>
                         </div>
                     </dl>

                    <p className="text-lg font-semibold mb-1">Başarı Oranınız:</p>
                     {/* Renk sınıfını uygula */}
                    <p className={`final-score mb-6 ${accuracyColorClass}`}>
                        %{accuracy}
                    </p>

                    <button className="btn btn-primary btn-lg btn-restart" onClick={initializeQuiz}>
                         <FaRedo className="btn-icon" /> Yeniden Başla
                    </button>
                 </div>
            </div>
        );
    }

    // Mevcut soru yoksa veya yüklenirken bir sorun olduysa (güvenlik önlemi)
    if (!currentQuestion) {
         return (
             <div className="container mt-6">
                 <div className="alert alert-warning" role="alert">
                     <FaInfoCircle className='alert-icon' />
                     <div className="alert-content">Gösterilecek soru bulunamadı. Lütfen tekrar deneyin veya farklı bir konu seçin.</div>
                 </div>
                 <button onClick={initializeQuiz} className="btn btn-secondary mt-4">
                     <FaRedo className="btn-icon"/> Tekrar Dene
                 </button>
             </div>
         );
    }


    // --- Ana Soru Çözme Arayüzü ---
    return (
        <div className="container py-6">
            {/* Başlık ve İstatistikler Alanı */}
            <div className="solve-page-header">
                <h2 className="h3 m-0">Soru {currentQuestionIndex + 1} / {allQuestions.length}</h2>
                <div className="d-flex gap-4 align-center flex-wrap">
                     <div className="stat">
                         <FiCheckCircle className="text-success" />
                         <span>Doğru: <span className="stat-value">{score}</span></span>
                     </div>
                     <div className="stat">
                          {/* text-muted sınıfının CSS'te tanımlı olduğunu varsayıyoruz */}
                         <FiClock className="text-muted" />
                         <span>Süre: <span className="stat-value">{formatTime(timeElapsed)}</span></span>
                     </div>
                </div>
            </div>

            {/* Soru Kartı */}
            <div
                // Sınıflar CSS'ten gelir
                className="card question-card my-6"
                // Hesaplanan arka planı CSS değişkeni ile uygula
                // Gece modu uyumu için JS tarafında hesaplama yapıldı
                style={{ '--question-bg-dynamic': difficultyBg || 'transparent', backgroundColor: 'var(--question-bg-dynamic, var(--bg-primary))' }}
            >
                 <div className="question-stats">
                    {/* CSS'te .question-stats span {...} ile boşluk ve stil ayarlanabilir */}
                     <span><strong>Konu:</strong> {currentQuestion.topic?.name || '-'}</span>
                     <span><strong>Genel Başarı:</strong> {currentQStats ? `%${currentQStats.accuracy}` : '-'} ({currentQStats ? `${currentQStats.totalAttempts}d` : '-'})</span>
                     <span><strong>Sınıf:</strong> {currentQuestion.classification || '-'}</span>
                 </div>
                 <hr className="my-4" />
                 {currentQuestion.imageUrl && (
                    // Resmi tıklayınca büyütecek bir modal eklenebilir (opsiyonel)
                    <img
                        className="question-image mb-4"
                        src={currentQuestion.imageUrl}
                        alt={`Soru ${currentQuestionIndex + 1} için görsel`}
                        loading="lazy" // Lazy loading
                    />
                 )}
                 <div
                    className="question-text"
                    dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(currentQuestion.text) }}
                 />
            </div>

            {/* Cevap Seçenekleri */}
            <div className="answer-options-grid mb-6">
                {['A', 'B', 'C', 'D', 'E'].map(opt => {
                    const optionText = currentQuestion[`option${opt}`];
                    if (!optionText) return null;

                    const isSelected = selectedAnswer === opt;
                    const isCorrectAnswer = opt === currentQuestion.correctAnswer;
                    const isIncorrectSelected = isSelected && !isCorrectAnswer;
                    const showAsPale = isAnswerChecked && !isCorrectAnswer && !isSelected;

                    // Daha okunaklı sınıf birleştirme
                    const buttonClasses = `btn ${
                        isAnswerChecked
                            ? (isCorrectAnswer ? 'correct' : isIncorrectSelected ? 'incorrect' : 'btn-secondary opacity-60') // Kontrol sonrası
                            : (isSelected ? 'selected btn-secondary' : 'btn-secondary') // Kontrol öncesi
                    }`;

                    return (
                        <button
                            key={opt}
                            className={buttonClasses}
                            onClick={() => selectOption(opt)}
                            disabled={isAnswerChecked}
                            aria-pressed={isSelected}
                        >
                            {/* Seçenek harfini daha belirgin yapalım */}
                            <span className='option-letter'>{opt})</span>
                            {/* Seçenek metnini sarmalayalım */}
                            <span className='option-text'>{optionText}</span>
                        </button>
                    );
                })}
            </div>

            {/* Kontrol Düğmeleri */}
            <div className="solve-page-controls">
                 {/* Geri Butonu (İkonlu) */}
                <button className="btn btn-secondary btn-icon-only" onClick={prev} disabled={currentQuestionIndex === 0} aria-label="Önceki Soru" title="Önceki Soru" >
                    <FaArrowLeft />
                </button>

                {/* Kontrol Et / Geri Bildirim */}
                <div className="text-center flex-grow-1">
                    {!isAnswerChecked ? (
                        <button className="btn btn-primary" onClick={checkAnswer} disabled={!selectedAnswer} aria-label="Cevabı Kontrol Et" >
                             <FaCheck className="btn-icon" /> Kontrol Et
                        </button>
                    ) : (
                        <span className={`feedback-text ${isCorrect ? 'correct-text' : 'incorrect-text'}`}>
                            {isCorrect ? <FiCheckCircle className="inline-block mr-2 align-middle" /> : <FiXCircle className="inline-block mr-2 align-middle" />}
                            {isCorrect ? 'Doğru!' : 'Yanlış'}
                        </span>
                    )}
                </div>

                {/* İleri / Bitir Butonları (İkonlu) */}
                {currentQuestionIndex < allQuestions.length - 1 ? (
                     <button className="btn btn-secondary btn-icon-only" onClick={next} aria-label="Sonraki Soru" title="Sonraki Soru">
                         <FaArrowRight />
                     </button>
                ) : (
                     <button className="btn btn-success btn-icon-only" onClick={finish} disabled={!isAnswerChecked} aria-label="Testi Bitir" title="Testi Bitir">
                         <FaFlagCheckered />
                     </button>
                )}
            </div>
        </div>
    );
} // SolvePage Sonu

// Component'i export et
export default SolvePage;


import React, { useState, useEffect, useMemo, useCallback, Fragment } from 'react';
import axios from 'axios';
import { useNavigate, Link, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import TopicCard from '../components/TopicCard';
import { FaArrowLeft, FaBookOpen, FaPencilAlt, FaExclamationTriangle, FaInfoCircle, FaFolder, FaListAlt, FaRedo } from 'react-icons/fa';

const API_BASE_URL = import.meta.env.VITE_API_URL;

// --- Helper Fonksiyonlar (Component Dışında) ---
const findTopicAndPathById = (id, nodes, currentPath = []) => {
    for (const node of nodes) {
        const newPath = [...currentPath, { id: node.id, name: node.name }];
        if (node.id === id) {
            return { topic: node, path: newPath };
        }
        if (node.children) {
            const found = findTopicAndPathById(id, node.children, newPath);
            if (found) return found;
        }
    }
    return null;
};

const getTopicFromPath = (pathIds, tree) => {
    if (!pathIds || pathIds.length === 0) return null;
    let currentLevel = tree;
    let topic = null;
    for (const id of pathIds) {
        topic = currentLevel?.find(t => t.id === id);
        if (!topic) return null;
        currentLevel = topic.children;
    }
    return topic;
};
// --- Helper Fonksiyonlar Sonu ---

function TopicBrowserPage() {
    const [topicTree, setTopicTree] = useState([]);
    const [currentPathIds, setCurrentPathIds] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { token } = useAuth();
    const navigate = useNavigate();
    const location = useLocation();

    const backendTopicUrl = `${API_BASE_URL}/api/topics`;

    const fetchTopics = useCallback(async () => {
        setLoading(true); setError('');
        if (!token) { setError("Konuları görmek için giriş yapmalısınız."); setLoading(false); return;}
        try {
            const config = { headers: { Authorization: `Bearer ${token}` } };
            const response = await axios.get(backendTopicUrl, config);
            setTopicTree(response.data || []);
        } catch (err) {
            console.error("Konu ağacı çekilirken hata:", err);
            const errorMsg = err.response?.data?.message || 'Konular yüklenirken bir sunucu hatası oluştu. Lütfen daha sonra tekrar deneyin.';
            setError(errorMsg);
        } finally {
            setLoading(false);
        }
    }, [token, backendTopicUrl]);

    useEffect(() => { fetchTopics(); }, [fetchTopics]);

    const { activeTopic, currentTopics } = useMemo(() => {
        const topic = getTopicFromPath(currentPathIds, topicTree);
        const children = currentPathIds.length === 0 ? topicTree : topic?.children || [];
        return { activeTopic: topic, currentTopics: children };
    }, [currentPathIds, topicTree]);

    const handleTopicSelect = useCallback((selectedTopic) => {
        setError('');
        setCurrentPathIds(prevPath => [...prevPath, selectedTopic.id]);
    }, []);

    const handleGoBack = useCallback(() => {
        setError('');
        setCurrentPathIds(prevPath => prevPath.slice(0, -1));
    }, []);

     const breadcrumbItems = useMemo(() => {
        const items = [{ id: null, name: 'Konular', isLink: currentPathIds.length > 0 }];
        let currentLevel = topicTree;
        currentPathIds.forEach((pathId, index) => {
            const found = currentLevel?.find(t => t.id === pathId);
            if (found) {
                items.push({ id: pathId, name: found.name, isLink: index < currentPathIds.length - 1 });
                currentLevel = found.children;
            }
        });
        return items;
    }, [currentPathIds, topicTree]);

    const navigateToPath = useCallback((index) => {
        setCurrentPathIds(currentPathIds.slice(0, index));
    }, [currentPathIds]);

    // ÖNEMLİ NOT: handleContentNavigation fonksiyonu doğru topicId ile yönlendirme yapar.
    // Ancak 'lecture' tipinde yönlendirilen LectureViewPage component'inin
    // ve backend'deki /api/lectures endpoint'inin, tıpkı sorular için yapıldığı gibi,
    // gelen topicId'ye ait TÜM ALT KONULARIN derslerini de getirecek şekilde
    // güncellenmesi GEREKMEKTEDİR. Bu dosyadaki değişiklikler tek başına yeterli değildir.
    const handleContentNavigation = (type, topicId) => {
        if (!topicId) return;
        if (type === 'lecture') {
            navigate(`/lectures/topic/${topicId}`); // LectureViewPage'in tüm dersleri çekmesi lazım
        } else if (type === 'quiz') {
            navigate(`/solve?topicId=${topicId}`); // SolvePage zaten tüm soruları çekiyor
        }
    };

// --- Render Bölümü Başlangıcı ---
// --- Render Bölümü ---

    if (loading) {
        // İyileştirilmiş İskelet Yükleme Ekranı
        return (
            <div className="container py-8 animate-pulse">
                <div className="h-5 bg-[var(--bg-tertiary)] rounded w-1/2 mb-6"></div> {/* Breadcrumb Skeleton */}
                <div className="h-8 bg-[var(--bg-tertiary)] rounded w-32 mb-6"></div> {/* Back Button Skeleton */}
                <div className="h-24 bg-[var(--bg-secondary)] rounded-lg mb-8"></div> {/* Active Topic Skeleton */}
                <div className="card-grid">
                    {[...Array(6)].map((_, i) => (
                        <div key={i} className="h-20 bg-[var(--bg-secondary)] rounded-md"></div> // Card Skeleton
                    ))}
                </div>
            </div>
        );
    }

    if (error) {
        // İyileştirilmiş Hata Ekranı
        return (
            <div className="container mt-6">
                <div className="card card-accented-error text-center py-8">
                    <FaExclamationTriangle className='mb-4 text-[3rem] text-[var(--feedback-error)] mx-auto' />
                    <h3 className='h4 mb-3 text-[var(--text-primary)]'>Bir Hata Oluştu</h3>
                    <p className="text-muted mb-5">{error}</p>
                    <button onClick={fetchTopics} className="btn btn-danger">
                        <FaRedo className='btn-icon' /> Tekrar Dene
                    </button>
                </div>
            </div>
        );
    }

    // Ana İçerik Render
    return (
        <main className="topic-browser-page container py-8">

            {/* Navigasyon Alanı (Breadcrumb ve Geri Butonu) */}
            <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
                <nav aria-label="breadcrumb">
                    <ol className="breadcrumb" style={{ marginBottom: 0, padding: 0 }}>
                        {breadcrumbItems.map((item, index) => {
                            const isLast = index === breadcrumbItems.length - 1;
                            return (
                                <li key={item.id || 'home'} className={`breadcrumb-item ${isLast ? 'active' : ''}`}>
                                    {!isLast && item.id !== null ? (
                                        <a href="#" onClick={(e) => { e.preventDefault(); navigateToPath(index); }}>
                                            {item.name}
                                        </a>
                                    ) : (
                                        <span aria-current={isLast ? 'page' : undefined}>
                                            {item.name}
                                        </span>
                                    )}
                                </li>
                            );
                        })}
                    </ol>
                </nav>
                {currentPathIds.length > 0 && (
                    <button onClick={handleGoBack} className="btn btn-ghost btn-sm flex-shrink-0">
                        <FaArrowLeft className='btn-icon' />
                        Geri ({breadcrumbItems[breadcrumbItems.length - 2]?.name || 'Konular'})
                    </button>
                )}
            </div>

             {/* Aktif Konu Başlığı ve Aksiyonları */}
             {activeTopic && (
                 <div className='active-topic-section mb-8 p-6 rounded-lg bg-[var(--bg-secondary)] border border-[var(--border-primary)] shadow-sm'>
                      <div className='flex flex-wrap justify-between items-center gap-4'>
                          <div>
                                <h2 className='h2 mb-1'>{activeTopic.name}</h2>
                                {activeTopic.description && <p className='text-muted mb-0 text-sm'>{activeTopic.description}</p>}
                          </div>
                           <div className="action-buttons flex gap-3 flex-shrink-0">
                               <button
                                   onClick={() => handleContentNavigation('lecture', activeTopic.id)}
                                   className='btn btn-secondary'
                                   title={`${activeTopic.name} Konu Anlatımı (Alt konular dahil)`} // Title güncellendi
                               >
                                   <FaBookOpen className='btn-icon' />
                                   Konu Anlatımı
                               </button>
                               <button
                                    onClick={() => handleContentNavigation('quiz', activeTopic.id)}
                                    className='btn btn-primary'
                                    title={`${activeTopic.name} ve Alt Konuları İçin Soru Çöz`}
                                >
                                   <FaPencilAlt className='btn-icon' />
                                   Soruları Çöz
                               </button>
                           </div>
                      </div>
                 </div>
             )}


            {/* Alt Konular veya Boş Durum Mesajı */}
            {currentTopics.length > 0 ? (
                <>
                     {activeTopic && <h3 className="h4 mb-4 text-[var(--text-secondary)]">Alt Konular</h3>}
                     <div className="card-grid">
                         {currentTopics.map(topic => (
                             <TopicCard
                                 key={topic.id}
                                 topic={topic}
                                 onSelectTopic={handleTopicSelect}
                                 className="card-interactive"
                             />
                         ))}
                     </div>
                 </>
            ) : (
                 !loading && (
                    currentPathIds.length > 0 ? (
                        <div className="text-center text-muted py-5 italic">
                            Bu konuda başka alt başlık bulunmuyor.
                        </div>
                    ) : (
                        <div className="card text-center py-8">
                            <FaFolder className='mb-4 text-4xl text-[var(--text-muted)] mx-auto' />
                            <h3 className="h4 mb-3">Henüz Konu Eklenmemiş</h3>
                            <p className="text-muted">İçeriklere göz atmak için lütfen Yönetim Panelinden konuları ekleyin.</p>
                       </div>
                   )
                 )
            )}
        </main>
    );
} // TopicBrowserPage Sonu

export default TopicBrowserPage;



import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import axios from 'axios';
import DOMPurify from 'dompurify';
import { useAuth } from '../context/AuthContext';
import { useColorMode } from '@chakra-ui/react'; // Tema için
import { useLocation, Link } from 'react-router-dom';
import { fetchWordleQuestions } from '../services/quizService';
import { FaInfoCircle, FaExclamationTriangle, FaRedo, FaArrowRight, FaLightbulb } from 'react-icons/fa';
import { FiClock, FiCheckCircle, FiXCircle } from "react-icons/fi";
import Leaderboard from '../components/Leaderboard';

const API_BASE_URL = import.meta.env.VITE_API_URL;
const formatTime = totalSeconds => {
    const m = Math.floor(totalSeconds / 60);
    const s = totalSeconds % 60;
    return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
};

// Kelime oyunu component'i
function WordPracticePage() {
    const [leaderboard, setLeaderboard] = useState([]);
    const [leaderboardLoading, setLeaderboardLoading] = useState(true);
    const [leaderboardError, setLeaderboardError] = useState('');
    const [wordQuestions, setWordQuestions] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [currentQuestion, setCurrentQuestion] = useState(null);
    const [correctAnswer, setCorrectAnswer] = useState('');
    // revealedAnswer artık kullanılmıyor, kutuları cevap uzunluğuna göre oluşturacağız
    const [userGuess, setUserGuess] = useState('');
    const [feedback, setFeedback] = useState({ message: '', type: '' });
    const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);
    const [score, setScore] = useState(0);
    const [timeLeft, setTimeLeft] = useState(30);
    const [isGameOver, setIsGameOver] = useState(false);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const { token } = useAuth();
    const { colorMode } = useColorMode(); // Gerekirse kullan
    const timerRef = useRef(null);
    const inputRef = useRef(null);
    const fetchLeaderboard = useCallback(async () => {
    setLeaderboardLoading(true);
    setLeaderboardError('');
    try {
        const headers = token ? { Authorization: `Bearer ${token}` } : {}; // ✅ sadece token varsa ekle
        const response = await axios.get(`${API_BASE_URL}/api/stats/wordle-leaderboard`, {
            headers
        });
        setLeaderboard(response.data || []);
    } catch (err) {
        console.error("Lider tablosu çekilirken hata:", err);
        setLeaderboardError("Lider tablosu yüklenemedi.");
        setLeaderboard([]);
    } finally {
        setLeaderboardLoading(false);
    }
}, [token]);


    // Soruları çekme
    const loadQuestions = useCallback(async () => {
        setLoading(true); setError(''); setWordQuestions([]); setCurrentQuestion(null); setIsGameOver(false); setScore(0); setCurrentIndex(0);
        clearTimer(); // Timer'ı temizle

        if (!token) { setError("Oyunu oynamak için giriş yapmalısınız."); setLoading(false); return; }
        try {
            const questions = await fetchWordleQuestions(token);
            if (questions && questions.length > 0) {
                const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);
                setWordQuestions(shuffledQuestions);
                setupQuestion(shuffledQuestions[0]); // İlk soruyu kur
            } else {
                setError("Bu formatta uygun soru bulunamadı.");
            }
        } catch (err) {
            setError(err.message || "Sorular yüklenirken bir hata oluştu.");
        } finally {
            setLoading(false);
        }
    }, [token]); // Bağımlılık doğru

    // Yeni soruyu kurma fonksiyonu
    const setupQuestion = (question) => {
        if (!question || !question.answerWord) {
            console.error("Geçersiz soru verisi:", question);
            setIsGameOver(true);
            return;
        };
        setCurrentQuestion(question);
        const answer = question.answerWord.toUpperCase();
        setCorrectAnswer(answer);
        setUserGuess(''); // Tahmini temizle
        setFeedback({ message: '', type: '' });
        setIsAnswerSubmitted(false);
        setTimeLeft(30); // Zamanlayıcıyı resetle
        if (inputRef.current) inputRef.current.focus();
        startTimer();
    };

    // Zamanlayıcı yönetimi
    const clearTimer = useCallback(() => {
        clearInterval(timerRef.current);
        timerRef.current = null;
    }, []);

    const startTimer = useCallback(() => {
        clearTimer();
        timerRef.current = setInterval(() => {
            setTimeLeft(prevTime => {
                if (prevTime <= 1) {
                    clearTimer();
                    handleTimeUp();
                    return 0;
                }
                return prevTime - 1;
            });
        }, 1000);
    }, [clearTimer]); // handleTimeUp bağımlılığı kaldırıldı

    const handleTimeUp = useCallback(() => {
        if (isAnswerSubmitted) return;
        setIsAnswerSubmitted(true);
        setFeedback({ message: `Süre doldu! Cevap: ${correctAnswer}`, type: 'warning' });
    }, [correctAnswer, isAnswerSubmitted]);

    useEffect(() => {
        loadQuestions();
        return () => clearTimer();
    }, [loadQuestions, clearTimer]);
    useEffect(() => {
    if (isGameOver) {
        fetchLeaderboard();
    }
    }, [isGameOver, fetchLeaderboard]); // Oyun bitince leaderboard'u çek
    // Tahmini kontrol et
    const handleGuessSubmit = useCallback((e) => {
        if(e) e.preventDefault();
        if (!userGuess || isAnswerSubmitted || !correctAnswer) return;
        clearTimer();
        setIsAnswerSubmitted(true);
        const guessUpper = userGuess.trim().toUpperCase();
        if (guessUpper === correctAnswer) {
            const points = Math.max(10, timeLeft * 10);
            setFeedback({ message: `Tebrikler! +${points} puan!`, type: 'success'});
            setScore(prev => prev + points);
        } else {
            setFeedback({ message: `Yanlış! Doğru cevap: ${correctAnswer}`, type: 'error'});
        }
        // Input'u temizlemeye gerek yok, cevap gösterilecek
    }, [userGuess, isAnswerSubmitted, correctAnswer, timeLeft, clearTimer]);

    // Input değişikliği - Rakamlara izin ver, uzunluğu kontrol et
    const handleInputChange = useCallback((event) => {
         // Sadece harf ve rakamları al, boşlukları kaldır, büyük harfe çevir
        const newValue = event.target.value.replace(/[^a-zA-Z0-9ÇĞİÖŞÜçğüöşİ]/g, '').toUpperCase();
        // Cevap uzunluğunu geçmemesini sağla
        if (newValue.length <= correctAnswer.length) {
             setUserGuess(newValue);
        }
    }, [correctAnswer]); // correctAnswer değişince güncellenmeli

    // Sonraki soruya geçiş
    const goToNextQuestion = useCallback(() => {
        if (!isAnswerSubmitted) return;
        const nextIndex = currentIndex + 1;
        if (nextIndex < wordQuestions.length) {
            setCurrentIndex(nextIndex);
            setupQuestion(wordQuestions[nextIndex]);
        } else {
            setIsGameOver(true);
        }
    }, [currentIndex, wordQuestions, isAnswerSubmitted, setupQuestion]); // setupQuestion eklendi

    // --- Render Bölümü ---
    if (loading) {
         return ( <div className="container py-8 animate-pulse"> <div className="h-8 bg-[var(--bg-tertiary)] rounded w-1/3 mx-auto mb-8"></div> <div className="h-12 bg-[var(--bg-secondary)] rounded mb-6"></div> <div className="card max-w-2xl mx-auto p-8"> <div className="h-6 bg-[var(--bg-tertiary)] rounded w-3/4 mx-auto mb-6"></div> <div className="flex justify-center gap-2 mb-6"> {[...Array(7)].map((_, i)=><div key={i} className="h-12 w-10 bg-[var(--bg-tertiary)] rounded"></div>)} </div> <div className="h-10 bg-[var(--bg-tertiary)] rounded w-full"></div> </div> </div> );
    }
    if (error) {
        return ( <div className="container mt-6"> <div className="card card-accented-error text-center py-8"> <FaExclamationTriangle className='mb-4 text-4xl text-[var(--feedback-error)] mx-auto' /> <h3 className='h4 mb-3 text-[var(--text-primary)]'>Bir Hata Oluştu</h3> <p className="text-muted mb-5">{error}</p> <button onClick={loadQuestions} className="btn btn-danger"><FaRedo className='btn-icon'/> Tekrar Dene</button> </div> </div> );
    }
    if (isGameOver || (!loading && !currentQuestion)) { // Hata durumu zaten yukarıda handle edildi
        const gameFinished = isGameOver && wordQuestions.length > 0 && currentIndex >= wordQuestions.length -1; // Oyun bitti mi kontrolü
        const noQuestionsFound = !loading && wordQuestions.length === 0; // Hiç soru bulunamadı mı?

        return (
            <div className="container py-8"> {/* Flex kaldırıldı */}
                 {/* Kartı yatayda ortala ve yukarıdan boşluk ver */}
                <div className={`card quiz-finished-card text-center mx-auto mt-10 ${gameFinished ? 'card-accented-success' : 'card-accented-warning'}`} style={{ maxWidth: '550px' }}> {/* Max genişlik artırıldı */}
                    <h2 className="h1 mb-4">{gameFinished ? 'Oyun Bitti!' : 'Soru Bulunamadı'}</h2>
                    {gameFinished && (
                        <>
                            <p className="text-lg mb-4">Tebrikler, tüm soruları tamamladınız!</p>
                            {/* ... skor dl ... */}
                             <dl className="my-6 text-left border-t border-b border-[var(--border-secondary)] py-5">
                                 <div className="flex justify-between mb-3"> <dt className="text-secondary">Toplam Skor:</dt> <dd className="font-semibold text-xl text-[var(--accent-primary)]">{score}</dd> </div>
                             </dl>
                        </>
                    )}
                     {/* Soru bulunamama veya yüklenememe durumu için mesaj */}
                     {(noQuestionsFound || (!gameFinished && !loading && !currentQuestion)) && (
                        <p className="text-muted mb-6">Oyun için uygun soru bulunamadı veya yüklenirken bir hata oluştu.</p>
                    )}

                    <Leaderboard data={leaderboard} loading={leaderboardLoading} error={leaderboardError} />

                    <button className="btn btn-primary btn-lg btn-restart mt-8" onClick={loadQuestions}>
                         <FaRedo className="btn-icon" /> {gameFinished ? 'Tekrar Oyna' : 'Yeni Oyun Başlat'}
                    </button>
                 </div>
            </div>
        );
    }

    // --- Aktif Oyun Arayüzü ---
    return (
        <div className="container py-6 word-practice-page">
            <h1 className="h2 text-center mb-4">Kelime Çalışması</h1>
            <div className="flex justify-between items-center mb-6 p-3 px-4 rounded-md bg-[var(--bg-secondary)] border border-[var(--border-primary)] max-w-md mx-auto text-sm">
                <div className='flex items-center gap-2'> <span className='text-muted'>Skor:</span> <span className='font-bold text-lg text-[var(--accent-primary)]'>{score}</span> </div>
                <div className='flex items-center gap-2'> <FiClock className="text-muted" /> <span className='font-semibold text-lg'>{formatTime(timeLeft)}</span> </div>
            </div>

            <div className="card max-w-2xl mx-auto p-6 md:p-8 shadow-lg">
                <div className='card-body text-center'> {/* Kart içeriğini ortala */}
                    {/* SORU METNİ ALANI EKLENDİ */}
                    <p className="question-text text-xl text-primary mb-8">
                         {currentQuestion.text}
                    </p>

                    {/* Cevap Kutucukları */}
                    <div className="word-display flex flex-wrap justify-center gap-2 mb-6">
                         {/* Doğru cevap uzunluğu kadar kutu oluştur */}
                         {Array.from({ length: correctAnswer.length }).map((_, index) => {
                             const char = correctAnswer[index];
                             const isRevealed = index === 0 || isAnswerSubmitted; // İlk harf veya cevap gönderildiyse
                             return (
                                 <span key={index} className={`word-letter-box ${isRevealed ? 'revealed-final' : ''} ${index === 0 ? 'revealed-initial' : ''}`}>
                                     {/* Sadece ilk harfi veya cevap gönderildiyse göster */}
                                     {isRevealed ? char : ''}
                                 </span>
                             );
                         })}
                    </div>

                     {/* Geri Bildirim */}
                     {feedback.message && ( <div className={`alert text-sm mb-4 ${feedback.type === 'success' ? 'alert-success' : feedback.type === 'error' ? 'alert-danger' : 'alert-warning'}`}> {feedback.type === 'success' && <FiCheckCircle className='alert-icon'/>} {feedback.type === 'error' && <FiXCircle className='alert-icon'/>} {feedback.type === 'warning' && <FaExclamationTriangle className='alert-icon'/>} <span className='alert-content'>{feedback.message}</span> </div> )}

                    {/* Tahmin Girişi veya Sonraki Soru */}
                    {!isAnswerSubmitted ? (
                         <form onSubmit={handleGuessSubmit} className='flex flex-col sm:flex-row gap-3 justify-center items-center mt-4 max-w-sm mx-auto'>
                             <input
                                 ref={inputRef}
                                 type="text"
                                 className="form-input flex-grow text-center uppercase text-xl tracking-wider font-semibold font-mono word-guess-input"
                                 value={userGuess}
                                 onChange={handleInputChange}
                                 maxLength={correctAnswer.length}
                                 placeholder={"_ ".repeat(correctAnswer.length)}
                                 autoFocus
                                 disabled={isAnswerSubmitted}
                                 aria-label="Tahmininizi girin"
                                 autoComplete='off'
                             />
                             <button type="submit" className="btn btn-primary w-full sm:w-auto px-6" disabled={!userGuess || userGuess.length !== correctAnswer.length}>
                                 Tahmin Et
                             </button>
                         </form>
                    ) : (
                        <button onClick={goToNextQuestion} className='btn btn-secondary mt-4'>
                            Sonraki Soru <FaArrowRight className='ml-2'/>
                        </button>
                    )}
                </div>
            </div>
             <p className='text-center text-muted text-sm mt-6'> Kelimeyi tahmin etmek için kutucuklara yazın ve "Tahmin Et" butonuna tıklayın veya Enter'a basın. </p>
        </div>
    );
}

export default WordPracticePage;


import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
const WORDLE_QUESTIONS_URL = `${API_BASE_URL}/api/questions/wordle-practice`; // Yeni endpoint

export const fetchWordleQuestions = async (token) => {
    if (!token) {
        throw new Error("Yetkilendirme token'ı bulunamadı.");
    }
    try {
        const config = { headers: { Authorization: `Bearer ${token}` } };
        const response = await axios.get(WORDLE_QUESTIONS_URL, config);
        return response.data || []; // Veriyi veya boş dizi döndür
    } catch (error) {
        console.error("Kelime pratiği soruları servis hatası:", error);
        // Hata objesini veya özel bir mesajı fırlatabiliriz
        throw new Error(error.response?.data?.message || 'Sorular getirilirken bir sunucu hatası oluştu.');
    }
};

// Buraya başka quiz/soru ile ilgili API servis fonksiyonları da eklenebilir


#root {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
  }
  
  .logo {
    height: 6em;
    padding: 1.5em;
    will-change: filter;
    transition: filter 300ms;
  }
  .logo:hover {
    filter: drop-shadow(0 0 2em #646cffaa);
  }
  .logo.react:hover {
    filter: drop-shadow(0 0 2em #61dafbaa);
  }
  
  @keyframes logo-spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  @media (prefers-reduced-motion: no-preference) {
    a:nth-of-type(2) .logo {
      animation: logo-spin infinite 20s linear;
    }
  }
  
  .card {
    padding: 2em;
  }
  
  .read-the-docs {
    color: #888;
  }

  
  import React from 'react';
// Kullanılmayan ChakraProvider ve BrowserRouter importları kaldırıldı.
import { Routes, Route, Navigate } from 'react-router-dom';

// Sayfaları import et
import TopicBrowserPage from './pages/TopicBrowserPage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import AdminPage from './pages/AdminPage';
import SolvePage from './pages/SolvePage';
import MyStatsPage from './pages/MyStatsPage';
import LectureViewPage from './pages/LectureViewPage';
import WordPracticePage from './pages/WordPracticePage'; // Import et

// Layout component'ini import et
import Layout from './components/Layout';

// AuthProvider burada kullanılmıyor, kaldırıldı. useAuth route koruyucular için gerekli.
import { useAuth } from './context/AuthContext';

// Route Koruma Componentleri App component'inin DIŞINA taşındı
function ProtectedRoute({ children }) {
    const { isAuthenticated, loading } = useAuth();
    // Yüklenme durumu için gösterge
    if (loading) return <div className='loading-indicator'><div className='spinner spinner-lg'></div></div>;
    // Giriş yapılmamışsa Login'e yönlendir
    if (!isAuthenticated) { return <Navigate to="/login" replace />; }
    // Giriş yapılmışsa çocuk component'i render et
    return children;
}

function AdminRoute({ children }) {
    const { isAuthenticated, user, loading } = useAuth();
    // Yüklenme durumu için gösterge
    if (loading) return <div className='loading-indicator'><div className='spinner spinner-lg'></div></div>;
    // Giriş yapılmamışsa veya rol admin değilse ana sayfaya yönlendir
    if (!isAuthenticated || user?.role !== 'admin') { return <Navigate to="/browse" replace />; }
    // Yetkiliyse çocuk component'i render et
    return children;
}

function PublicRoute({ children }) {
    const { isAuthenticated, loading } = useAuth();
     // Yüklenme durumu için gösterge
    if (loading) return <div className='loading-indicator'><div className='spinner spinner-lg'></div></div>;
    // Giriş yapmışsa ana sayfaya yönlendir
    if (isAuthenticated) { return <Navigate to="/browse" replace />; }
    // Giriş yapmamışsa çocuk component'i (Login/Register) render et
    return children;
}

// Ana App Component'i
function App() {
  // Header ile ilgili state ve fonksiyonlar zaten Layout'a taşınmıştı

  return (
      <Routes>
        {/* Ana Layout'u kullanan Route'lar */}
        <Route element={<Layout />}>
            <Route
                path="/browse"
                element={ <ProtectedRoute> <TopicBrowserPage /> </ProtectedRoute> }
            />
            <Route
                path="/admin"
                element={ <AdminRoute> <AdminPage /> </AdminRoute> }
            />
            <Route
                path="/solve"
                element={ <ProtectedRoute> <SolvePage /> </ProtectedRoute> }
            />
            <Route
                path="/solve/:topicId"
                element={ <ProtectedRoute> <SolvePage /> </ProtectedRoute> }
            />
            <Route
                path="/lectures/topic/:topicId"
                element={ <ProtectedRoute> <LectureViewPage /> </ProtectedRoute> }
            />
            <Route
                path="/my-stats"
                element={ <ProtectedRoute> <MyStatsPage /> </ProtectedRoute> }
            />
            {/* Ana sayfa yönlendirmesi */}
            <Route path="/" element={<Navigate to="/browse" replace />} />
            <Route
               path="/wordle-game" // Veya istediğin başka bir yol
               element={ <ProtectedRoute> <WordPracticePage /> </ProtectedRoute> }
             />
        </Route>

        {/* Layout Dışında Kalan Route'lar (Giriş/Kayıt) */}
        <Route
            path="/login"
            element={ <PublicRoute> <LoginPage /> </PublicRoute> }
        />
         <Route
            path="/register"
            element={ <PublicRoute> <RegisterPage /> </PublicRoute> }
        />

        {/* Eşleşmeyen tüm yolları ana sayfaya yönlendir */}
        <Route path="*" element={<Navigate to="/browse" replace />} />
      </Routes>
  );
}

// main.jsx'te sarmalanacak ana export
export default App;



@tailwind base;
@tailwind components;
@tailwind utilities;
:root {
  color-scheme: light dark;
  --hue-primary: 238;
  --hue-secondary: 212;
  --hue-neutral: 225;
  --hue-success: 140;
  --hue-error: 3;
  --hue-warning: 48;
  --hue-info: 200;
  --chroma-accent: 0.18;
  --chroma-accent-strong: 0.25;
  --chroma-neutral: 0.015;
  --chroma-neutral-subtle: 0.005;
  --chroma-semantic: 0.16;
  --lightness-brand-light: 60%;
  --lightness-text-strong-light: 10%;
  --lightness-text-normal-light: 25%;
  --lightness-text-muted-light: 50%;
  --lightness-text-inverted-light: 98%;
  --lightness-surface-1-light: 99%;
  --lightness-surface-2-light: 97%;
  --lightness-surface-3-light: 95%;
  --lightness-surface-4-light: 92%;
  --lightness-border-light: 88%;
  --lightness-border-strong-light: 75%;
  --lightness-disabled-bg-light: 94%;
  --lightness-disabled-text-light: 65%;
  --lightness-semantic-bg-light: 96%;
  --alpha-border-light: 0.7;
  --lightness-brand-dark: 65%;
  --lightness-text-strong-dark: 98%;
  --lightness-text-normal-dark: 88%;
  --lightness-text-muted-dark: 60%;
  --lightness-text-inverted-dark: 10%;
  --lightness-surface-1-dark: 10%;
  --lightness-surface-2-dark: 15%;
  --lightness-surface-3-dark: 20%;
  --lightness-surface-4-dark: 25%;
  --lightness-border-dark: 30%;
  --lightness-border-strong-dark: 45%;
  --lightness-disabled-bg-dark: 25%;
  --lightness-disabled-text-dark: 45%;
  --lightness-semantic-bg-dark: 18%;
  --alpha-border-dark: 0.5;
  --font-family-base: 'Inter', 'Poppins', system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  --font-family-heading: var(--font-family-base);
  --font-family-mono: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-md: 1.125rem;
  --font-size-lg: 1.25rem;
  --font-size-xl: 1.5rem;
  --font-size-2xl: 1.875rem;
  --font-size-3xl: 2.25rem;
  --font-size-4xl: 3rem;
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-base: 1.7;
  --line-height-loose: 1.9;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  --space-unit: 0.25rem;
  --space-1: var(--space-unit);
  --space-2: calc(var(--space-unit) * 2);
  --space-3: calc(var(--space-unit) * 3);
  --space-4: calc(var(--space-unit) * 4);
  --space-5: calc(var(--space-unit) * 5);
  --space-6: calc(var(--space-unit) * 6);
  --space-8: calc(var(--space-unit) * 8);
  --space-10: calc(var(--space-unit) * 10);
  --space-12: calc(var(--space-unit) * 12);
  --space-16: calc(var(--space-unit) * 16);
  --border-radius-sm: 0.25rem;
  --border-radius-md: 0.5rem;
  --border-radius-lg: 1rem;
  --border-radius-xl: 1.5rem;
  --border-radius-pill: 9999px;
  --border-radius-circle: 50%;
  --shadow-color-rgb: 225, 10%, 50%;
  --shadow-strength: 0.05;
  --shadow-sm: 0 1px 2px 0 rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.4)),
               0 1px 1px 0 rgb(var(--shadow-color-rgb) / var(--shadow-strength));
  --shadow-md: 0 4px 6px -1px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.6)),
               0 2px 4px -2px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.2));
  --shadow-lg: 0 10px 15px -3px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.8)),
               0 4px 6px -4px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.4));
  --shadow-xl: 0 20px 25px -5px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 2)),
               0 8px 10px -6px rgb(var(--shadow-color-rgb) / calc(var(--shadow-strength) * 1.6));
  --shadow-inner: inset 0 2px 4px 0 rgb(var(--shadow-color-rgb) / var(--shadow-strength));
  --transition-duration-short: 150ms;
  --transition-duration-base: 250ms;
  --transition-duration-long: 400ms;
  --transition-timing-function-ease: cubic-bezier(0.4, 0, 0.2, 1);
  --transition-timing-function-linear: linear;
  --transition-property-common: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform;
  --transition-base: var(--transition-property-common) var(--transition-duration-base) var(--transition-timing-function-ease);
  --z-index-dropdown: 1000;
  --z-index-sticky: 1020;
  --z-index-modal-backdrop: 1040;
  --z-index-modal: 1050;
  --z-index-popover: 1060;
  --z-index-tooltip: 1070;
  --container-max-width: 1280px;
  --container-padding-x: var(--space-6);
  --scrollbar-width: 8px;
  --bg-primary: oklch(var(--lightness-surface-1-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-secondary: oklch(var(--lightness-surface-2-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-tertiary: oklch(var(--lightness-surface-3-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-quaternary: oklch(var(--lightness-surface-4-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-disabled: oklch(var(--lightness-disabled-bg-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-primary: oklch(var(--lightness-text-strong-light) var(--chroma-neutral) var(--hue-neutral));
  --text-secondary: oklch(var(--lightness-text-normal-light) var(--chroma-neutral) var(--hue-neutral));
  --text-muted: oklch(var(--lightness-text-muted-light) var(--chroma-neutral) var(--hue-neutral));
  --text-inverted: oklch(var(--lightness-text-inverted-light) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-disabled: oklch(var(--lightness-disabled-text-light) var(--chroma-neutral) var(--hue-neutral));
  --text-on-accent: oklch(var(--lightness-text-inverted-light) calc(var(--chroma-accent) * 0.1) var(--hue-primary));
  --text-on-color: var(--text-inverted);
  --accent-primary: oklch(var(--lightness-brand-light) var(--chroma-accent) var(--hue-primary));
  --accent-primary-hover: oklch(calc(var(--lightness-brand-light) - 5%) var(--chroma-accent-strong) var(--hue-primary));
  --accent-primary-active: oklch(calc(var(--lightness-brand-light) - 10%) var(--chroma-accent-strong) var(--hue-primary));
  --accent-secondary: oklch(var(--lightness-brand-light) var(--chroma-accent) var(--hue-secondary));
  --border-primary: oklch(var(--lightness-border-light) var(--chroma-neutral-subtle) var(--hue-neutral) / var(--alpha-border-light));
  --border-secondary: oklch(calc(var(--lightness-border-light) - 8%) var(--chroma-neutral-subtle) var(--hue-neutral) / calc(var(--alpha-border-light) + 0.1));
  --border-strong: oklch(var(--lightness-border-strong-light) var(--chroma-neutral) var(--hue-neutral));
  --border-accent: var(--accent-primary);
  --border-disabled: oklch(var(--lightness-disabled-bg-light) var(--chroma-neutral) var(--hue-neutral) / 0.6);
  --feedback-success: oklch(60% var(--chroma-semantic) var(--hue-success));
  --feedback-success-bg: oklch(var(--lightness-semantic-bg-light) 0.04 var(--hue-success));
  --feedback-error: oklch(60% var(--chroma-semantic) var(--hue-error));
  --feedback-error-bg: oklch(var(--lightness-semantic-bg-light) 0.06 var(--hue-error));
  --feedback-warning: oklch(70% var(--chroma-semantic) var(--hue-warning));
  --feedback-warning-bg: oklch(var(--lightness-semantic-bg-light) 0.07 var(--hue-warning));
  --feedback-info: oklch(65% var(--chroma-semantic) var(--hue-info));
  --feedback-info-bg: oklch(var(--lightness-semantic-bg-light) 0.05 var(--hue-info));
  --shadow-color-rgb: 225, 10%, 50%;
  --shadow-strength: 0.06;
  --scrollbar-thumb-bg: oklch(75% 0.01 var(--hue-neutral));
  --scrollbar-track-bg: oklch(95% 0.005 var(--hue-neutral));
}

body.dark-mode {
  color-scheme: dark;
  --bg-primary: oklch(var(--lightness-surface-1-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-secondary: oklch(var(--lightness-surface-2-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-tertiary: oklch(var(--lightness-surface-3-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-quaternary: oklch(var(--lightness-surface-4-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --bg-disabled: oklch(var(--lightness-disabled-bg-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-primary: oklch(var(--lightness-text-strong-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-secondary: oklch(var(--lightness-text-normal-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-muted: oklch(var(--lightness-text-muted-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-inverted: oklch(var(--lightness-text-inverted-dark) var(--chroma-neutral) var(--hue-neutral));
  --text-disabled: oklch(var(--lightness-disabled-text-dark) var(--chroma-neutral-subtle) var(--hue-neutral));
  --text-on-accent: oklch(var(--lightness-text-inverted-dark) calc(var(--chroma-accent) * 0.15) var(--hue-primary));
  --text-on-color: var(--text-inverted);
  --accent-primary: oklch(var(--lightness-brand-dark) var(--chroma-accent) var(--hue-primary));
  --accent-primary-hover: oklch(calc(var(--lightness-brand-dark) + 5%) var(--chroma-accent-strong) var(--hue-primary));
  --accent-primary-active: oklch(calc(var(--lightness-brand-dark) + 10%) var(--chroma-accent-strong) var(--hue-primary));
  --accent-secondary: oklch(var(--lightness-brand-dark) var(--chroma-accent) var(--hue-secondary));
  --border-primary: oklch(var(--lightness-border-dark) var(--chroma-neutral-subtle) var(--hue-neutral) / var(--alpha-border-dark));
  --border-secondary: oklch(calc(var(--lightness-border-dark) + 8%) var(--chroma-neutral-subtle) var(--hue-neutral) / calc(var(--alpha-border-dark) + 0.1));
  --border-strong: oklch(var(--lightness-border-strong-dark) var(--chroma-neutral) var(--hue-neutral));
  --border-disabled: oklch(var(--lightness-disabled-bg-dark) var(--chroma-neutral) var(--hue-neutral) / 0.6);
  --feedback-success: oklch(70% var(--chroma-semantic) var(--hue-success));
  --feedback-success-bg: oklch(var(--lightness-semantic-bg-dark) 0.05 var(--hue-success));
  --feedback-error: oklch(70% var(--chroma-semantic) var(--hue-error));
  --feedback-error-bg: oklch(var(--lightness-semantic-bg-dark) 0.07 var(--hue-error));
  --feedback-warning: oklch(75% var(--chroma-semantic) var(--hue-warning));
  --feedback-warning-bg: oklch(var(--lightness-semantic-bg-dark) 0.08 var(--hue-warning));
  --feedback-info: oklch(70% var(--chroma-semantic) var(--hue-info));
  --feedback-info-bg: oklch(var(--lightness-semantic-bg-dark) 0.06 var(--hue-info));
  --shadow-color-rgb: 220, 20%, 5%;
  --shadow-strength: 0.25;
  --scrollbar-thumb-bg: oklch(40% 0.01 var(--hue-neutral));
  --scrollbar-track-bg: oklch(15% 0.005 var(--hue-neutral));

  .btn-secondary {
      color: var(--text-primary);
      background-color: var(--bg-secondary);
      border-color: var(--border-secondary);
  }
  .btn-secondary:hover:not(:disabled) {
      background-color: var(--bg-tertiary);
      border-color: var(--border-strong);
      color: var(--text-primary);
  }
   .btn-secondary:active:not(:disabled) {
      background-color: var(--bg-quaternary);
      color: var(--text-primary);
  }
  .btn.opacity-60 {
      opacity: 0.6 !important;
      background-color: var(--bg-secondary);
      border-color: var(--border-secondary);
      color: var(--text-muted);
   }
  .btn-primary {
      background-color: var(--accent-primary);
      color: var(--text-on-accent);
      border-color: var(--accent-primary);
  }
   .btn-primary:hover:not(:disabled) {
      background-color: var(--accent-primary-hover);
      border-color: var(--accent-primary-hover);
  }
  .btn-primary:active:not(:disabled) {
      background-color: var(--accent-primary-active);
      border-color: var(--accent-primary-active);
  }
  .btn-primary:disabled,
  .btn-primary[disabled] {
      background-color: var(--accent-primary) !important;
      opacity: 0.5 !important;
  }
   .question-card {
       background-color: var(--question-bg-color, var(--bg-primary));
       background-color: color-mix(in oklch, var(--question-bg-color) 60%, var(--bg-primary));
   }
   .nav-link { color: var(--text-secondary); }
   .nav-link:hover, .nav-link:focus-visible { color: var(--text-primary); }
   .nav-link.active { color: var(--accent-primary); }
   .btn.selected {
       background-color: var(--feedback-warning-bg);
       border-color: var(--feedback-warning);
       color: color-mix(in srgb, var(--feedback-warning) 90%, black);
   }
   .btn.correct {
       background-color: var(--feedback-success-bg);
       border-color: var(--feedback-success);
       color: color-mix(in srgb, var(--feedback-success) 90%, black);
   }
    .btn.correct::after { color: var(--feedback-success); }
   .btn.incorrect {
       background-color: var(--feedback-error-bg);
       border-color: var(--feedback-error);
       color: color-mix(in srgb, var(--feedback-error) 90%, black);
   }
    .btn.incorrect::after { color: var(--feedback-error); }
}

html {
  line-height: var(--line-height-base);
  -webkit-text-size-adjust: 100%;
  -moz-tab-size: 4;
  tab-size: 4;
  scroll-behavior: smooth;
  height: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-rendering: optimizeLegibility;
}

body {
  min-height: 100%;
  font-family: var(--font-family-base);
  background-color: var(--bg-primary);
  color: var(--text-primary);
  font-feature-settings: 'liga' 1, 'calt' 1;
  transition: background-color var(--transition-duration-base) ease, color var(--transition-duration-base) ease;
}

::selection {
  background-color: var(--accent-primary);
  color: var(--text-on-accent);
}

::-webkit-scrollbar {
  width: var(--scrollbar-width);
  height: var(--scrollbar-width);
}
::-webkit-scrollbar-track {
  background-color: var(--scrollbar-track-bg);
  border-radius: var(--scrollbar-width);
}
::-webkit-scrollbar-thumb {
  background-color: var(--scrollbar-thumb-bg);
  border-radius: var(--scrollbar-width);
  border: 2px solid var(--scrollbar-track-bg);
}
::-webkit-scrollbar-thumb:hover {
  background-color: color-mix(in srgb, var(--scrollbar-thumb-bg) 80%, var(--text-muted));
}
* {
    scrollbar-width: thin;
    scrollbar-color: var(--scrollbar-thumb-bg) var(--scrollbar-track-bg);
}
h1 {
  font-size: var(--font-size-3xl);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  color: var(--text-primary);
  letter-spacing: -0.025em;
  margin-bottom: var(--space-6);
}
h2 {
  font-size: var(--font-size-2xl);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-tight);
  color: var(--text-primary);
  letter-spacing: -0.02em;
  margin-bottom: var(--space-5);
}
h3 {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-tight);
  color: var(--text-primary);
  margin-bottom: var(--space-4);
}
h4 {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-tight);
  color: var(--text-secondary);
  margin-bottom: var(--space-3);
}
h5 {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  line-height: var(--line-height-normal);
  color: var(--text-secondary);
  margin-bottom: var(--space-2);
}
h6 {
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-normal);
  color: var(--text-muted);
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: var(--space-2);
}

p {
  color: var(--text-primary);
  line-height: var(--line-height-base);
  max-width: 70ch;
  margin-bottom: var(--space-4);
}
p.secondary {
    color: var(--text-secondary);
}
p.muted {
    color: var(--text-muted);
}

a {
  color: var(--accent-primary);
  text-decoration: underline;
  text-decoration-color: color-mix(in srgb, var(--accent-primary) 30%, transparent);
  text-underline-offset: 0.2em;
  text-decoration-thickness: 1px;
  transition: color var(--transition-duration-short) ease, text-decoration-color var(--transition-duration-short) ease, text-decoration-thickness var(--transition-duration-short) ease;
}
a:hover,
a:focus-visible {
  color: var(--accent-primary-hover);
  text-decoration-color: var(--accent-primary-hover);
  text-decoration-thickness: 2px;
  outline: none;
}

ul, ol {
  list-style: revert;
  padding-left: var(--space-6);
  margin-bottom: var(--space-4);
}
li {
  margin-bottom: var(--space-2);
  padding-left: var(--space-1);
}

code {
  font-family: var(--font-family-mono);
  background-color: var(--bg-tertiary);
  color: var(--text-secondary);
  padding: 0.15em 0.4em;
  border-radius: var(--border-radius-sm);
  font-size: 0.9em;
  white-space: nowrap;
  border: none;
}
pre {
  font-family: var(--font-family-mono);
  background-color: var(--bg-secondary);
  color: var(--text-secondary);
  padding: var(--space-4);
  border-radius: var(--border-radius-md);
  overflow-x: auto;
  font-size: var(--font-size-sm);
  line-height: var(--line-height-normal);
  border: var(--border-width-thin) solid var(--border-secondary);
  margin: var(--space-5) 0;
  white-space: pre;
}
pre code {
  padding: 0;
  background-color: transparent;
  border-radius: 0;
  white-space: inherit;
  font-size: inherit;
  border: none;
  color: inherit;
}

blockquote {
  margin: var(--space-6) 0;
  padding: var(--space-4) var(--space-5);
  border-left: 4px solid var(--accent-primary);
  background-color: var(--bg-secondary);
  color: var(--text-secondary);
  font-style: italic;
  border-radius: 0 var(--border-radius-md) var(--border-radius-md) 0;
}
blockquote p {
  margin-bottom: var(--space-2);
  max-width: none;
}
blockquote p:last-child {
  margin-bottom: 0;
}
blockquote cite {
  display: block;
  margin-top: var(--space-3);
  font-style: normal;
  font-size: var(--font-size-sm);
  color: var(--text-muted);
}

hr {
  border: 0;
  border-top: var(--border-width-thin) solid var(--border-secondary);
  margin: var(--space-8) 0;
}

*:focus-visible {
  outline: none !important;
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent-primary) 40%, transparent) !important;
}
.no-focus-ring:focus-visible {
    box-shadow: none !important;
}

.container {
  width: 100%;
  max-width: var(--container-max-width);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--container-padding-x);
  padding-right: var(--container-padding-x);
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.error-text {
  color: var(--feedback-error);
  font-size: var(--font-size-sm);
}
.success-text {
    color: var(--feedback-success);
    font-size: var(--font-size-sm);
}
.form-input,
.form-textarea,
.form-select {
  display: block;
  width: 100%;
  padding: var(--space-3) var(--space-4);
  font-size: var(--font-size-base);
  font-family: var(--font-family-base);
  line-height: var(--line-height-normal);
  color: var(--text-primary);
  background-color: var(--bg-secondary);
  background-clip: padding-box;
  border: var(--border-width-thin) solid var(--border-primary);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-inner);
  transition: border-color var(--transition-duration-short) ease-in-out,
              box-shadow var(--transition-duration-short) ease-in-out;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}
.form-input:focus,
.form-textarea:focus,
.form-select:focus {
  border-color: var(--accent-primary);
  outline: 0;
}
.form-input:focus-visible,
.form-textarea:focus-visible,
.form-select:focus-visible {
  border-color: var(--accent-primary);
  box-shadow: var(--shadow-inner), 0 0 0 3px color-mix(in srgb, var(--accent-primary) 20%, transparent);
}
.form-input::placeholder,
.form-textarea::placeholder {
  color: var(--text-muted);
  opacity: 0.8;
}

.form-select {
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='oklch(from var(--text-muted) l c h)' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right var(--space-4) center;
  background-size: 16px 12px;
  padding-right: calc(var(--space-4) * 3);
}
.form-select::-ms-expand {
  display: none;
}
.form-select[multiple] {
    background-image: none;
    height: auto;
    padding-right: var(--space-4);
}

.form-textarea {
  resize: vertical;
  min-height: 120px;
}

.form-checkbox,
.form-radio {
  accent-color: var(--accent-primary);
  height: 1.1em;
  width: 1.1em;
  vertical-align: middle;
  margin-right: var(--space-2);
  appearance: auto;
  -webkit-appearance: auto;
  -moz-appearance: auto;
  cursor: pointer;
}

.form-label {
  display: inline-block;
  margin-bottom: var(--space-2);
  font-weight: var(--font-weight-medium);
  color: var(--text-secondary);
  cursor: pointer;
}
.form-label.block {
    display: block;
}

.form-group {
  margin-bottom: var(--space-5);
}

.form-text {
  display: block;
  margin-top: var(--space-2);
  font-size: var(--font-size-sm);
  color: var(--text-muted);
}

.form-check {
  display: flex;
  align-items: center;
  margin-bottom: var(--space-3);
  position: relative;
}
.form-check .form-label {
  margin-bottom: 0;
  font-weight: var(--font-weight-normal);
  color: var(--text-primary);
  flex-grow: 1;
}
.form-check input {
  order: -1;
  margin-right: var(--space-3);
  margin-left: 0;
}

.form-input:invalid,
.form-textarea:invalid,
.form-select:invalid,
.is-invalid {
  border-color: var(--feedback-error);
}
.form-input:invalid:focus-visible,
.form-textarea:invalid:focus-visible,
.form-select:invalid:focus-visible,
.is-invalid:focus-visible {
    border-color: var(--feedback-error);
    box-shadow: var(--shadow-inner), 0 0 0 3px color-mix(in srgb, var(--feedback-error) 30%, transparent);
}
.invalid-feedback {
  display: block;
  width: 100%;
  margin-top: var(--space-2);
  font-size: var(--font-size-sm);
  color: var(--feedback-error);
}

.form-input:valid,
.form-textarea:valid,
.form-select:valid,
.is-valid {

}
.valid-feedback {
  display: block;
  width: 100%;
  margin-top: var(--space-2);
  font-size: var(--font-size-sm);
  color: var(--feedback-success);
}

.form-input:disabled,
.form-textarea:disabled,
.form-select:disabled,
.form-input[readonly],
.form-textarea[readonly] {
  background-color: var(--bg-disabled);
  border-color: var(--border-disabled);
  color: var(--text-disabled);
  cursor: not-allowed;
  box-shadow: none;
  opacity: 0.7;
}
label.form-label:has(+ .form-input:disabled),
label.form-label:has(+ .form-textarea:disabled),
label.form-label:has(+ .form-select:disabled) {
    color: var(--text-disabled);
    cursor: not-allowed;
}
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  padding: var(--space-3) var(--space-5);
  border: var(--border-width-thin) solid transparent;
  border-radius: var(--border-radius-md);
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-normal);
  color: var(--text-on-accent);
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  cursor: pointer;
  user-select: none;
  transition: var(--transition-base);
  transition-property: color, background-color, border-color, box-shadow, transform;
  background-color: var(--accent-primary);
  box-shadow: var(--shadow-sm);
}
.btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}
.btn:focus-visible {
  outline: var(--border-width-medium) solid var(--accent-primary);
  outline-offset: 3px;
  box-shadow: var(--shadow-md), 0 0 0 4px color-mix(in srgb, var(--accent-primary) 20%, transparent);
}
.btn:active {
  transform: translateY(0px);
  box-shadow: var(--shadow-inner);
  filter: brightness(0.95);
}
.btn:disabled,
.btn[disabled] {
  background-color: var(--bg-disabled);
  border-color: var(--border-disabled);
  color: var(--text-disabled);
  cursor: not-allowed;
  box-shadow: none;
  transform: none;
  opacity: 0.6;
  filter: none;
}

.btn-primary {
  background-color: var(--accent-primary);
  color: var(--text-on-accent);
  border-color: var(--accent-primary);
}
.btn-primary:hover:not(:disabled) {
  background-color: var(--accent-primary-hover);
  border-color: var(--accent-primary-hover);
}
.btn-primary:active:not(:disabled) {
  background-color: var(--accent-primary-active);
  border-color: var(--accent-primary-active);
}
.btn-primary:disabled,
.btn-primary[disabled] {
   background-color: var(--accent-primary);
   border-color: var(--accent-primary);
   color: var(--text-on-accent);
   opacity: 0.5;
}

.btn-secondary {
  background-color: var(--bg-secondary);
  color: var(--text-primary);
  border-color: var(--border-secondary);
  box-shadow: none;
}
.btn-secondary:hover:not(:disabled) {
  background-color: var(--bg-tertiary);
  border-color: var(--border-strong);
  box-shadow: var(--shadow-sm);
  transform: translateY(-1px);
}
.btn-secondary:active:not(:disabled) {
  background-color: var(--bg-quaternary);
  border-color: var(--border-strong);
  box-shadow: var(--shadow-inner);
  transform: translateY(0);
}
.btn-secondary:disabled,
.btn-secondary[disabled] {
   background-color: var(--bg-disabled);
   border-color: var(--border-disabled);
   color: var(--text-disabled);
   opacity: 0.7;
   box-shadow: none;
   transform: none;
}

.btn-danger {
  background-color: var(--feedback-error);
  color: var(--text-on-color);
  border-color: var(--feedback-error);
}
.btn-danger:hover:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-error) 85%, black);
  border-color: color-mix(in srgb, var(--feedback-error) 85%, black);
}
.btn-danger:active:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-error) 75%, black);
  border-color: color-mix(in srgb, var(--feedback-error) 75%, black);
}
.btn-danger:disabled,
.btn-danger[disabled] {
   background-color: var(--feedback-error);
   border-color: var(--feedback-error);
   color: var(--text-on-color);
   opacity: 0.5;
}

.btn-success {
  background-color: var(--feedback-success);
  color: var(--text-on-color);
  border-color: var(--feedback-success);
}
.btn-success:hover:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-success) 85%, black);
  border-color: color-mix(in srgb, var(--feedback-success) 85%, black);
}
.btn-success:active:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-success) 75%, black);
  border-color: color-mix(in srgb, var(--feedback-success) 75%, black);
}

.btn-warning {
  background-color: var(--feedback-warning);
  color: var(--text-on-color);
  border-color: var(--feedback-warning);
}
.btn-warning:hover:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-warning) 85%, black);
  border-color: color-mix(in srgb, var(--feedback-warning) 85%, black);
}
.btn-warning:active:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-warning) 75%, black);
  border-color: color-mix(in srgb, var(--feedback-warning) 75%, black);
}

.btn-info {
  background-color: var(--feedback-info);
  color: var(--text-on-color);
  border-color: var(--feedback-info);
}
.btn-info:hover:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-info) 85%, black);
  border-color: color-mix(in srgb, var(--feedback-info) 85%, black);
}
.btn-info:active:not(:disabled) {
  background-color: color-mix(in srgb, var(--feedback-info) 75%, black);
  border-color: color-mix(in srgb, var(--feedback-info) 75%, black);
}

.btn-ghost {
  background-color: transparent;
  color: var(--accent-primary);
  border-color: transparent;
  box-shadow: none;
}
.btn-ghost:hover:not(:disabled) {
  background-color: color-mix(in srgb, var(--accent-primary) 10%, transparent);
  color: var(--accent-primary-hover);
  box-shadow: none;
  transform: none;
}
.btn-ghost:active:not(:disabled) {
  background-color: color-mix(in srgb, var(--accent-primary) 20%, transparent);
  filter: none;
}
.btn-ghost.btn-danger { color: var(--feedback-error); }
.btn-ghost.btn-danger:hover:not(:disabled) { background-color: color-mix(in srgb, var(--feedback-error) 10%, transparent); color: color-mix(in srgb, var(--feedback-error) 85%, black); }

.btn-link {
    background-color: transparent;
    border-color: transparent;
    color: var(--accent-primary);
    text-decoration: underline;
    text-underline-offset: 0.15em;
    box-shadow: none;
    font-weight: var(--font-weight-normal);
    padding: 0;
    height: auto;
    min-height: auto;
}
.btn-link:hover:not(:disabled) {
    color: var(--accent-primary-hover);
    text-decoration-thickness: 2px;
    transform: none;
    box-shadow: none;
    background: none;
}
.btn-link:active:not(:disabled) {
    filter: none;
}

.btn-sm {
  padding: var(--space-2) var(--space-3);
  font-size: var(--font-size-sm);
  border-radius: var(--border-radius-sm);
}
.btn-lg {
  padding: var(--space-4) var(--space-6);
  font-size: var(--font-size-md);
  border-radius: var(--border-radius-lg);
}

.btn .btn-icon {
  display: inline-block;
  width: 1.2em;
  height: 1.2em;
  line-height: 1;
  vertical-align: middle;
}
.btn .btn-icon:not(:last-child) {
  margin-right: var(--space-2);
}
.btn .btn-icon:not(:first-child) {
  margin-left: var(--space-2);
}

.btn-icon-only {
    padding: var(--space-2);
    line-height: 1;
}
.btn-icon-only .btn-icon {
    margin: 0;
}
.btn-sm.btn-icon-only { padding: var(--space-1); }
.btn-lg.btn-icon-only { padding: var(--space-3); }

.btn-block {
  display: flex;
  width: 100%;
}

@keyframes shake {
  10%, 90% { transform: translate3d(-1px, 0, 0); }
  20%, 80% { transform: translate3d(2px, 0, 0); }
  30%, 50%, 70% { transform: translate3d(-3px, 0, 0); }
  40%, 60% { transform: translate3d(3px, 0, 0); }
}

.btn.selected {
    background-color: var(--feedback-warning-bg);
    border: 1px solid var(--feedback-warning);
    color: color-mix(in srgb, var(--feedback-warning) 80%, black);
    box-shadow: var(--shadow-md), 0 0 0 2px var(--feedback-warning);
    transform: translateY(-2px);
}
.btn.selected:hover:not(:disabled) {
    background-color: color-mix(in srgb, var(--feedback-warning-bg) 90%, white);
    border-color: color-mix(in srgb, var(--feedback-warning) 80%, black);
}

.btn.correct {
    background-color: var(--feedback-success-bg);
    border: 1px solid var(--feedback-success);
    color: color-mix(in srgb, var(--feedback-success) 70%, black);
    box-shadow: var(--shadow-sm), 0 0 0 2px var(--feedback-success);
    transform: none;
    cursor: default;
}
.btn.correct::after {
    content: '✔';
    margin-left: var(--space-2);
    font-weight: bold;
    color: var(--feedback-success);
}

.btn.incorrect {
    background-color: var(--feedback-error-bg);
    border: 1px solid var(--feedback-error);
    color: color-mix(in srgb, var(--feedback-error) 70%, black);
    box-shadow: var(--shadow-sm), 0 0 0 2px var(--feedback-error);
    transform: none;
    cursor: default;
    animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
}
.btn.incorrect::after {
    content: '✖';
    margin-left: var(--space-2);
    font-weight: bold;
    color: var(--feedback-error);
}

.btn:disabled:not(.correct):not(.incorrect) {

}
.card {
  background-color: var(--bg-secondary);
  border: var(--border-width-thin) solid var(--border-primary);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-md);
  padding: var(--space-6);
  color: var(--text-primary);
  transition: var(--transition-base);
  transition-property: border-color, box-shadow, transform;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}
.card-interactive:hover,
a.card:hover,
button.card:hover {
  border-color: var(--border-strong);
  box-shadow: var(--shadow-lg);
  transform: translateY(-4px);
}

.card-header {
  padding: var(--space-4) var(--space-6);
  margin: calc(var(--space-6) * -1) calc(var(--space-6) * -1) var(--space-5);
  border-bottom: var(--border-width-thin) solid var(--border-primary);
  background-color: var(--bg-tertiary);
}
.card-header > *:last-child {
  margin-bottom: 0;
}

.card-body {
  flex-grow: 1;
}

.card-footer {
  padding: var(--space-4) var(--space-6);
  margin: var(--space-5) calc(var(--space-6) * -1) calc(var(--space-6) * -1);
  border-top: var(--border-width-thin) solid var(--border-primary);
  background-color: var(--bg-tertiary);
  color: var(--text-muted);
  font-size: var(--font-size-sm);
}
.card-footer > *:last-child {
  margin-bottom: 0;
}

.card-accented {
  border-left-width: 4px;
  border-left-color: var(--accent-primary);
}
.card-accented-success { border-left-color: var(--feedback-success); }
.card-accented-error { border-left-color: var(--feedback-error); }
.card-accented-warning { border-left-color: var(--feedback-warning); }
.card-accented-info { border-left-color: var(--feedback-info); }

.card-dense {
  padding: var(--space-4);
  border-radius: var(--border-radius-md);
}
.card-dense > .card-header {
  padding: var(--space-3) var(--space-4);
  margin: calc(var(--space-4) * -1) calc(var(--space-4) * -1) var(--space-3);
}
.card-dense > .card-footer {
  padding: var(--space-3) var(--space-4);
  margin: var(--space-3) calc(var(--space-4) * -1) calc(var(--space-4) * -1);
}

.question-card {
  background-color: var(--bg-primary);
  border-color: var(--border-secondary);
  box-shadow: var(--shadow-sm);
}
.question-card .question-topic {
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
    color: var(--text-muted);
    margin-bottom: var(--space-2);
}
.question-card .question-stats {
    font-size: var(--font-size-xs);
    color: var(--text-muted);
    margin-bottom: var(--space-4);
    display: flex;
    gap: var(--space-4);
    flex-wrap: wrap; /* Added for responsiveness */
}
.question-card .question-image {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius-md);
    margin-bottom: var(--space-4);
    border: 1px solid var(--border-secondary);
}
.question-card .question-text {
    line-height: var(--line-height-base);
    font-size: var(--font-size-md);
}
.question-card .question-text p:last-child { margin-bottom: 0; }

.card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
  gap: var(--space-6);
}
.answer-options-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-3);
}
@media (min-width: 768px) {
    .answer-options-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--space-4);
    }
}
.hierarchy-nav-card {
  display: flex;
  align-items: center;
  gap: var(--space-4);
  padding: var(--space-4);
  border: var(--border-width-thin) solid var(--border-secondary);
  border-radius: var(--border-radius-md);
  background-color: var(--bg-secondary);
  cursor: pointer;
  transition: var(--transition-base);
  transition-property: background-color, border-color, box-shadow, transform;
  text-align: left;
  width: 100%;
  position: relative;
  overflow: hidden;
}

.hierarchy-nav-card.card-interactive:hover {
  background-color: var(--bg-tertiary);
  border-color: var(--accent-primary);
  box-shadow: var(--shadow-md);
  transform: translateY(-3px);
}

.hierarchy-nav-card.card-interactive:focus-visible {
  border-color: var(--accent-primary);
  box-shadow: var(--shadow-sm), 0 0 0 3px color-mix(in srgb, var(--accent-primary) 30%, transparent);
  outline: none;
}

.hierarchy-nav-card.card-interactive:active {
  transform: translateY(-1px) scale(0.99);
  box-shadow: var(--shadow-inner);
  background-color: var(--bg-quaternary);
}

.hierarchy-nav-card .card-icon {
  flex-shrink: 0;
  width: 44px;
  height: 44px;
  display: flex;
  justify-content: center;
  align-items: center;
  background: linear-gradient(135deg, color-mix(in srgb, var(--accent-primary) 8%, transparent), color-mix(in srgb, var(--accent-primary) 18%, transparent));
  border-radius: var(--border-radius-circle);
  transition: transform var(--transition-duration-base) ease;
}
.hierarchy-nav-card:hover .card-icon {
  transform: scale(1.1);
}
.hierarchy-nav-card .card-icon svg {
  font-size: 1.6rem;
  color: var(--accent-primary);
  transition: color var(--transition-duration-short) ease;
}
.hierarchy-nav-card:hover .card-icon svg {
  color: var(--accent-primary-hover);
}

.hierarchy-nav-card .card-title {
  flex-grow: 1;
  margin: 0;
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-medium);
  color: var(--text-primary);
  line-height: 1.4;
}

.hierarchy-nav-card .hierarchy-chevron {
  margin-left: auto;
  padding-left: var(--space-3);
  color: var(--text-muted);
  font-size: 0.9em;
  transition: transform var(--transition-duration-short) ease, color var(--transition-duration-short) ease;
  opacity: 0.8;
}
.hierarchy-nav-card:hover .hierarchy-chevron {
  transform: translateX(4px);
  color: var(--accent-primary);
  opacity: 1;
}
.topic-tree-nav {
  border: var(--border-width-thin) solid var(--border-primary);
  background-color: var(--bg-secondary);
  border-radius: var(--border-radius-md);
  padding: var(--space-4);
}
.topic-tree-header {
    font-size: var(--font-size-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--text-primary);
    margin-bottom: var(--space-4);
    padding-bottom: var(--space-3);
    border-bottom: 1px solid var(--border-secondary);
}
.topic-node {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  padding: var(--space-2) var(--space-3);
  margin-left: calc(var(--level, 0) * var(--space-5));
  border-radius: var(--border-radius-sm);
  cursor: pointer;
  user-select: none;
  transition: background-color var(--transition-duration-short) ease, color var(--transition-duration-short) ease;
  color: var(--text-secondary);
  position: relative;
}
.topic-node::before {
    content: '';
    position: absolute;
    left: calc(var(--space-5) * -0.5 + var(--space-2)); /* Adjusted left position */
    top: calc(var(--space-2) * -1); /* Start from top padding edge of parent */
    bottom: 50%;
    width: 1px;
    background-color: var(--border-secondary);
    opacity: 0.5;
    display: block;
}
/* Connect to sibling */
.topic-node::after {
    content: '';
    position: absolute;
    left: calc(var(--space-5) * -0.5 + var(--space-2)); /* Match ::before */
    top: 0;
    height: 1.1em; /* Align with text center */
    width: calc(var(--space-5) * 0.5 - var(--space-1)); /* Connect horizontal line */
    border-bottom: 1px solid var(--border-secondary);
    opacity: 0.5;
     display: block;
}
/* Hide lines for level 0 */
.topic-node[style*="--level: 0"]::before,
.topic-node[style*="--level: 0"]::after {
    display: none;
}
/* Hide bottom connector for last child */
li:last-child > .topic-node::before {
     height: 1.1em; /* Stop at the middle */
     bottom: auto;
}


.topic-node:hover {
  background-color: var(--bg-tertiary);
  color: var(--text-primary);
}
.topic-node.is-selected {
  background-color: color-mix(in srgb, var(--accent-primary) 15%, transparent);
  color: var(--accent-primary);
  font-weight: var(--font-weight-semibold);
}
.topic-node-icon {
  width: 1em;
  height: 1em;
  flex-shrink: 0;
  color: var(--text-muted);
  margin-left: var(--space-1); /* Add some space after lines */
}
.topic-node.is-selected .topic-node-icon {
    color: var(--accent-primary);
}
.topic-node-children {
    /* No extra style needed now */
}

.table-container {
  width: 100%;
  overflow-x: auto;
  margin-bottom: var(--space-6);
  border: var(--border-width-thin) solid var(--border-secondary);
  border-radius: var(--border-radius-md);
  background-color: var(--bg-primary);
}
.table {
  width: 100%;
  min-width: 600px;
  border-collapse: collapse;
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
  border-style: hidden;
}
.table th, .table td {
  padding: var(--space-3) var(--space-4);
  text-align: left;
  vertical-align: middle;
  border-bottom: var(--border-width-thin) solid var(--border-secondary);
  color: var(--text-primary);
}
.table th {
  font-weight: var(--font-weight-semibold);
  color: var(--text-secondary);
  background-color: var(--bg-secondary);
  white-space: nowrap;
  border-bottom-width: var(--border-width-medium);
  border-bottom-color: var(--border-primary);
}
.table th:first-child {
    border-top-left-radius: var(--border-radius-md);
}
.table th:last-child {
    border-top-right-radius: var(--border-radius-md);
}
.table tr:last-child td {
  border-bottom: 0;
}
.table tbody tr {
  transition: background-color var(--transition-duration-short) ease;
}
.table-hover tbody tr:hover {
  background-color: var(--bg-tertiary);
}
.table-striped tbody tr:nth-child(odd) {
  background-color: var(--bg-secondary);
}
.table-striped.table-hover tbody tr:nth-child(odd):hover {
  background-color: var(--bg-tertiary);
}
.table tbody tr.is-highlighted,
.table tbody tr.is-weak {
    background-color: var(--feedback-warning-bg);
    font-weight: var(--font-weight-medium);
    color: color-mix(in srgb, var(--feedback-warning) 80%, black);
}
.table tbody tr.is-highlighted td, .table tbody tr.is-weak td {
    color: color-mix(in srgb, var(--feedback-warning) 80%, black) !important;
}
.table tbody tr.is-highlighted:hover,
.table tbody tr.is-weak:hover {
    background-color: color-mix(in srgb, var(--feedback-warning-bg) 80%, var(--bg-tertiary));
}
.table-dense th,
.table-dense td {
  padding: var(--space-2) var(--space-3);
  font-size: var(--font-size-sm);
}
.table-bordered th,
.table-bordered td {
  border: var(--border-width-thin) solid var(--border-secondary);
}
.table-bordered {
    border-style: solid;
}
.table .action-buttons {
  text-align: right;
  white-space: nowrap;
}
.table .action-buttons .btn {
  margin-left: var(--space-2);
  padding: var(--space-1) var(--space-2);
  font-size: var(--font-size-xs);
  line-height: 1.2;
  vertical-align: middle;
}
.table .action-buttons .btn:first-child {
    margin-left: 0;
}
.alert {
  position: relative;
  display: flex;
  align-items: flex-start;
  gap: var(--space-4);
  padding: var(--space-4);
  margin-bottom: var(--space-5);
  border: var(--border-width-thin) solid transparent;
  border-left-width: 4px;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-base);
}
.alert-icon {
  flex-shrink: 0;
  font-size: 1.5em;
  line-height: 1.2;
  margin-top: 0.1em;
}
.alert-content {
  flex-grow: 1;
}
.alert-title {
  margin: 0 0 var(--space-2) 0;
  font-weight: var(--font-weight-semibold);
  font-size: var(--font-size-md);
}
.alert-content > *:last-child {
  margin-bottom: 0;
}
.alert-close-btn {
  position: absolute;
  top: var(--space-2);
  right: var(--space-3);
  background: none;
  border: none;
  padding: var(--space-1);
  cursor: pointer;
  color: inherit;
  opacity: 0.7;
  transition: opacity var(--transition-duration-short) ease;
}
.alert-close-btn:hover {
  opacity: 1;
}
.alert-close-btn .icon {
    font-size: 1.2em;
    line-height: 1;
    display: block;
}
.alert-success {
  background-color: var(--feedback-success-bg);
  border-color: var(--feedback-success);
  color: color-mix(in srgb, var(--feedback-success) 80%, black);
}
.alert-success .alert-icon,
.alert-success .alert-title {
  color: var(--feedback-success);
}
.alert-error {
  background-color: var(--feedback-error-bg);
  border-color: var(--feedback-error);
  color: color-mix(in srgb, var(--feedback-error) 80%, black);
}
.alert-error .alert-icon,
.alert-error .alert-title {
  color: var(--feedback-error);
}
.alert-warning {
  background-color: var(--feedback-warning-bg);
  border-color: var(--feedback-warning);
  color: color-mix(in srgb, var(--feedback-warning) 80%, black);
}
.alert-warning .alert-icon,
.alert-warning .alert-title {
  color: color-mix(in srgb, var(--feedback-warning) 90%, black);
}
.alert-info {
  background-color: var(--feedback-info-bg);
  border-color: var(--feedback-info);
  color: color-mix(in srgb, var(--feedback-info) 80%, black);
}
.alert-info .alert-icon,
.alert-info .alert-title {
  color: var(--feedback-info);
}

.badge {
  display: inline-block;
  padding: var(--space-1) var(--space-2);
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-medium);
  line-height: 1;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: var(--border-radius-pill);
  background-color: var(--bg-tertiary);
  color: var(--text-secondary);
}
.badge-primary { background-color: var(--accent-primary); color: var(--text-on-accent); }
.badge-secondary { background-color: var(--bg-quaternary); color: var(--text-muted); }
.badge-success { background-color: var(--feedback-success); color: var(--text-on-color); }
.badge-danger { background-color: var(--feedback-error); color: var(--text-on-color); }
.badge-warning { background-color: var(--feedback-warning); color: var(--text-on-color); }
.badge-info { background-color: var(--feedback-info); color: var(--text-on-color); }
.badge-light {
    background-color: transparent;
    border: 1px solid currentColor;
    padding: calc(var(--space-1) - 1px) calc(var(--space-2) - 1px);
}
.badge-light.badge-primary { color: var(--accent-primary); }
.badge-light.badge-success { color: var(--feedback-success); }

.breadcrumb {
  display: flex;
  flex-wrap: wrap;
  padding: var(--space-3) 0;
  margin-bottom: var(--space-5);
  list-style: none;
  background-color: transparent;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
}
.breadcrumb-item {
  display: flex;
  align-items: center;
}
.breadcrumb-item + .breadcrumb-item::before {
  content: "/";
  display: inline-block;
  padding: 0 var(--space-2);
  color: var(--text-muted);
  opacity: 0.7;
}
.breadcrumb-item a {
  color: var(--text-secondary);
  text-decoration: none;
  transition: color var(--transition-duration-short) ease;
}
.breadcrumb-item a:hover {
  color: var(--accent-primary);
  text-decoration: underline;
}
.breadcrumb-item.active {
  color: var(--text-muted);
  font-weight: var(--font-weight-medium);
  cursor: default;
}

.pagination {
  display: flex;
  justify-content: center;
  padding-left: 0;
  list-style: none;
  margin: var(--space-6) 0;
}
.page-item {
  margin: 0 var(--space-1);
}
.page-link {
  position: relative;
  display: block;
  padding: var(--space-2) var(--space-3);
  font-size: var(--font-size-base);
  line-height: var(--line-height-tight);
  color: var(--accent-primary);
  background-color: var(--bg-secondary);
  border: var(--border-width-thin) solid var(--border-primary);
  border-radius: var(--border-radius-sm);
  transition: color var(--transition-duration-short) ease-in-out,
              background-color var(--transition-duration-short) ease-in-out,
              border-color var(--transition-duration-short) ease-in-out;
  cursor: pointer;
  user-select: none;
}
.page-link:hover {
  z-index: 2;
  color: var(--accent-primary-hover);
  background-color: var(--bg-tertiary);
  border-color: var(--border-secondary);
}
.page-item.active .page-link {
  z-index: 3;
  color: var(--text-on-accent);
  background-color: var(--accent-primary);
  border-color: var(--accent-primary);
  cursor: default;
}
.page-item.disabled .page-link {
  color: var(--text-disabled);
  pointer-events: none;
  background-color: var(--bg-disabled);
  border-color: var(--border-disabled);
  cursor: not-allowed;
}

.sidebar {
  width: 250px;
  flex-shrink: 0;
  background-color: var(--bg-secondary);
  border-right: var(--border-width-thin) solid var(--border-primary);
  padding: var(--space-6) var(--space-4);
  height: 100vh;
  position: sticky;
  top: 0;
  overflow-y: auto;
  transition: width var(--transition-duration-base) ease;
}
.sidebar-nav { list-style: none; }
.sidebar-nav-item { margin-bottom: var(--space-1); }
.sidebar-nav-link {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-3) var(--space-4);
    border-radius: var(--border-radius-md);
    color: var(--text-secondary);
    text-decoration: none;
    font-weight: var(--font-weight-medium);
    transition: background-color var(--transition-duration-short) ease, color var(--transition-duration-short) ease;
}
.sidebar-nav-link:hover {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
}
.sidebar-nav-link.active {
    background-color: var(--accent-primary);
    color: var(--text-on-accent);
    font-weight: var(--font-weight-semibold);
}
.sidebar-nav-link .nav-icon {
    width: 1.2em;
    height: 1.2em;
    flex-shrink: 0;
    opacity: 0.8;
}
.sidebar-nav-link.active .nav-icon {
    opacity: 1;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
.spinner {
  display: inline-block;
  width: 1.5em;
  height: 1.5em;
  vertical-align: -0.3em;
  border: 3px solid currentColor;
  border-right-color: transparent;
  border-radius: var(--border-radius-circle);
  animation: spin 0.75s var(--transition-timing-function-linear) infinite;
  opacity: 0.7;
}
.spinner-sm { width: 1em; height: 1em; border-width: 2px; }
.spinner-lg { width: 2.5em; height: 2.5em; border-width: 4px; }
.loading-indicator {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-8);
    text-align: center;
    color: var(--text-muted);
}
.loading-indicator .spinner {
    display: block;
    width: 2.5em;
    height: 2.5em;
    border-width: 4px;
    margin-bottom: var(--space-4);
    color: var(--accent-primary);
    opacity: 1;
}

@keyframes skeleton-shine {
    100% { transform: translateX(100%); }
}
.skeleton {
  background-color: var(--bg-tertiary);
  border-radius: var(--border-radius-sm);
  position: relative;
  overflow: hidden;
  display: block;
  opacity: 0.7;
}
.skeleton::before,
.skeleton::after { display: none; }
.skeleton-animated::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transform: translateX(-100%);
    background-image: linear-gradient(
        90deg,
        rgba(255,255,255,0) 0,
        rgba(255,255,255,0.1) 50%,
        rgba(255,255,255,0) 100%
    );
    animation: skeleton-shine 1.5s infinite;
}
body.dark-mode .skeleton-animated::after {
     background-image: linear-gradient(
        90deg,
        rgba(0,0,0,0) 0,
        rgba(255,255,255,0.05) 50%,
        rgba(0,0,0,0) 100%
    );
}
.skeleton-text { height: 1em; margin-bottom: var(--space-2); width: 100%; }
.skeleton-text:last-child { margin-bottom: 0; }
.skeleton-text-short { width: 60%; }
.skeleton-title { height: 1.5em; width: 40%; margin-bottom: var(--space-4); }
.skeleton-avatar, .skeleton-circle { height: 40px; width: 40px; border-radius: var(--border-radius-circle); }
.skeleton-thumbnail { height: 50px; width: 80px; }
.skeleton-button { height: 38px; width: 100px; border-radius: var(--border-radius-md); }


.app-layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main-header {
  background-color: var(--bg-secondary);
  border-bottom: 1px solid var(--border-primary);
  box-shadow: var(--shadow-sm);
  padding: var(--space-3) 0;
  position: sticky;
  top: 0;
  z-index: var(--z-index-sticky);
}

.header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--space-6);
}

.nav-links {
  display: flex;
  align-items: center;
  gap: var(--space-5);
}

.nav-link {
  font-size: var(--font-size-base);
  font-weight: var(--font-weight-medium);
  color: var(--text-secondary);
  text-decoration: none;
  padding: var(--space-2) 0;
  position: relative;
  transition: color var(--transition-duration-short) ease;
}

.nav-link::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 2px;
  background-color: var(--accent-primary);
  transform: scaleX(0);
  transform-origin: bottom right;
  transition: transform var(--transition-duration-base) ease-out;
}

.nav-link:hover,
.nav-link:focus-visible {
  color: var(--text-primary);
}

.nav-link:hover::after,
.nav-link:focus-visible::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

.nav-link.active {
  color: var(--accent-primary);
  font-weight: var(--font-weight-semibold);
}
.nav-link.active::after {
   transform: scaleX(1);
   background-color: var(--accent-primary);
}


.user-menu {
  display: flex;
  align-items: center;
  gap: var(--space-3);
}

.user-info {
  font-size: var(--font-size-sm);
  color: var(--text-muted);
  white-space: nowrap;
}

.user-menu .btn {

}
.user-menu .btn:hover {
    background-color: var(--bg-tertiary);
}

.main-content {
  flex-grow: 1;
}
.admin-page-container {

}
.admin-section {
  margin-bottom: var(--space-10);
  padding: var(--space-6);
  border: var(--border-width-thin) solid var(--border-primary);
  border-radius: var(--border-radius-lg);
  background-color: var(--bg-secondary);
  box-shadow: var(--shadow-sm);
}
.admin-section h3 {
  margin-top: 0;
  margin-bottom: var(--space-6);
  padding-bottom: var(--space-4);
  border-bottom: 1px solid var(--border-secondary);
}

.admin-form-section {
  margin-bottom: var(--space-8);
  padding: var(--space-6);
  border: var(--border-width-thin) solid var(--border-secondary);
  border-radius: var(--border-radius-md);
  background-color: var(--bg-primary);
}
#topic-form.admin-form-section { border-left: 4px solid var(--feedback-info); }
#lecture-form.admin-form-section { border-left: 4px solid var(--feedback-success); }
#question-form.admin-form-section { border-left: 4px solid var(--feedback-warning); }
.admin-form-section h4 {
    margin-top: 0;
    margin-bottom: var(--space-5);
    font-size: var(--font-size-lg);
}
.form-grid-columns {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-4) var(--space-5);
    margin-top: var(--space-4);
}

.bulk-add-section {
    margin-top: var(--space-8);
    padding: var(--space-5);
    border: var(--border-width-thin) dashed var(--border-secondary);
    border-radius: var(--border-radius-md);
    background-color: var(--bg-secondary);
}
.bulk-add-section textarea {
    font-family: var(--font-family-mono);
    min-height: 150px;
    font-size: var(--font-size-sm);
    background-color: var(--bg-primary);
}
.bulk-add-section p small { font-size: var(--font-size-xs); }

.admin-stats-overview .stats-filter {
    margin-bottom: var(--space-5);
    display: flex;
    align-items: center;
    gap: var(--space-3);
}
.admin-stats-overview .overview-summary-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--space-4);
    margin-bottom: var(--space-6);
    padding-bottom: var(--space-5);
    border-bottom: 1px solid var(--border-primary);
}
.admin-stats-overview .summary-box {
    background-color: var(--bg-tertiary);
    padding: var(--space-4);
    border-radius: var(--border-radius-md);
    text-align: center;
}
.summary-box strong {
    display: block;
    font-size: var(--font-size-sm);
    color: var(--text-muted);
    margin-bottom: var(--space-1);
    font-weight: var(--font-weight-medium);
}
.summary-box span {
    display: block;
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--accent-primary);
}

.topic-management-hierarchy {
    border: 1px solid var(--border-primary);
    border-radius: var(--border-radius-md);
    padding: 0;
    margin-bottom: var(--space-6);
    background: var(--bg-primary);
    max-height: 500px;
    overflow-y: auto;
}
.topic-management-hierarchy .topic-node-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-3) var(--space-4);
    border-bottom: 1px solid var(--border-secondary);
    margin-left: calc(var(--level, 0) * var(--space-6));
    background-color: color-mix(in srgb, var(--bg-secondary) calc(var(--level, 0) * 10%), var(--bg-primary));
    transition: background-color var(--transition-duration-short) ease;
}
.topic-management-hierarchy .topic-node-item:last-child {
    border-bottom: none;
}
.topic-management-hierarchy .topic-node-item:hover {
    background-color: var(--bg-tertiary);
}
.topic-management-hierarchy .topic-name {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    font-weight: var(--font-weight-medium);
}
.topic-management-hierarchy .topic-name i,
.topic-management-hierarchy .topic-name svg { /* SVG için de */
    color: var(--text-muted);
    width: 1em;
    text-align: center;
    flex-shrink: 0; /* İkon küçülmesin */
}
.topic-management-hierarchy .topic-actions .btn {
    margin-left: var(--space-2);
    padding: var(--space-1) var(--space-2);
    font-size: var(--font-size-xs);
}

.auth-page {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: var(--space-8) 0;
}
.auth-form-container {
  width: 100%;
  max-width: 450px;
  padding: var(--space-8) var(--space-6);
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-primary);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-lg);
}
.auth-form-container h2 {
  text-align: center;
  margin-top: 0;
  margin-bottom: var(--space-6);
  font-size: var(--font-size-2xl);
}
.auth-form-container form .form-group {
  margin-bottom: var(--space-5);
}
.auth-form-container form button[type="submit"] {
  width: 100%;
  margin-top: var(--space-6);
  padding: var(--space-4);
  font-size: var(--font-size-md);
}
.auth-form-container .auth-switch-link {
  margin-top: var(--space-6);
  text-align: center;
  font-size: var(--font-size-sm);
}
.auth-form-container .auth-switch-link a {
  font-weight: var(--font-weight-medium);
}

.solve-page-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-4);
    flex-wrap: wrap;
    padding: var(--space-4);
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius-md);
    margin-bottom: var(--space-6);
    border: 1px solid var(--border-primary);
    font-size: var(--font-size-sm);
}
.solve-page-header .stat {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    color: var(--text-secondary);
}
.solve-page-header .stat-value {
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    font-size: var(--font-size-base);
}

.solve-page-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--space-3);
    padding: var(--space-5);
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius-md);
    margin-top: var(--space-6);
    border: 1px solid var(--border-primary);
}
.solve-page-controls .feedback-text {
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-md);
}
.feedback-text.correct-text { color: var(--feedback-success); }
.feedback-text.incorrect-text { color: var(--feedback-error); }

.quiz-finished-card {
    text-align: center;
    padding: var(--space-8) var(--space-6);
}
.quiz-finished-card h2 {
    margin-top: 0;
    margin-bottom: var(--space-4);
    color: var(--accent-primary);
}
.quiz-finished-card p {
    font-size: var(--font-size-lg);
    color: var(--text-secondary);
    margin-bottom: var(--space-3);
    max-width: none;
}
.quiz-finished-card .final-score {
    font-size: var(--font-size-3xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    margin: var(--space-4) 0;
}
.quiz-finished-card .btn-restart {
    margin-top: var(--space-6);
}

.my-stats-page h2 {
    margin-bottom: var(--space-6);
    text-align: center;
}
.stats-summary-section {
    background-color: var(--bg-secondary);
    padding: var(--space-6);
    border-radius: var(--border-radius-lg);
    margin-bottom: var(--space-8);
    border: 1px solid var(--border-primary);
}
.stats-summary-section h3 {
    margin-top: 0;
    margin-bottom: var(--space-4);
    text-align: center;
}
.stats-summary-section ul {
    list-style: none;
    padding: 0;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: var(--space-4);
    text-align: center;
}
.stats-summary-section li {
    background-color: var(--bg-primary);
    padding: var(--space-3);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-base);
}
.stats-summary-section .stat-value {
    display: block;
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    margin-top: var(--space-1);
    color: var(--accent-primary);
}

.detailed-stats-section h3 {
    margin-bottom: var(--space-4);
}

.weak-topics-alert {
    border-left-color: var(--feedback-error) !important;
    background-color: var(--feedback-error-bg) !important;
    color: color-mix(in srgb, var(--feedback-error) 80%, black) !important;
    margin-top: var(--space-6);
}
.weak-topics-alert h4,
.weak-topics-alert .alert-title { /* .alert-title'ı da hedef alalım */
    color: var(--feedback-error) !important;
    margin-bottom: var(--space-3) !important;
}
.weak-topics-alert ul { list-style: disc; padding-left: var(--space-5); }
.weak-topics-alert li { margin-bottom: var(--space-2); }
.weak-topics-alert li span {
    font-size: var(--font-size-xs);
    color: var(--text-muted);
    margin-left: var(--space-1);
}

.topic-browser-page main {
    padding-top: var(--space-6);
    padding-bottom: var(--space-6);
}
.topic-browser-page .breadcrumb {
    margin-bottom: var(--space-6);
    padding: var(--space-3) var(--space-4);
    background-color: var(--bg-secondary);
    border-radius: var(--border-radius-md);
}
.topic-browser-page .btn-back {
    margin-bottom: var(--space-6);
}

.content-selection-card {
    text-align: center;
    padding: var(--space-8);
}
.content-selection-card h3 {
    margin-top: 0;
    margin-bottom: var(--space-3);
}
.content-selection-card p {
    margin-bottom: var(--space-5);
    color: var(--text-secondary);
    max-width: none;
}
.content-selection-card .action-buttons {
    display: flex;
    justify-content: center;
    gap: var(--space-4);
    flex-wrap: wrap;
    margin-bottom: var(--space-6);
}
.content-selection-card .action-buttons .btn {
    min-width: 200px;
}
.content-selection-card .btn-browse-other {
    background-color: var(--bg-tertiary);
    color: var(--text-secondary);
}
.content-selection-card .btn-browse-other:hover {
     background-color: var(--bg-quaternary);
     color: var(--text-primary);
}

.lecture-list .lecture-item {
    background-color: var(--bg-secondary);
    padding: var(--space-6);
    border: 1px solid var(--border-primary);
    border-radius: var(--border-radius-lg);
    margin-bottom: var(--space-6);
}
.lecture-list .lecture-item h3 {
    margin-top: 0;
    margin-bottom: var(--space-2);
    font-size: var(--font-size-xl);
}
.lecture-list .lecture-topic {
    font-size: var(--font-size-sm);
    color: var(--text-muted);
    margin-bottom: var(--space-4);
}
.lecture-list .lecture-image {
    max-width: 400px;
    height: auto;
    border-radius: var(--border-radius-md);
    margin-bottom: var(--space-4);
    display: block;
    border: 1px solid var(--border-secondary);
}
.lecture-list .lecture-content {
    line-height: var(--line-height-base);
    color: var(--text-primary);
}
.lecture-content h1, .lecture-content h2, .lecture-content h3,
.lecture-content h4, .lecture-content h5, .lecture-content h6 {
    margin-top: var(--space-6);
    margin-bottom: var(--space-3);
    color: var(--text-primary);
}
.lecture-content p { max-width: 75ch; margin-bottom: var(--space-4); }
.lecture-content ul, .lecture-content ol { list-style: revert; padding-left: var(--space-6); margin-bottom: var(--space-4); }
.lecture-content li { margin-bottom: var(--space-2); }
.lecture-content img {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius-md);
    margin: var(--space-4) 0;
}

.tox:not(.tox-tinymce-inline) .tox-editor-header {
    background-color: var(--bg-secondary);
    border-bottom: 1px solid var(--border-primary);
    padding: var(--space-1) var(--space-2);
}
.tox .tox-tbtn {
    background-color: transparent;
    color: var(--text-secondary);
    border-radius: var(--border-radius-sm);
    transition: background-color var(--transition-duration-short) ease;
}
.tox .tox-tbtn:hover {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
}
.tox .tox-tbtn--active,
.tox .tox-tbtn:active {
    background-color: var(--accent-primary);
    color: var(--text-on-accent);
}
.tox .tox-tbtn svg {
    fill: currentColor;
}
.tox .tox-tbtn--disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
.tox .tox-menu, .tox .tox-dialog {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    border-radius: var(--border-radius-md);
    box-shadow: var(--shadow-lg);
    color: var(--text-primary);
}
.tox .tox-collection--list .tox-collection__item--active {
    background-color: var(--accent-primary);
    color: var(--text-on-accent);
}
.tox .tox-collection__item--enabled:hover {
     background-color: var(--bg-tertiary);
     color: var(--text-primary);
}
.tox .tox-edit-area__iframe {
    background-color: var(--bg-primary);
}

@keyframes fadeInUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
.fade-in-up {
  animation: fadeInUp 0.6s var(--transition-timing-function-ease) both;
}

@media print {
  body {
    background-color: #fff !important;
    color: #000 !important;
    font-size: 10pt;
  }
  .no-print { display: none !important; }
  a { text-decoration: underline; color: #000 !important; }
  .card, .table-container, .admin-section, div[role="alert"], .sidebar {
      border: 1px solid #ccc !important;
      box-shadow: none !important;
      page-break-inside: avoid;
      background-color: #fff !important;
      color: #000 !important;
  }
  .table th, .table td {
      color: #000 !important;
      border-color: #ccc !important;
  }
  .table th {
      background-color: #eee !important;
  }
}

/* ==========================================================================
   Wordle Benzeri Oyun Stilleri
   ========================================================================== */

.word-practice-page .card {
  /* Oyun kartı için belki ekstra stil */
  /* background-color: var(--bg-primary); */ /* Daha sade bir arka plan? */
}

.word-display {
  display: flex;
  flex-wrap: wrap; /* Uzun kelimelerde alta kaysın */
  justify-content: center;
  gap: var(--space-2); /* Kutucuklar arası boşluk */
  margin-bottom: var(--space-6);
}

.word-letter-box {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 3rem;  /* Kutu genişliği (ayarlanabilir) */
  height: 3rem; /* Kutu yüksekliği */
  border: 2px solid var(--border-secondary); /* Kutu kenarlığı */
  border-radius: var(--border-radius-sm);
  font-family: var(--font-family-mono); /* Sabit genişlikli font */
  font-size: var(--font-size-xl); /* Harf boyutu */
  font-weight: var(--font-weight-bold);
  text-transform: uppercase;
  color: var(--text-primary);
  background-color: var(--bg-secondary);
  transition: border-color 0.2s ease, background-color 0.2s ease;
}

/* İlk harf (gösterilen) */
.word-letter-box.revealed-initial {
  border-color: var(--border-strong);
  /* background-color: var(--bg-tertiary); */ /* İsteğe bağlı */
}

/* Cevap gösterildiğinde tüm harfler */
.word-letter-box.revealed-final {
    border-color: var(--accent-primary); /* Veya başarı/hata rengi? */
    /* background-color: var(--bg-primary); */
}
/* Gece Modu İçin Özel Stiller (Opsiyonel - Ana değişkenler yeterli olabilir) */
/*
body.dark-mode .word-letter-box {
    border-color: var(--border-secondary);
    background-color: var(--bg-secondary);
    color: var(--text-primary);
}
body.dark-mode .word-letter-box.revealed-initial {
     border-color: var(--border-strong);
}
body.dark-mode .word-letter-box.revealed-final {
     border-color: var(--accent-primary);
}
*/

/* Tahmin Input Alanı */
.word-guess-input {
    font-size: var(--font-size-lg); /* Biraz daha büyük */
    text-align: center;
    text-transform: uppercase; /* Otomatik büyük harf */
    font-weight: var(--font-weight-medium);
    letter-spacing: 0.1em; /* Harf aralığı */
}

/* On-Screen Keyboard Stilleri (Eğer eklenirse) */
/* .game-keyboard { ... } */
/* .keyboard-row { ... } */
/* .key-button { ... } */
/* Yükleme animasyonu için (Tailwind yoksa) */
/* .animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; } */
/* @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } } */

/* Renk utility sınıfları (MyStatsPage'de de kullanıldı) */
.text-success { color: var(--feedback-success) !important; }
.text-danger { color: var(--feedback-error) !important; }
.text-warning { color: var(--feedback-warning) !important; }
.text-info { color: var(--feedback-info) !important; }
.text-muted { color: var(--text-muted) !important; }
.text-secondary { color: var(--text-secondary) !important; }
.font-semibold { font-weight: var(--font-weight-semibold) !important; }
/* Diğer Tailwind utility karşılıkları eklenebilir */

.m-auto { margin: auto !important; }
.m-0 { margin: 0 !important; }
.m-1 { margin: var(--space-1) !important; }
.m-2 { margin: var(--space-2) !important; }
.m-3 { margin: var(--space-3) !important; }
.m-4 { margin: var(--space-4) !important; }
.m-5 { margin: var(--space-5) !important; }
.m-6 { margin: var(--space-6) !important; }
.m-8 { margin: var(--space-8) !important; }
.mx-auto { margin-left: auto !important; margin-right: auto !important; }
.mx-0 { margin-left: 0 !important; margin-right: 0 !important; }
.mx-1 { margin-left: var(--space-1) !important; margin-right: var(--space-1) !important; }
.mx-2 { margin-left: var(--space-2) !important; margin-right: var(--space-2) !important; }
.mx-4 { margin-left: var(--space-4) !important; margin-right: var(--space-4) !important; }
.mx-6 { margin-left: var(--space-6) !important; margin-right: var(--space-6) !important; }
.my-0 { margin-top: 0 !important; margin-bottom: 0 !important; }
.my-1 { margin-top: var(--space-1) !important; margin-bottom: var(--space-1) !important; }
.my-2 { margin-top: var(--space-2) !important; margin-bottom: var(--space-2) !important; }
.my-4 { margin-top: var(--space-4) !important; margin-bottom: var(--space-4) !important; }
.my-6 { margin-top: var(--space-6) !important; margin-bottom: var(--space-6) !important; }
.my-8 { margin-top: var(--space-8) !important; margin-bottom: var(--space-8) !important; }
.mt-0 { margin-top: 0 !important; }
.mt-1 { margin-top: var(--space-1) !important; }
.mt-2 { margin-top: var(--space-2) !important; }
.mt-3 { margin-top: var(--space-3) !important; }
.mt-4 { margin-top: var(--space-4) !important; }
.mt-5 { margin-top: var(--space-5) !important; }
.mt-6 { margin-top: var(--space-6) !important; }
.mt-8 { margin-top: var(--space-8) !important; }
.mr-0 { margin-right: 0 !important; }
.mr-1 { margin-right: var(--space-1) !important; }
.mr-2 { margin-right: var(--space-2) !important; }
.mr-3 { margin-right: var(--space-3) !important; }
.mr-4 { margin-right: var(--space-4) !important; }
.mb-0 { margin-bottom: 0 !important; }
.mb-1 { margin-bottom: var(--space-1) !important; }
.mb-2 { margin-bottom: var(--space-2) !important; }
.mb-3 { margin-bottom: var(--space-3) !important; }
.mb-4 { margin-bottom: var(--space-4) !important; }
.mb-5 { margin-bottom: var(--space-5) !important; }
.mb-6 { margin-bottom: var(--space-6) !important; }
.mb-8 { margin-bottom: var(--space-8) !important; }
.ml-0 { margin-left: 0 !important; }
.ml-1 { margin-left: var(--space-1) !important; }
.ml-2 { margin-left: var(--space-2) !important; }
.ml-3 { margin-left: var(--space-3) !important; }
.ml-4 { margin-left: var(--space-4) !important; }
.p-0 { padding: 0 !important; }
.p-1 { padding: var(--space-1) !important; }
.p-2 { padding: var(--space-2) !important; }
.p-3 { padding: var(--space-3) !important; }
.p-4 { padding: var(--space-4) !important; }
.p-5 { padding: var(--space-5) !important; }
.p-6 { padding: var(--space-6) !important; }
.p-8 { padding: var(--space-8) !important; }
.px-0 { padding-left: 0 !important; padding-right: 0 !important; }
.px-1 { padding-left: var(--space-1) !important; padding-right: var(--space-1) !important; }
.px-2 { padding-left: var(--space-2) !important; padding-right: var(--space-2) !important; }
.px-4 { padding-left: var(--space-4) !important; padding-right: var(--space-4) !important; }
.px-6 { padding-left: var(--space-6) !important; padding-right: var(--space-6) !important; }
.py-0 { padding-top: 0 !important; padding-bottom: 0 !important; }
.py-1 { padding-top: var(--space-1) !important; padding-bottom: var(--space-1) !important; }
.py-2 { padding-top: var(--space-2) !important; padding-bottom: var(--space-2) !important; }
.py-4 { padding-top: var(--space-4) !important; padding-bottom: var(--space-4) !important; }
.py-6 { padding-top: var(--space-6) !important; padding-bottom: var(--space-6) !important; }
.py-8 { padding-top: var(--space-8) !important; padding-bottom: var(--space-8) !important; }
.pt-0 { padding-top: 0 !important; }
.pt-1 { padding-top: var(--space-1) !important; }
.pt-2 { padding-top: var(--space-2) !important; }
.pt-4 { padding-top: var(--space-4) !important; }
.pt-6 { padding-top: var(--space-6) !important; }
.pt-8 { padding-top: var(--space-8) !important; }
.pr-0 { padding-right: 0 !important; }
.pr-1 { padding-right: var(--space-1) !important; }
.pr-2 { padding-right: var(--space-2) !important; }
.pr-4 { padding-right: var(--space-4) !important; }
.pb-0 { padding-bottom: 0 !important; }
.pb-1 { padding-bottom: var(--space-1) !important; }
.pb-2 { padding-bottom: var(--space-2) !important; }
.pb-4 { padding-bottom: var(--space-4) !important; }
.pb-6 { padding-bottom: var(--space-6) !important; }
.pb-8 { padding-bottom: var(--space-8) !important; }
.pl-0 { padding-left: 0 !important; }
.pl-1 { padding-left: var(--space-1) !important; }
.pl-2 { padding-left: var(--space-2) !important; }
.pl-4 { padding-left: var(--space-4) !important; }
.pl-5 { padding-left: var(--space-5) !important; }
.pl-6 { padding-left: var(--space-6) !important; }
.text-left { text-align: left !important; }
.text-center { text-align: center !important; }
.text-right { text-align: right !important; }
.text-justify { text-align: justify !important; }
.d-block { display: block !important; }
.d-inline-block { display: inline-block !important; }
.d-inline { display: inline !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }
.d-grid { display: grid !important; }
.d-inline-grid { display: inline-grid !important; }
.d-none { display: none !important; }
.flex-row { flex-direction: row !important; }
.flex-col { flex-direction: column !important; }
.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.flex-shrink-0 { flex-shrink: 0 !important; }
.justify-start { justify-content: flex-start !important; }
.justify-end { justify-content: flex-end !important; }
.justify-center { justify-content: center !important; }
.justify-between { justify-content: space-between !important; }
.align-start { align-items: flex-start !important; }
.align-end { align-items: flex-end !important; }
.align-center { align-items: center !important; }
.align-baseline { align-items: baseline !important; }
.align-stretch { align-items: stretch !important; }
.gap-1 { gap: var(--space-1) !important; }
.gap-2 { gap: var(--space-2) !important; }
.gap-3 { gap: var(--space-3) !important; }
.gap-4 { gap: var(--space-4) !important; }
.gap-5 { gap: var(--space-5) !important; }
.gap-6 { gap: var(--space-6) !important; }
.w-full { width: 100% !important; }
.w-auto { width: auto !important; }
.w-1\/3 { width: 33.333333% !important; }



/* index.css (Eklenecek Kısım) */

/* ==========================================================================
   Header / Navbar ve Mobil Menü Ek Stilleri
   ========================================================================== */

.main-header {
  /* Zaten stilleri vardı, gerekirse ekleme yap */
}

.header-container {
  /* justify-content: space-between; vardı */
  /* gap: var(--space-6); vardı */
}

.logo { /* Yeni Eklendi - Logo/Site Adı Alanı */
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
    text-decoration: none;
    flex-shrink: 0; /* Küçülmesin */
}
.logo a { color: inherit; text-decoration: none;}
.logo a:hover { color: var(--accent-primary); }


.nav-links {
   /* Zaten stilleri vardı */
}
/* Mobilde gizlenecek masaüstü navigasyon elemanları için ortak sınıf */
.desktop-nav {
    display: none; /* Varsayılan olarak gizli (mobil öncelikli) */
}

.header-right-controls { /* Tema değiştirici, kullanıcı menüsü ve hamburgeri sarmalar */
    display: flex;
    align-items: center;
    gap: var(--space-2); /* Butonlar arası yakın boşluk */
}

.user-menu {
   /* Zaten stilleri vardı, gap eklenebilir */
   gap: var(--space-3);
}


/* Hamburger Butonu Stilleri */
.hamburger-btn {
  display: flex; /* Mobilde görünecek (media query içinde ayarlanacak) */
  align-items: center;
  justify-content: center;
  background: none;
  border: none;
  color: var(--text-primary);
  font-size: var(--font-size-xl); /* İkon boyutu için */
  padding: var(--space-2);
  cursor: pointer;
  border-radius: var(--border-radius-sm);
  transition: background-color var(--transition-duration-short) ease;
  z-index: calc(var(--z-index-sticky) + 2); /* Menüden üstte */
}
.hamburger-btn:hover, .hamburger-btn:focus-visible {
    background-color: var(--bg-tertiary);
    outline: none; /* Global focus-visible yeterli */
}


/* Mobil Menü Stilleri */
.mobile-menu {
  position: fixed;
  top: 0;
  right: 0; /* Sağdan açılacak */
  width: 300px; /* Veya yüzde %80 */
  max-width: 85%;
  height: 100%;
  background-color: var(--bg-secondary); /* Arka plan */
  border-left: 1px solid var(--border-primary);
  box-shadow: var(--shadow-lg);
  padding: var(--space-8) var(--space-6); /* İç boşluk */
  transform: translateX(100%); /* Başlangıçta ekranın dışında */
  transition: transform var(--transition-duration-base) var(--transition-timing-function-ease);
  z-index: calc(var(--z-index-sticky) + 1); /* Header'dan üstte */
  display: flex;
  flex-direction: column; /* İçeriği alt alta sırala */
  overflow-y: auto; /* Taşarsa kaydır */
}

.mobile-menu.is-open {
  transform: translateX(0); /* Açıkken görünür yap */
}

.mobile-nav-links {
  display: flex;
  flex-direction: column;
  gap: var(--space-1); /* Linkler arası dikey boşluk */
  margin-bottom: auto; /* Kullanıcı menüsünü en alta it */
}

.mobile-nav-link {
  display: block;
  padding: var(--space-3) var(--space-4);
  font-size: var(--font-size-md); /* Mobilde biraz daha büyük linkler */
  font-weight: var(--font-weight-medium);
  color: var(--text-secondary);
  text-decoration: none;
  border-radius: var(--border-radius-md);
  transition: background-color var(--transition-duration-short) ease, color var(--transition-duration-short) ease;
}
.mobile-nav-link:hover {
  background-color: var(--bg-tertiary);
  color: var(--text-primary);
}
.mobile-nav-link.active {
  background-color: var(--accent-primary);
  color: var(--text-on-accent);
  font-weight: var(--font-weight-semibold);
}

.mobile-user-menu {
    margin-top: var(--space-6);
    padding-top: var(--space-6);
    border-top: 1px solid var(--border-secondary);
}
.mobile-user-menu .user-info {
    display: block; /* Tam satıra yayılsın */
    text-align: center;
    margin-bottom: var(--space-4);
    color: var(--text-muted);
    font-size: var(--font-size-sm);
}

/* Mobil Menü Overlay */
.mobile-menu-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgb(0 0 0 / 0.5); /* Yarı şeffaf siyah */
  z-index: var(--z-index-sticky); /* Menünün arkasında, header'ın üstünde */
  opacity: 0;
  visibility: hidden;
  transition: opacity var(--transition-duration-base) ease, visibility var(--transition-duration-base) ease;
}
.mobile-menu-active .mobile-menu-overlay { /* Menü aktifken overlay'i göster */
   opacity: 1;
   visibility: visible;
}

/* Body scroll engelleme (opsiyonel) */
body.mobile-menu-active {
    overflow: hidden;
}


/* ==========================================================================
   20. Mobil Uyumluluk ve Responsive Ayarlamalar (@media queries)
   ========================================================================== */

/* Orta Boy Ekranlar ve Altı (Tabletler ve Telefonlar - Örnek: 1024px altı) */
@media (max-width: 1024px) {
    .container {
        padding-left: var(--space-4);
        padding-right: var(--space-4);
    }
    h1 { font-size: var(--font-size-2xl); }
    h2 { font-size: var(--font-size-xl); }
    h3 { font-size: var(--font-size-lg); }
    h4 { font-size: var(--font-size-md); }

    .card { padding: var(--space-5); }
    .card-header { padding: var(--space-3) var(--space-5); margin: calc(var(--space-5) * -1) calc(var(--space-5) * -1) var(--space-4); }
    .card-footer { padding: var(--space-3) var(--space-5); margin: var(--space-4) calc(var(--space-5) * -1) calc(var(--space-5) * -1); }
    .admin-section { padding: var(--space-5); }
    .admin-form-section { padding: var(--space-5); }
    .card-grid { gap: var(--space-5); }
    .topic-browser-page .d-flex.justify-between { flex-direction: column; align-items: flex-start; gap: var(--space-4); }
    .topic-browser-page .breadcrumb { padding: var(--space-3); }
    .auth-form-container { padding: var(--space-6) var(--space-5); }
    .solve-page-header { flex-direction: column; align-items: flex-start; gap: var(--space-3); }
    .solve-page-header .d-flex.gap-4 { gap: var(--space-3); }
    .solve-page-controls { gap: var(--space-4); }
    .solve-page-controls .flex-grow-1 { min-width: 150px; }

    /* --- Hamburger Menu Logic --- */
    .desktop-nav {
        display: none !important; /* Masaüstü linklerini/kullanıcı menüsünü/tema butonunu gizle */
    }
    .hamburger-btn {
        display: flex !important; /* Hamburger butonunu göster */
    }
    /* Header container'da logo ve sağ kontrol grubu kalır */
    .main-header .header-container {
        /* Gerekirse ek ayar */
    }
    .header-right-controls {
        /* Sağdaki grup (hamburger butonu içerir) */
    }
     /* Mobilde header altındaki nav-links gizli kalmalı */
     .nav-links {
         display: none !important;
     }
}

/* Küçük Ekranlar (Telefonlar - Örnek: 768px altı) */
@media (max-width: 768px) {
    .container {
        padding-left: var(--space-3);
        padding-right: var(--space-3);
    }
    h1 { font-size: var(--font-size-xl); }
    h2 { font-size: var(--font-size-lg); }
    h3 { font-size: var(--font-size-md); }
    h4 { font-size: var(--font-size-base); }
    .form-grid-columns { grid-template-columns: 1fr; gap: var(--space-4); }
    .form-grid-columns .form-group { margin-bottom: var(--space-4); }
    .table th, .table td { padding: var(--space-2) var(--space-3) !important; font-size: var(--font-size-sm) !important; }
    .card { padding: var(--space-4); border-radius: var(--border-radius-md); }
    .card-header { padding: var(--space-3) var(--space-4); margin: calc(var(--space-4) * -1) calc(var(--space-4) * -1) var(--space-3); }
    .card-footer { padding: var(--space-3) var(--space-4); margin: var(--space-3) calc(var(--space-4) * -1) calc(var(--space-4) * -1); }
    .card-grid { gap: var(--space-4); }
    .hierarchy-nav-card { padding: var(--space-3); gap: var(--space-3); }
    .hierarchy-nav-card .card-icon { width: 36px; height: 36px; }
    .hierarchy-nav-card .card-icon svg { font-size: 1.3rem; }
    .hierarchy-nav-card .card-title { font-size: var(--font-size-sm); }
    /* Header: 1024px altında zaten column yapılmıştı, burada ek değişiklik yok */
    /* .main-header .header-container { } */
    /* .main-header .user-menu { } */
    /* .nav-links { } */ /* Zaten display:none */
    .btn-lg { padding: var(--space-3) var(--space-5); font-size: var(--font-size-base); }
    .content-selection-card .action-buttons { flex-direction: column; align-items: center; gap: var(--space-3); }
    .content-selection-card .action-buttons .btn { min-width: 250px; width: 100%; max-width: 350px; }
    .stats-summary-grid { grid-template-columns: 1fr; }
}

/* Çok Küçük Ekranlar (Opsiyonel - Örnek: 480px altı) */
@media (max-width: 480px) {
    h1 { font-size: var(--font-size-lg); }
    h2 { font-size: var(--font-size-md); }
    .container {
        padding-left: var(--space-2);
        padding-right: var(--space-2);
    }
    .btn { padding: var(--space-2) var(--space-4); }
    .btn-sm { padding: var(--space-1) var(--space-2); }
    .btn-lg { padding: var(--space-3) var(--space-5); font-size: var(--font-size-base); }
    .card { padding: var(--space-3); }
    .card-header { padding: var(--space-2) var(--space-3); margin: calc(var(--space-3) * -1) calc(var(--space-3) * -1) var(--space-2); }
    .card-footer { padding: var(--space-2) var(--space-3); margin: var(--space-2) calc(var(--space-3) * -1) calc(var(--space-3) * -1); }
    .hierarchy-nav-card { padding: var(--space-3); gap: var(--space-2); }
    .hierarchy-nav-card .card-icon { width: 32px; height: 32px; }
    .hierarchy-nav-card .card-icon svg { font-size: 1.1rem; }
    .hierarchy-nav-card .card-title { font-size: var(--font-size-xs); }
    .nav-links { gap: var(--space-3); }
    .user-menu { gap: var(--space-2); }
    .user-info { display: none; } /* Kullanıcı adını gizle */
}

/* Daha Büyük Ekranlar (Hamburgeri Gizle, Masaüstünü Göster) */
@media (min-width: 1025px) { /* breakpoint + 1px */
    .desktop-nav {
        display: flex !important; /* Masaüstü linklerini ve kullanıcı menüsünü/tema butonunu göster */
        align-items: center;
    }
    .hamburger-btn {
        display: none !important; /* Hamburgeri gizle */
    }
    /* Mobil menüyü ve overlay'i tamamen gizle */
    .mobile-menu, .mobile-menu-overlay {
         display: none !important;
     }
     /* Body scroll engellemesini kaldır */
     body.mobile-menu-active {
         overflow: auto;
     }
}


import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' // Stil dosyamız
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ChakraProvider } from '@chakra-ui/react' // ChakraProvider import edildi

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {/* ChakraProvider'ı en dışa veya uygun bir yere ekle */}
    <ChakraProvider>
      <BrowserRouter>
        <AuthProvider>
          <App />
        </AuthProvider>
      </BrowserRouter>
    </ChakraProvider>
  </React.StrictMode>,
)


# ✅ PostgreSQL Railway bağlantı bilgileri
DB_HOST=postgres-production-9ea8.up.railway.app
DB_PORT=5432
DB_NAME=railway
DB_USER=postgres
DB_PASS=HjldYTieqSjaGoECjcpbJagoHbbnCHLD
DB_DIALECT=postgres

# ✅ JWT için gizli anahtar (güvenli bir şey seç)
JWT_SECRET=S53r.1453

# ✅ Production ortamı için otomatik bağlantı (Opsiyonel, Sequelize için)
DATABASE_URL=postgresql://postgres:HjldYTieqSjaGoECjcpbJagoHbbnCHLD@postgres-production-9ea8.up.railway.app:5432/railway

# ✅ Port ayarı (Railway bazen bunu otomatik verir ama 8080'de sabitleyebilirsin)
PORT=8080

VITE_TINYMCE_API_KEY=llzergax4t1g57vzrb0lqif2fogx3o5lv0l6y68h3lh88b2j


# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
        ecmaVersion: 2020,
        globals: globals.browser,
        parserOptions: {
          ecmaVersion: 'latest',
          ecmaFeatures: { jsx: true },
          sourceType: 'module',
        },
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh,
      },
      rules: {
        ...js.configs.recommended.rules,
        ...reactHooks.configs.recommended.rules,
        'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true },
        ],
      },
    },
  ]

  
  <!doctype html>
<html lang="tr">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Rmikrobiyoloji Platformu</title>
  </head> 
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


{
  "name": "frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "frontend",
      "version": "0.0.0",
      "dependencies": {
        "@tinymce/tinymce-react": "^6.1.0",
        "axios": "^1.8.4",
        "dompurify": "^3.2.5",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "react-router-dom": "^7.5.1"
      },
      "devDependencies": {
        "@eslint/js": "^9.22.0",
        "@types/react": "^19.0.10",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "eslint": "^9.22.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "vite": "^6.3.1"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.26.2",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.9",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.26.8",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.26.10",
        "@babel/helper-compilation-targets": "^7.26.5",
        "@babel/helper-module-transforms": "^7.26.0",
        "@babel/helpers": "^7.26.10",
        "@babel/parser": "^7.26.10",
        "@babel/template": "^7.26.9",
        "@babel/traverse": "^7.26.10",
        "@babel/types": "^7.26.10",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.0.tgz",
      "integrity": "sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.0.tgz",
      "integrity": "sha512-LVk7fbXml0H2xH34dFzKQ7TDZ2G4/rVTOrq9V+icbbadjbVxxeFeDsNHv2SrZeWoA+6ZiTyWYWtScEIW07EAcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.26.8",
        "@babel/helper-validator-option": "^7.25.9",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.25.9",
        "@babel/types": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.26.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9",
        "@babel/traverse": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.26.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.0.tgz",
      "integrity": "sha512-U5eyP/CTFPuNE3qk+WZMxFkp/4zUzdceQlfzf7DdGdhp+Fezd7HD+i8Y24ZuTMKX3wQBld449jijbGq6OdGNQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.0.tgz",
      "integrity": "sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.9.tgz",
      "integrity": "sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.9.tgz",
      "integrity": "sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.0.tgz",
      "integrity": "sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.0.tgz",
      "integrity": "sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.27.0",
        "@babel/parser": "^7.27.0",
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.0.tgz",
      "integrity": "sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.3.tgz",
      "integrity": "sha512-W8bFfPA8DowP8l//sxjJLSLkD8iEjMc7cBVyP+u4cEv9sM7mdUCkgsj+t0n/BWPFtv7WWCN5Yzj0N6FJNUUqBQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.3.tgz",
      "integrity": "sha512-PuwVXbnP87Tcff5I9ngV0lmiSu40xw1At6i3GsU77U7cjDDB4s0X2cyFuBiDa1SBk9DnvWwnGvVaGBqoFWPb7A==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.3.tgz",
      "integrity": "sha512-XelR6MzjlZuBM4f5z2IQHK6LkK34Cvv6Rj2EntER3lwCBFdg6h2lKbtRjpTTsdEjD/WSe1q8UyPBXP1x3i/wYQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.3.tgz",
      "integrity": "sha512-ogtTpYHT/g1GWS/zKM0cc/tIebFjm1F9Aw1boQ2Y0eUQ+J89d0jFY//s9ei9jVIlkYi8AfOjiixcLJSGNSOAdQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.3.tgz",
      "integrity": "sha512-eESK5yfPNTqpAmDfFWNsOhmIOaQA59tAcF/EfYvo5/QWQCzXn5iUSOnqt3ra3UdzBv073ykTtmeLJZGt3HhA+w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.3.tgz",
      "integrity": "sha512-Kd8glo7sIZtwOLcPbW0yLpKmBNWMANZhrC1r6K++uDR2zyzb6AeOYtI6udbtabmQpFaxJ8uduXMAo1gs5ozz8A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.3.tgz",
      "integrity": "sha512-EJiyS70BYybOBpJth3M0KLOus0n+RRMKTYzhYhFeMwp7e/RaajXvP+BWlmEXNk6uk+KAu46j/kaQzr6au+JcIw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.3.tgz",
      "integrity": "sha512-Q+wSjaLpGxYf7zC0kL0nDlhsfuFkoN+EXrx2KSB33RhinWzejOd6AvgmP5JbkgXKmjhmpfgKZq24pneodYqE8Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.3.tgz",
      "integrity": "sha512-dUOVmAUzuHy2ZOKIHIKHCm58HKzFqd+puLaS424h6I85GlSDRZIA5ycBixb3mFgM0Jdh+ZOSB6KptX30DD8YOQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.3.tgz",
      "integrity": "sha512-xCUgnNYhRD5bb1C1nqrDV1PfkwgbswTTBRbAd8aH5PhYzikdf/ddtsYyMXFfGSsb/6t6QaPSzxtbfAZr9uox4A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.3.tgz",
      "integrity": "sha512-yplPOpczHOO4jTYKmuYuANI3WhvIPSVANGcNUeMlxH4twz/TeXuzEP41tGKNGWJjuMhotpGabeFYGAOU2ummBw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.3.tgz",
      "integrity": "sha512-P4BLP5/fjyihmXCELRGrLd793q/lBtKMQl8ARGpDxgzgIKJDRJ/u4r1A/HgpBpKpKZelGct2PGI4T+axcedf6g==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.3.tgz",
      "integrity": "sha512-eRAOV2ODpu6P5divMEMa26RRqb2yUoYsuQQOuFUexUoQndm4MdpXXDBbUoKIc0iPa4aCO7gIhtnYomkn2x+bag==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.3.tgz",
      "integrity": "sha512-ZC4jV2p7VbzTlnl8nZKLcBkfzIf4Yad1SJM4ZMKYnJqZFD4rTI+pBG65u8ev4jk3/MPwY9DvGn50wi3uhdaghg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.3.tgz",
      "integrity": "sha512-LDDODcFzNtECTrUUbVCs6j9/bDVqy7DDRsuIXJg6so+mFksgwG7ZVnTruYi5V+z3eE5y+BJZw7VvUadkbfg7QA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.3.tgz",
      "integrity": "sha512-s+w/NOY2k0yC2p9SLen+ymflgcpRkvwwa02fqmAwhBRI3SC12uiS10edHHXlVWwfAagYSY5UpmT/zISXPMW3tQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.3.tgz",
      "integrity": "sha512-nQHDz4pXjSDC6UfOE1Fw9Q8d6GCAd9KdvMZpfVGWSJztYCarRgSDfOVBY5xwhQXseiyxapkiSJi/5/ja8mRFFA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.3.tgz",
      "integrity": "sha512-1QaLtOWq0mzK6tzzp0jRN3eccmN3hezey7mhLnzC6oNlJoUJz4nym5ZD7mDnS/LZQgkrhEbEiTn515lPeLpgWA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.3.tgz",
      "integrity": "sha512-i5Hm68HXHdgv8wkrt+10Bc50zM0/eonPb/a/OFVfB6Qvpiirco5gBA5bz7S2SHuU+Y4LWn/zehzNX14Sp4r27g==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.3.tgz",
      "integrity": "sha512-zGAVApJEYTbOC6H/3QBr2mq3upG/LBEXr85/pTtKiv2IXcgKV0RT0QA/hSXZqSvLEpXeIxah7LczB4lkiYhTAQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.3.tgz",
      "integrity": "sha512-fpqctI45NnCIDKBH5AXQBsD0NDPbEFczK98hk/aa6HJxbl+UtLkJV2+Bvy5hLSLk3LHmqt0NTkKNso1A9y1a4w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.3.tgz",
      "integrity": "sha512-ROJhm7d8bk9dMCUZjkS8fgzsPAZEjtRJqCAmVgB0gMrvG7hfmPmz9k1rwO4jSiblFjYmNvbECL9uhaPzONMfgA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.3.tgz",
      "integrity": "sha512-YWcow8peiHpNBiIXHwaswPnAXLsLVygFwCB3A7Bh5jRkIBFWHGmNQ48AlX4xDvQNoMZlPYzjVOQDYEzWCqufMQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.3.tgz",
      "integrity": "sha512-qspTZOIGoXVS4DpNqUYUs9UxVb04khS1Degaw/MnfMe7goQ3lTfQ13Vw4qY/Nj0979BGvMRpAYbs/BAxEvU8ew==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.3.tgz",
      "integrity": "sha512-ICgUR+kPimx0vvRzf+N/7L7tVSQeE3BYY+NhHRHXS1kBuPO7z2+7ea2HbhDyZdTephgvNvKrlDDKUexuCVBVvg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.6.1.tgz",
      "integrity": "sha512-KTsJMmobmbrFLe3LDh0PC2FXpcSYJt/MLjlkh/9LEnmKYLSYmT/0EW9JWANjeoemiuZrmogti0tW5Ch+qNUYDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.20.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
      "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.1.tgz",
      "integrity": "sha512-RI17tsD2frtDu/3dmI7QRrD4bedNKPM08ziRYaC5AhkGrzIAJelm9kJU1TznK+apx6V+cqRz8tfpEeG3oIyjxw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.13.0.tgz",
      "integrity": "sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.25.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.25.1.tgz",
      "integrity": "sha512-dEIwmjntEx8u3Uvv+kr3PDeeArL8Hw07H9kyYxCjnM9pBjfEhk6uLXSchxxzgiwtRhhzVzqmUSDFBOi1TuZ7qg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.8",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.8.tgz",
      "integrity": "sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.13.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.0.tgz",
      "integrity": "sha512-+Fbls/diZ0RDerhE8kyC6hjADCXA1K4yVNlH0EYfd2XjyH0UGgzaQ8MlT0pCXAThfxv3QUAczHaL+qSv1E4/Cg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.0.tgz",
      "integrity": "sha512-PPA6aEEsTPRz+/4xxAmaoWDqh67N7wFbgFUJGMnanCFs0TV99M0M8QhhaSCks+n6EbQoFvLQgYOGXxlMGQe/6w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.0.tgz",
      "integrity": "sha512-GwYOcOakYHdfnjjKwqpTGgn5a6cUX7+Ra2HeNj/GdXvO2VJOOXCiYYlRFU4CubFM67EhbmzLOmACKEfvp3J1kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.0.tgz",
      "integrity": "sha512-CoLEGJ+2eheqD9KBSxmma6ld01czS52Iw0e2qMZNpPDlf7Z9mj8xmMemxEucinev4LgHalDPczMyxzbq+Q+EtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.0.tgz",
      "integrity": "sha512-r7yGiS4HN/kibvESzmrOB/PxKMhPTlz+FcGvoUIKYoTyGd5toHp48g1uZy1o1xQvybwwpqpe010JrcGG2s5nkg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.0.tgz",
      "integrity": "sha512-mVDxzlf0oLzV3oZOr0SMJ0lSDd3xC4CmnWJ8Val8isp9jRGl5Dq//LLDSPFrasS7pSm6m5xAcKaw3sHXhBjoRw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.0.tgz",
      "integrity": "sha512-y/qUMOpJxBMy8xCXD++jeu8t7kzjlOCkoxxajL58G62PJGBZVl/Gwpm7JK9+YvlB701rcQTzjUZ1JgUoPTnoQA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.0.tgz",
      "integrity": "sha512-GoCsPibtVdJFPv/BOIvBKO/XmwZLwaNWdyD8TKlXuqp0veo2sHE+A/vpMQ5iSArRUz/uaoj4h5S6Pn0+PdhRjg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.0.tgz",
      "integrity": "sha512-L5ZLphTjjAD9leJzSLI7rr8fNqJMlGDKlazW2tX4IUF9P7R5TMQPElpH82Q7eNIDQnQlAyiNVfRPfP2vM5Avvg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.0.tgz",
      "integrity": "sha512-ATZvCRGCDtv1Y4gpDIXsS+wfFeFuLwVxyUBSLawjgXK2tRE6fnsQEkE4csQQYWlBlsFztRzCnBvWVfcae/1qxQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.0.tgz",
      "integrity": "sha512-wG9e2XtIhd++QugU5MD9i7OnpaVb08ji3P1y/hNbxrQ3sYEelKJOq1UJ5dXczeo6Hj2rfDEL5GdtkMSVLa/AOg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.0.tgz",
      "integrity": "sha512-vgXfWmj0f3jAUvC7TZSU/m/cOE558ILWDzS7jBhiCAFpY2WEBn5jqgbqvmzlMjtp8KlLcBlXVD2mkTSEQE6Ixw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.0.tgz",
      "integrity": "sha512-uJkYTugqtPZBS3Z136arevt/FsKTF/J9dEMTX/cwR7lsAW4bShzI2R0pJVw+hcBTWF4dxVckYh72Hk3/hWNKvA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.0.tgz",
      "integrity": "sha512-rKmSj6EXQRnhSkE22+WvrqOqRtk733x3p5sWpZilhmjnkHkpeCgWsFFo0dGnUGeA+OZjRl3+VYq+HyCOEuwcxQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.0.tgz",
      "integrity": "sha512-SpnYlAfKPOoVsQqmTFJ0usx0z84bzGOS9anAC0AZ3rdSo3snecihbhFTlJZ8XMwzqAcodjFU4+/SM311dqE5Sw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.0.tgz",
      "integrity": "sha512-RcDGMtqF9EFN8i2RYN2W+64CdHruJ5rPqrlYw+cgM3uOVPSsnAQps7cpjXe9be/yDp8UC7VLoCoKC8J3Kn2FkQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.0.tgz",
      "integrity": "sha512-HZvjpiUmSNx5zFgwtQAV1GaGazT2RWvqeDi0hV+AtC8unqqDSsaFjPxfsO6qPtKRRg25SisACWnJ37Yio8ttaw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.0.tgz",
      "integrity": "sha512-UtZQQI5k/b8d7d3i9AZmA/t+Q4tk3hOC0tMOMSq2GlMYOfxbesxG4mJSeDp0EHs30N9bsfwUvs3zF4v/RzOeTQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.0.tgz",
      "integrity": "sha512-+m03kvI2f5syIqHXCZLPVYplP8pQch9JHyXKZ3AGMKlg8dCyr2PKHjwRLiW53LTrN/Nc3EqHOKxUxzoSPdKddA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.0.tgz",
      "integrity": "sha512-lpPE1cLfP5oPzVjKMx10pgBmKELQnFJXHgvtHCtuJWOv8MxqdEIMNtgHgBFf7Ea2/7EuVwa9fodWUfXAlXZLZQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tinymce/tinymce-react": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/@tinymce/tinymce-react/-/tinymce-react-6.1.0.tgz",
      "integrity": "sha512-K0MP3yYVKe8+etUwsg6zyRq+q9TGLaVf005WiBHiB8JZEomAwbBPERGunhU9uOqNQ5gJs8yVOPZ68Xcd1UHclA==",
      "license": "MIT",
      "dependencies": {
        "prop-types": "^15.6.2"
      },
      "peerDependencies": {
        "react": "^19.0.0 || ^18.0.0 || ^17.0.1 || ^16.7.0",
        "react-dom": "^19.0.0 || ^18.0.0 || ^17.0.1 || ^16.7.0",
        "tinymce": "^7.0.0 || ^6.0.0 || ^5.5.1"
      },
      "peerDependenciesMeta": {
        "tinymce": {
          "optional": true
        }
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.2",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.2.tgz",
      "integrity": "sha512-oxLPMytKchWGbnQM9O7D67uPa9paTNxO7jVoNMXgkkErULBPhPARCfkKL9ytcIJJRGjbsVwW4ugJzyFFvm/Tiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.2",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.2.tgz",
      "integrity": "sha512-XGJkWF41Qq305SKWEILa1O8vzhb3aOo3ogBlSmiqNko/WmRb6QIaweuZCXjKygVDXpzXb5wyxKTSOsmkuqj+Qw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.4.1.tgz",
      "integrity": "sha512-IpEm5ZmeXAP/osiBXVVP5KjFMzbWOonMs0NaQQl+xYnUAcq4oHUBsF2+p4MgKWG4YMmFYJU8A6sxRPuowllm6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.26.10",
        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.8.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.4.tgz",
      "integrity": "sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001688",
        "electron-to-chromium": "^1.5.73",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.1"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001715",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001715.tgz",
      "integrity": "sha512-7ptkFGMm2OAOgvZpwgA4yjQ5SQbrNVGdRjzH0pBdy1Fasvcr+KAeECmbCAECzTuDuoX0FCY8KzUxjf9+9kfZEw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dompurify": {
      "version": "3.2.5",
      "resolved": "https://registry.npmjs.org/dompurify/-/dompurify-3.2.5.tgz",
      "integrity": "sha512-mLPd29uoRe9HpvwP2TxClGQBzGXeEC/we/q+bFlmPPmj2p2Ugl3r6ATu/UU1v77DXNcehiBg9zsr1dREyA/dJQ==",
      "license": "(MPL-2.0 OR Apache-2.0)",
      "optionalDependencies": {
        "@types/trusted-types": "^2.0.7"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.140",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.140.tgz",
      "integrity": "sha512-o82Rj+ONp4Ip7Cl1r7lrqx/pXhbp/lh9DpKcMNscFJdh8ebyRofnc7Sh01B4jx403RI0oqTBvlZ7OBIZLMr2+Q==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.3",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.3.tgz",
      "integrity": "sha512-qKA6Pvai73+M2FtftpNKRxJ78GIjmFXFxd/1DVBqGo/qNhLSfv+G12n9pNoWdytJC8U00TrViOwpjT0zgqQS8Q==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.3",
        "@esbuild/android-arm": "0.25.3",
        "@esbuild/android-arm64": "0.25.3",
        "@esbuild/android-x64": "0.25.3",
        "@esbuild/darwin-arm64": "0.25.3",
        "@esbuild/darwin-x64": "0.25.3",
        "@esbuild/freebsd-arm64": "0.25.3",
        "@esbuild/freebsd-x64": "0.25.3",
        "@esbuild/linux-arm": "0.25.3",
        "@esbuild/linux-arm64": "0.25.3",
        "@esbuild/linux-ia32": "0.25.3",
        "@esbuild/linux-loong64": "0.25.3",
        "@esbuild/linux-mips64el": "0.25.3",
        "@esbuild/linux-ppc64": "0.25.3",
        "@esbuild/linux-riscv64": "0.25.3",
        "@esbuild/linux-s390x": "0.25.3",
        "@esbuild/linux-x64": "0.25.3",
        "@esbuild/netbsd-arm64": "0.25.3",
        "@esbuild/netbsd-x64": "0.25.3",
        "@esbuild/openbsd-arm64": "0.25.3",
        "@esbuild/openbsd-x64": "0.25.3",
        "@esbuild/sunos-x64": "0.25.3",
        "@esbuild/win32-arm64": "0.25.3",
        "@esbuild/win32-ia32": "0.25.3",
        "@esbuild/win32-x64": "0.25.3"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.25.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.25.1.tgz",
      "integrity": "sha512-E6Mtz9oGQWDCpV12319d59n4tx9zOTXSTmc8BLVxBx+G/0RdM5MvEEJLU9c0+aleoePYYgVTOsRblx433qmhWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.20.0",
        "@eslint/config-helpers": "^0.2.1",
        "@eslint/core": "^0.13.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.25.1",
        "@eslint/plugin-kit": "^0.2.8",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.3.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.20",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fdir": {
      "version": "6.4.4",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.0.0.tgz",
      "integrity": "sha512-iInW14XItCXET01CQFqudPOWP2jYMl7T+QRQT+UNcR/iQncN/F0UNpgd76iFkBPgNQb4+X3LV9tLJYzwh+Gl3A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "7.5.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.5.1.tgz",
      "integrity": "sha512-/jjU3fcYNd2bwz9Q0xt5TwyiyoO8XjSEFXJY4O/lMAlkGTHWuHRAbR9Etik+lSDqMC7A7mz3UlXzgYT6Vl58sA==",
      "license": "MIT",
      "dependencies": {
        "cookie": "^1.0.1",
        "set-cookie-parser": "^2.6.0",
        "turbo-stream": "2.4.0"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      },
      "peerDependenciesMeta": {
        "react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/react-router-dom": {
      "version": "7.5.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.5.1.tgz",
      "integrity": "sha512-5DPSPc7ENrt2tlKPq0FtpG80ZbqA9aIKEyqX6hSNJDlol/tr6iqCK4crqdsusmOSSotq6zDsn0y3urX9TuTNmA==",
      "license": "MIT",
      "dependencies": {
        "react-router": "7.5.1"
      },
      "engines": {
        "node": ">=20.0.0"
      },
      "peerDependencies": {
        "react": ">=18",
        "react-dom": ">=18"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.0.tgz",
      "integrity": "sha512-Noe455xmA96nnqH5piFtLobsGbCij7Tu+tb3c1vYjNbTkfzGqXqQXG3wJaYXkRZuQ0vEYN4bhwg7QnIrqB5B+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.7"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.40.0",
        "@rollup/rollup-android-arm64": "4.40.0",
        "@rollup/rollup-darwin-arm64": "4.40.0",
        "@rollup/rollup-darwin-x64": "4.40.0",
        "@rollup/rollup-freebsd-arm64": "4.40.0",
        "@rollup/rollup-freebsd-x64": "4.40.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.40.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.40.0",
        "@rollup/rollup-linux-arm64-gnu": "4.40.0",
        "@rollup/rollup-linux-arm64-musl": "4.40.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.40.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-musl": "4.40.0",
        "@rollup/rollup-linux-s390x-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-musl": "4.40.0",
        "@rollup/rollup-win32-arm64-msvc": "4.40.0",
        "@rollup/rollup-win32-ia32-msvc": "4.40.0",
        "@rollup/rollup-win32-x64-msvc": "4.40.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/set-cookie-parser": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
      "license": "MIT"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.13.tgz",
      "integrity": "sha512-mEwzpUgrLySlveBwEVDMKk5B57bhLPYovRfPAXD5gA/98Opn0rCDj3GtLwFvCvH5RK9uPCExUROW5NjDwvqkxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/turbo-stream": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/turbo-stream/-/turbo-stream-2.4.0.tgz",
      "integrity": "sha512-FHncC10WpBd2eOmGwpmQsWLDoK4cqsA/UT/GqNoaKOQnT8uzhtCbg3EoUDMvqpOSAI0S26mr0rkjzbOO6S3v1g==",
      "license": "ISC"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/vite": {
      "version": "6.3.2",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.2.tgz",
      "integrity": "sha512-ZSvGOXKGceizRQIZSz7TGJ0pS3QLlVY/9hwxVh17W3re67je1RKYzFHivZ/t0tubU78Vkyb9WnHPENSBCzbckg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.3",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.12"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tinymce/tinymce-react": "^6.1.0",
    "axios": "^1.8.4",
    "dompurify": "^3.2.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^7.5.1",
    "@chakra-ui/react": "^2.7.0",
    "@emotion/react": "^11.11.0",
    "@emotion/styled": "^11.11.0",
    "framer-motion": "^10.12.16",
    "react-icons": "^4.11.0",
    "@stitches/react": "^1.2.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.1",
    "postcss": "^8.4.27",
    "autoprefixer": "^10.4.14",
    "tailwindcss": "^3.4.7"
  }
}


{
  "rewrites": [
    { "source": "/(.*)", "destination": "/index.html" }
  ]
}

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})


node_modules/
.env
build/
dist/
